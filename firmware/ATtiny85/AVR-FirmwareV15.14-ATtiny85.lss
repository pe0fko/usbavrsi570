
AVR-FirmwareV15.14-ATtiny85.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001216  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000052  00800060  00001216  000012ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000003f  008000b2  008000b2  0000131c  2**0
                  ALLOC
  3 .eeprom       0000003e  00810000  00810000  0000131c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .debug_aranges 000000c8  00000000  00000000  00001360  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000044c  00000000  00000000  00001428  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001d7d  00000000  00000000  00001874  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a4a  00000000  00000000  000035f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001400  00000000  00000000  0000403b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001f0  00000000  00000000  0000543c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000079b  00000000  00000000  0000562c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a70  00000000  00000000  00005dc7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  00006837  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	3a c0       	rjmp	.+116    	; 0x76 <__ctors_end>
       2:	45 c7       	rjmp	.+3722   	; 0xe8e <__vector_1>
       4:	5d c0       	rjmp	.+186    	; 0xc0 <__bad_interrupt>
       6:	5c c0       	rjmp	.+184    	; 0xc0 <__bad_interrupt>
       8:	5b c0       	rjmp	.+182    	; 0xc0 <__bad_interrupt>
       a:	5a c0       	rjmp	.+180    	; 0xc0 <__bad_interrupt>
       c:	59 c0       	rjmp	.+178    	; 0xc0 <__bad_interrupt>
       e:	58 c0       	rjmp	.+176    	; 0xc0 <__bad_interrupt>
      10:	57 c0       	rjmp	.+174    	; 0xc0 <__bad_interrupt>
      12:	56 c0       	rjmp	.+172    	; 0xc0 <__bad_interrupt>
      14:	55 c0       	rjmp	.+170    	; 0xc0 <__bad_interrupt>
      16:	54 c0       	rjmp	.+168    	; 0xc0 <__bad_interrupt>
      18:	53 c0       	rjmp	.+166    	; 0xc0 <__bad_interrupt>
      1a:	52 c0       	rjmp	.+164    	; 0xc0 <__bad_interrupt>
      1c:	51 c0       	rjmp	.+162    	; 0xc0 <__bad_interrupt>

0000001e <usbDescriptorString0>:
      1e:	04 03 09 04                                         ....

00000022 <usbDescriptorStringVendor>:
      22:	1a 03 77 00 77 00 77 00 2e 00 6f 00 62 00 64 00     ..w.w.w...o.b.d.
      32:	65 00 76 00 2e 00 61 00 74 00                       e.v...a.t.

0000003c <usbDescriptorStringDevice>:
      3c:	16 03 44 00 47 00 38 00 53 00 41 00 51 00 2d 00     ..D.G.8.S.A.Q.-.
      4c:	49 00 32 00 43 00                                   I.2.C.

00000052 <usbDescriptorDevice>:
      52:	12 01 10 01 ff 00 00 08 c0 16 dc 05 00 01 01 02     ................
      62:	03 01                                               ..

00000064 <usbDescriptorConfiguration>:
      64:	09 02 12 00 01 01 00 80 0a 09 04 00 00 00 00 00     ................
	...

00000076 <__ctors_end>:
      76:	11 24       	eor	r1, r1
      78:	1f be       	out	0x3f, r1	; 63
      7a:	cf e5       	ldi	r28, 0x5F	; 95
      7c:	d2 e0       	ldi	r29, 0x02	; 2
      7e:	de bf       	out	0x3e, r29	; 62
      80:	cd bf       	out	0x3d, r28	; 61

00000082 <dotInit3>:
// The watchdog will need to be reset (<16ms). Fast (div 2K) prescaler after watchdog reset!
// MCUSR must be cleared (datasheet) it is not done within the wdt_disable().
void __attribute__((naked))
     __attribute__((section(".init3")))
dotInit3(void)
{
      82:	14 be       	out	0x34, r1	; 52
	MCUSR = 0;
	wdt_disable();
      84:	88 e1       	ldi	r24, 0x18	; 24
      86:	0f b6       	in	r0, 0x3f	; 63
      88:	f8 94       	cli
      8a:	81 bd       	out	0x21, r24	; 33
      8c:	11 bc       	out	0x21, r1	; 33
      8e:	0f be       	out	0x3f, r0	; 63

	IO_DDR = _BV(IO_P1);		// All port pins inputs except IO_P1 switching output
      90:	80 e1       	ldi	r24, 0x10	; 16
      92:	87 bb       	out	0x17, r24	; 23
	IO_PORT = 0;				// Inp on startup, no pullups
      94:	18 ba       	out	0x18, r1	; 24

00000096 <__do_copy_data>:
      96:	10 e0       	ldi	r17, 0x00	; 0
      98:	a0 e6       	ldi	r26, 0x60	; 96
      9a:	b0 e0       	ldi	r27, 0x00	; 0
      9c:	e6 e1       	ldi	r30, 0x16	; 22
      9e:	f2 e1       	ldi	r31, 0x12	; 18
      a0:	02 c0       	rjmp	.+4      	; 0xa6 <.do_copy_data_start>

000000a2 <.do_copy_data_loop>:
      a2:	05 90       	lpm	r0, Z+
      a4:	0d 92       	st	X+, r0

000000a6 <.do_copy_data_start>:
      a6:	a2 3b       	cpi	r26, 0xB2	; 178
      a8:	b1 07       	cpc	r27, r17
      aa:	d9 f7       	brne	.-10     	; 0xa2 <.do_copy_data_loop>

000000ac <__do_clear_bss>:
      ac:	10 e0       	ldi	r17, 0x00	; 0
      ae:	a2 eb       	ldi	r26, 0xB2	; 178
      b0:	b0 e0       	ldi	r27, 0x00	; 0
      b2:	01 c0       	rjmp	.+2      	; 0xb6 <.do_clear_bss_start>

000000b4 <.do_clear_bss_loop>:
      b4:	1d 92       	st	X+, r1

000000b6 <.do_clear_bss_start>:
      b6:	a1 3f       	cpi	r26, 0xF1	; 241
      b8:	b1 07       	cpc	r27, r17
      ba:	e1 f7       	brne	.-8      	; 0xb4 <.do_clear_bss_loop>
      bc:	0e d0       	rcall	.+28     	; 0xda <main>
      be:	a9 c8       	rjmp	.-3758   	; 0xfffff212 <__eeprom_end+0xff7ef1d4>

000000c0 <__bad_interrupt>:
      c0:	00 c0       	rjmp	.+0      	; 0xc2 <__vector_default>

000000c2 <__vector_default>:

				Si570_t		Si570_Data;			// Si570 register values
				sint16_t	replyBuf[4];		// USB Reply buffer
static	uint8_t			bIndex;

EMPTY_INTERRUPT( __vector_default );			// Redirect all unused interrupts to reti
      c2:	18 95       	reti

000000c4 <GetTemperature>:
GetTemperature()
{
	uint16_t temp;

	// Ref 1.1V, MUX=ADC4 temperature
	ADMUX = (1<<REFS1)|15;
      c4:	8f e8       	ldi	r24, 0x8F	; 143
      c6:	87 b9       	out	0x07, r24	; 7
	ADCSRA = (1<<ADEN)|(1<<ADSC)|(7<<ADPS0);
      c8:	87 ec       	ldi	r24, 0xC7	; 199
      ca:	86 b9       	out	0x06, r24	; 6

	while(ADCSRA & _BV(ADSC)) {}
      cc:	36 99       	sbic	0x06, 6	; 6
      ce:	fe cf       	rjmp	.-4      	; 0xcc <GetTemperature+0x8>

//	temp = ((ADC - 270) * (6 * (1<<4))) / 7;
	temp = ADC;	// V15.14 No data conversion anymore!
      d0:	24 b1       	in	r18, 0x04	; 4
      d2:	35 b1       	in	r19, 0x05	; 5

	ADCSRA = (0<<ADEN);
      d4:	16 b8       	out	0x06, r1	; 6
//	temp *= 6 * (1<<4);
//	temp /= 7;
//	temp = ((temp - 270) * (6 * (1<<4))) / 7;

	return temp;
}
      d6:	c9 01       	movw	r24, r18
      d8:	08 95       	ret

000000da <main>:
int __attribute__((naked)) 
main(void)
{

	// Check if eeprom is initialized, use only the field ChipCrtlData.
	if (eeprom_read_byte(&E.ChipCrtlData) == 0xFF)
      da:	8d e3       	ldi	r24, 0x3D	; 61
      dc:	90 e0       	ldi	r25, 0x00	; 0
      de:	77 d8       	rcall	.-3858   	; 0xfffff1ce <__eeprom_end+0xff7ef190>
      e0:	8f 3f       	cpi	r24, 0xFF	; 255
      e2:	41 f4       	brne	.+16     	; 0xf4 <main+0x1a>
		eeprom_write_block(&R, &E, sizeof(E));	// Initialize eeprom to "factory defaults".
      e4:	80 e6       	ldi	r24, 0x60	; 96
      e6:	90 e0       	ldi	r25, 0x00	; 0
      e8:	60 e0       	ldi	r22, 0x00	; 0
      ea:	70 e0       	ldi	r23, 0x00	; 0
      ec:	4e e3       	ldi	r20, 0x3E	; 62
      ee:	50 e0       	ldi	r21, 0x00	; 0
      f0:	76 d8       	rcall	.-3860   	; 0xfffff1de <__eeprom_end+0xff7ef1a0>
      f2:	07 c0       	rjmp	.+14     	; 0x102 <main+0x28>
	else
		eeprom_read_block(&R, &E, sizeof(E));	// Load the persistend data from eeprom.
      f4:	80 e6       	ldi	r24, 0x60	; 96
      f6:	90 e0       	ldi	r25, 0x00	; 0
      f8:	60 e0       	ldi	r22, 0x00	; 0
      fa:	70 e0       	ldi	r23, 0x00	; 0
      fc:	4e e3       	ldi	r20, 0x3E	; 62
      fe:	50 e0       	ldi	r21, 0x00	; 0
     100:	56 d8       	rcall	.-3924   	; 0xfffff1ae <__eeprom_end+0xff7ef170>

	if(R.RC_OSCCAL != 0xFF)
     102:	80 91 60 00 	lds	r24, 0x0060
     106:	8f 3f       	cpi	r24, 0xFF	; 255
     108:	09 f0       	breq	.+2      	; 0x10c <main+0x32>
		OSCCAL = R.RC_OSCCAL;
     10a:	81 bf       	out	0x31, r24	; 49

	SI570_OffLine = true;						// Si570 is offline, not initialized
     10c:	77 24       	eor	r7, r7
     10e:	73 94       	inc	r7

#if INCLUDE_SN
	// Update the USB SerialNumber string with the correct ID from eprom.
	usbDescriptorStringSerialNumber[
     110:	80 91 97 00 	lds	r24, 0x0097
     114:	80 93 ae 00 	sts	0x00AE, r24
     118:	10 92 af 00 	sts	0x00AF, r1
		sizeof(usbDescriptorStringSerialNumber)/sizeof(int)-1] = R.SerialNumber;
#endif

	DeviceInit();								// Initialize the Si570 device.
     11c:	49 d5       	rcall	.+2706   	; 0xbb0 <DeviceInit>
     11e:	88 ee       	ldi	r24, 0xE8	; 232
     120:	93 e0       	ldi	r25, 0x03	; 3
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     122:	2c e9       	ldi	r18, 0x9C	; 156
     124:	31 e0       	ldi	r19, 0x01	; 1
     126:	f9 01       	movw	r30, r18
     128:	31 97       	sbiw	r30, 0x01	; 1
     12a:	f1 f7       	brne	.-4      	; 0x128 <main+0x4e>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     12c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     12e:	d9 f7       	brne	.-10     	; 0x126 <main+0x4c>

	// Start USB enumeration
	_delay_ms(100);								// First wait USB connection is stable
	usbDeviceDisconnect();
     130:	ba 9a       	sbi	0x17, 2	; 23
     132:	80 ea       	ldi	r24, 0xA0	; 160
     134:	9f e0       	ldi	r25, 0x0F	; 15
     136:	2c e9       	ldi	r18, 0x9C	; 156
     138:	31 e0       	ldi	r19, 0x01	; 1
     13a:	f9 01       	movw	r30, r18
     13c:	31 97       	sbiw	r30, 0x01	; 1
     13e:	f1 f7       	brne	.-4      	; 0x13c <main+0x62>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     140:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     142:	d9 f7       	brne	.-10     	; 0x13a <main+0x60>
	_delay_ms(400);
	usbDeviceConnect();
     144:	ba 98       	cbi	0x17, 2	; 23

	wdt_enable(WDTO_250MS);						// Watchdog 250ms
     146:	2c e0       	ldi	r18, 0x0C	; 12
     148:	88 e1       	ldi	r24, 0x18	; 24
     14a:	90 e0       	ldi	r25, 0x00	; 0
     14c:	0f b6       	in	r0, 0x3f	; 63
     14e:	f8 94       	cli
     150:	a8 95       	wdr
     152:	81 bd       	out	0x21, r24	; 33
     154:	0f be       	out	0x3f, r0	; 63
     156:	21 bd       	out	0x21, r18	; 33

	usbInit();									// Init the USB used ports
     158:	45 d5       	rcall	.+2698   	; 0xbe4 <usbInit>

	sei();										// Enable interupts
     15a:	78 94       	sei

	while(true)
	{
	    wdt_reset();
     15c:	a8 95       	wdr
	    usbPoll();
     15e:	49 d5       	rcall	.+2706   	; 0xbf2 <usbPoll>

#if  INCLUDE_SI570
		DeviceInit();
     160:	27 d5       	rcall	.+2638   	; 0xbb0 <DeviceInit>
     162:	fc cf       	rjmp	.-8      	; 0x15c <main+0x82>

00000164 <usbFunctionSetup>:
}


usbMsgLen_t 
usbFunctionSetup(uchar data[8])
{
     164:	ff 92       	push	r15
     166:	0f 93       	push	r16
     168:	1f 93       	push	r17
     16a:	cf 93       	push	r28
     16c:	df 93       	push	r29
     16e:	ec 01       	movw	r28, r24
	usbRequest_t* rq = (usbRequest_t*)data;
	usbRequest = rq->bRequest;
     170:	29 81       	ldd	r18, Y+1	; 0x01
     172:	62 2e       	mov	r6, r18

    usbMsgPtr = (uchar*)replyBuf;
     174:	8b eb       	ldi	r24, 0xBB	; 187
     176:	90 e0       	ldi	r25, 0x00	; 0
     178:	90 93 d6 00 	sts	0x00D6, r25
     17c:	80 93 d5 00 	sts	0x00D5, r24
	replyBuf[0].b0 = 0xff;						// return value 0xff => command not supported 
     180:	8f ef       	ldi	r24, 0xFF	; 255
     182:	80 93 bb 00 	sts	0x00BB, r24


	SWITCH_START(usbRequest)


	SWITCH_CASE(CMD_GET_VERSION)				// Return software version number
     186:	22 23       	and	r18, r18
     188:	19 f4       	brne	.+6      	; 0x190 <usbFunctionSetup+0x2c>
		replyBuf[0].w = (VERSION_MAJOR<<8)|(VERSION_MINOR);
     18a:	8e e0       	ldi	r24, 0x0E	; 14
     18c:	9f e0       	ldi	r25, 0x0F	; 15
     18e:	37 c0       	rjmp	.+110    	; 0x1fe <usbFunctionSetup+0x9a>
//		replyBuf[0].w = rq->wValue.word;		// rq->bRequest identical data[1]!
//		return sizeof(uint16_t);


#if  INCLUDE_NOT_USED
	SWITCH_CASE(CMD_SET_DDR)					// set port directions
     190:	21 30       	cpi	r18, 0x01	; 1
     192:	21 f4       	brne	.+8      	; 0x19c <usbFunctionSetup+0x38>
		IO_DDR = data[2] & 
     194:	8a 81       	ldd	r24, Y+2	; 0x02
     196:	8a 7f       	andi	r24, 0xFA	; 250
     198:	87 bb       	out	0x17, r24	; 23
     19a:	40 c1       	rjmp	.+640    	; 0x41c <__stack+0x1bd>
		return 0;
#endif


#if  INCLUDE_NOT_USED
	SWITCH_CASE(CMD_GET_PIN)					// read ports (pe0fko changed)
     19c:	22 30       	cpi	r18, 0x02	; 2
     19e:	11 f4       	brne	.+4      	; 0x1a4 <usbFunctionSetup+0x40>
		replyBuf[0].b0 = IO_PIN;
     1a0:	86 b3       	in	r24, 0x16	; 22
     1a2:	39 c1       	rjmp	.+626    	; 0x416 <__stack+0x1b7>
		return sizeof(uint8_t);
#endif


#if  INCLUDE_NOT_USED
	SWITCH_CASE(CMD_GET_PORT)					// read port states 
     1a4:	23 30       	cpi	r18, 0x03	; 3
     1a6:	11 f4       	brne	.+4      	; 0x1ac <usbFunctionSetup+0x48>
		replyBuf[0].b0 = IO_PORT;
     1a8:	88 b3       	in	r24, 0x18	; 24
     1aa:	35 c1       	rjmp	.+618    	; 0x416 <__stack+0x1b7>
		return sizeof(uint8_t);


	SWITCH_CASE(CMD_SET_PORT)					// set ports 
     1ac:	24 30       	cpi	r18, 0x04	; 4
     1ae:	49 f4       	brne	.+18     	; 0x1c2 <usbFunctionSetup+0x5e>
#if  INCLUDE_ABPF | INCLUDE_IBPF
		if (!FilterCrossOverOn)
     1b0:	80 91 71 00 	lds	r24, 0x0071
     1b4:	88 23       	and	r24, r24
     1b6:	09 f0       	breq	.+2      	; 0x1ba <usbFunctionSetup+0x56>
     1b8:	31 c1       	rjmp	.+610    	; 0x41c <__stack+0x1bd>
#endif
		{
			IO_PORT = data[2] & 
     1ba:	8a 81       	ldd	r24, Y+2	; 0x02
     1bc:	8a 7f       	andi	r24, 0xFA	; 250
     1be:	88 bb       	out	0x18, r24	; 24
     1c0:	2d c1       	rjmp	.+602    	; 0x41c <__stack+0x1bd>
		}
		return 0;
#endif


	SWITCH_CASE(CMD_REBOOT)						// Watchdog reset
     1c2:	2f 30       	cpi	r18, 0x0F	; 15
     1c4:	09 f4       	brne	.+2      	; 0x1c8 <usbFunctionSetup+0x64>
     1c6:	ff cf       	rjmp	.-2      	; 0x1c6 <usbFunctionSetup+0x62>
		while(true) ;


	SWITCH_CASE(CMD_SET_IO)						// Set IO port with mask and data bytes
     1c8:	25 31       	cpi	r18, 0x15	; 21
     1ca:	f9 f4       	brne	.+62     	; 0x20a <usbFunctionSetup+0xa6>
#if  INCLUDE_ABPF | INCLUDE_IBPF
		if (!FilterCrossOverOn)
     1cc:	80 91 71 00 	lds	r24, 0x0071
     1d0:	88 23       	and	r24, r24
     1d2:	79 f4       	brne	.+30     	; 0x1f2 <usbFunctionSetup+0x8e>
#endif
		{	// SoftRock V9 only had 2 I/O pins from tiny45 available.
			uint8_t msk,dat;		
			msk = (rq->wValue.bytes[0] << IO_BIT_START) & (IO_BIT_MASK << IO_BIT_START);
			dat = (rq->wIndex.bytes[0] << IO_BIT_START) & (IO_BIT_MASK << IO_BIT_START);
			IO_DDR  = (IO_DDR & ~(IO_BIT_MASK << IO_BIT_START)) | msk;
     1d4:	87 b3       	in	r24, 0x17	; 23
     1d6:	9a 81       	ldd	r25, Y+2	; 0x02
     1d8:	92 95       	swap	r25
     1da:	90 73       	andi	r25, 0x30	; 48
     1dc:	8f 7c       	andi	r24, 0xCF	; 207
     1de:	89 2b       	or	r24, r25
     1e0:	87 bb       	out	0x17, r24	; 23
			IO_PORT = (IO_PORT & ~msk) | dat;
     1e2:	88 b3       	in	r24, 0x18	; 24
     1e4:	90 95       	com	r25
     1e6:	98 23       	and	r25, r24
     1e8:	8c 81       	ldd	r24, Y+4	; 0x04
     1ea:	82 95       	swap	r24
     1ec:	80 73       	andi	r24, 0x30	; 48
     1ee:	98 2b       	or	r25, r24
     1f0:	98 bb       	out	0x18, r25	; 24
		}
		// Return I/O pin's
		replyBuf[0].w = (IO_PIN>>IO_BIT_START) & IO_BIT_MASK;
     1f2:	86 b3       	in	r24, 0x16	; 22
     1f4:	82 95       	swap	r24
     1f6:	8f 70       	andi	r24, 0x0F	; 15
     1f8:	90 e0       	ldi	r25, 0x00	; 0
     1fa:	83 70       	andi	r24, 0x03	; 3
     1fc:	90 70       	andi	r25, 0x00	; 0
     1fe:	90 93 bc 00 	sts	0x00BC, r25
     202:	80 93 bb 00 	sts	0x00BB, r24
     206:	82 e0       	ldi	r24, 0x02	; 2
     208:	0c c1       	rjmp	.+536    	; 0x422 <__stack+0x1c3>
        return sizeof(uint16_t);

	SWITCH_CASE(CMD_GET_IO)						// Read I/O bits
     20a:	26 31       	cpi	r18, 0x16	; 22
     20c:	91 f3       	breq	.-28     	; 0x1f2 <usbFunctionSetup+0x8e>
		replyBuf[0].w = (IO_PIN>>IO_BIT_START) & IO_BIT_MASK;
        return sizeof(uint16_t);


#if  INCLUDE_ABPF | INCLUDE_IBPF
	SWITCH_CASE(CMD_SET_FILTER)					// Read and Write the Filter Cross over point's and use it.
     20e:	27 31       	cpi	r18, 0x17	; 23
     210:	11 f5       	brne	.+68     	; 0x256 <usbFunctionSetup+0xf2>
		uint8_t index = rq->wIndex.bytes[0];
     212:	6c 81       	ldd	r22, Y+4	; 0x04

		if (rq->wIndex.bytes[1] == 0) {
     214:	8d 81       	ldd	r24, Y+5	; 0x05
     216:	88 23       	and	r24, r24
     218:	09 f0       	breq	.+2      	; 0x21c <usbFunctionSetup+0xb8>
     21a:	00 c1       	rjmp	.+512    	; 0x41c <__stack+0x1bd>
			// RX Filter cross over point table.

			if (index < 4)
     21c:	64 30       	cpi	r22, 0x04	; 4
     21e:	a0 f4       	brcc	.+40     	; 0x248 <usbFunctionSetup+0xe4>
			{
				R.FilterCrossOver[index].w = rq->wValue.word;
     220:	70 e0       	ldi	r23, 0x00	; 0
     222:	66 0f       	add	r22, r22
     224:	77 1f       	adc	r23, r23
     226:	fb 01       	movw	r30, r22
     228:	e0 5a       	subi	r30, 0xA0	; 160
     22a:	ff 4f       	sbci	r31, 0xFF	; 255
     22c:	8a 81       	ldd	r24, Y+2	; 0x02
     22e:	9b 81       	ldd	r25, Y+3	; 0x03
     230:	94 87       	std	Z+12, r25	; 0x0c
     232:	83 87       	std	Z+11, r24	; 0x0b

				eeprom_write_block(&R.FilterCrossOver[index].w, 
     234:	65 5f       	subi	r22, 0xF5	; 245
     236:	7f 4f       	sbci	r23, 0xFF	; 255
     238:	cb 01       	movw	r24, r22
     23a:	80 5a       	subi	r24, 0xA0	; 160
     23c:	9f 4f       	sbci	r25, 0xFF	; 255
     23e:	60 50       	subi	r22, 0x00	; 0
     240:	70 40       	sbci	r23, 0x00	; 0
     242:	42 e0       	ldi	r20, 0x02	; 2
     244:	50 e0       	ldi	r21, 0x00	; 0
     246:	cb d7       	rcall	.+3990   	; 0x11de <__eewr_block_tn85>
						&E.FilterCrossOver[index].w, 
						sizeof(E.FilterCrossOver[0].w));
			}

			usbMsgPtr = (uint8_t*)&R.FilterCrossOver;
     248:	8b e6       	ldi	r24, 0x6B	; 107
     24a:	90 e0       	ldi	r25, 0x00	; 0
     24c:	90 93 d6 00 	sts	0x00D6, r25
     250:	80 93 d5 00 	sts	0x00D5, r24
     254:	3e c0       	rjmp	.+124    	; 0x2d2 <__stack+0x73>
		}
#endif


#if  INCLUDE_SI570
	SWITCH_CASE(CMD_SET_SI570)					// [DEBUG] Write byte to Si570 register
     256:	20 32       	cpi	r18, 0x20	; 32
     258:	61 f4       	brne	.+24     	; 0x272 <__stack+0x13>
		Si570CmdReg(rq->wValue.bytes[1], rq->wIndex.bytes[0]);
     25a:	8b 81       	ldd	r24, Y+3	; 0x03
     25c:	6c 81       	ldd	r22, Y+4	; 0x04
     25e:	2f d3       	rcall	.+1630   	; 0x8be <Si570CmdReg>
#if  INCLUDE_SMOOTH
		FreqSmoothTune = 0;						// Next SetFreq call no smoodtune
     260:	10 92 c3 00 	sts	0x00C3, r1
     264:	10 92 c4 00 	sts	0x00C4, r1
     268:	10 92 c5 00 	sts	0x00C5, r1
     26c:	10 92 c6 00 	sts	0x00C6, r1
     270:	55 c0       	rjmp	.+170    	; 0x31c <__stack+0xbd>
		replyBuf[0].b0 = I2CErrors;				// return I2C transmission error status
        return sizeof(uint8_t);
#endif


	SWITCH_CASE6(CMD_SET_FREQ_REG,CMD_SET_LO_SM,CMD_SET_FREQ,CMD_SET_XTAL,CMD_SET_STARTUP,CMD_SET_PPM)
     272:	82 2f       	mov	r24, r18
     274:	80 53       	subi	r24, 0x30	; 48
     276:	86 30       	cpi	r24, 0x06	; 6
     278:	28 f4       	brcc	.+10     	; 0x284 <__stack+0x25>
		//	0x31								// Write the FREQ mul & add to the eeprom
		//	0x32								// Set frequency by value and load Si570
		//	0x33								// write new crystal frequency to EEPROM and use it.
		//	0x34								// Write new startup frequency to eeprom
		//	0x35								// Write new smooth tune to eeprom and use it.
		bIndex = rq->wIndex.bytes[0];
     27a:	8c 81       	ldd	r24, Y+4	; 0x04
     27c:	80 93 b2 00 	sts	0x00B2, r24
     280:	8f ef       	ldi	r24, 0xFF	; 255
     282:	cf c0       	rjmp	.+414    	; 0x422 <__stack+0x1c3>
        return 2 * sizeof(uint32_t);
#endif


#if  INCLUDE_IBPF
	SWITCH_CASE(CMD_GET_LO_SM)					// Return the frequency subtract multiply
     284:	29 33       	cpi	r18, 0x39	; 57
     286:	39 f5       	brne	.+78     	; 0x2d6 <__stack+0x77>
		uint8_t band = rq->wIndex.bytes[0] & (MAX_BAND-1);	// 0..3 only
		memcpy(&replyBuf[0].w, &R.BandSub[band], sizeof(uint32_t));
     288:	ec 81       	ldd	r30, Y+4	; 0x04
     28a:	e3 70       	andi	r30, 0x03	; 3
     28c:	f0 e0       	ldi	r31, 0x00	; 0
     28e:	ee 0f       	add	r30, r30
     290:	ff 1f       	adc	r31, r31
     292:	ee 0f       	add	r30, r30
     294:	ff 1f       	adc	r31, r31
     296:	df 01       	movw	r26, r30
     298:	a9 58       	subi	r26, 0x89	; 137
     29a:	bf 4f       	sbci	r27, 0xFF	; 255
     29c:	8d 91       	ld	r24, X+
     29e:	9d 91       	ld	r25, X+
     2a0:	0d 90       	ld	r0, X+
     2a2:	bc 91       	ld	r27, X
     2a4:	a0 2d       	mov	r26, r0
     2a6:	80 93 bb 00 	sts	0x00BB, r24
     2aa:	90 93 bc 00 	sts	0x00BC, r25
     2ae:	a0 93 bd 00 	sts	0x00BD, r26
     2b2:	b0 93 be 00 	sts	0x00BE, r27
		memcpy(&replyBuf[2].w, &R.BandMul[band], sizeof(uint32_t));
     2b6:	e9 57       	subi	r30, 0x79	; 121
     2b8:	ff 4f       	sbci	r31, 0xFF	; 255
     2ba:	80 81       	ld	r24, Z
     2bc:	91 81       	ldd	r25, Z+1	; 0x01
     2be:	a2 81       	ldd	r26, Z+2	; 0x02
     2c0:	b3 81       	ldd	r27, Z+3	; 0x03
     2c2:	80 93 bf 00 	sts	0x00BF, r24
     2c6:	90 93 c0 00 	sts	0x00C0, r25
     2ca:	a0 93 c1 00 	sts	0x00C1, r26
     2ce:	b0 93 c2 00 	sts	0x00C2, r27
     2d2:	88 e0       	ldi	r24, 0x08	; 8
     2d4:	a6 c0       	rjmp	.+332    	; 0x422 <__stack+0x1c3>
        return 2 * sizeof(uint32_t);
#endif


	SWITCH_CASE(CMD_GET_FREQ)					// Return running frequnecy
     2d6:	2a 33       	cpi	r18, 0x3A	; 58
     2d8:	19 f4       	brne	.+6      	; 0x2e0 <__stack+0x81>
		usbMsgPtr = (uint8_t*)&R.Freq;
     2da:	85 e6       	ldi	r24, 0x65	; 101
     2dc:	90 e0       	ldi	r25, 0x00	; 0
     2de:	80 c0       	rjmp	.+256    	; 0x3e0 <__stack+0x181>
        return sizeof(uint32_t);


#if  INCLUDE_SMOOTH
	SWITCH_CASE(CMD_GET_PPM)					// Return smooth tune ppm value
     2e0:	2b 33       	cpi	r18, 0x3B	; 59
     2e2:	39 f4       	brne	.+14     	; 0x2f2 <__stack+0x93>
		usbMsgPtr = (uint8_t*)&R.SmoothTunePPM;
     2e4:	89 e6       	ldi	r24, 0x69	; 105
     2e6:	90 e0       	ldi	r25, 0x00	; 0
     2e8:	90 93 d6 00 	sts	0x00D6, r25
     2ec:	80 93 d5 00 	sts	0x00D5, r24
     2f0:	8a cf       	rjmp	.-236    	; 0x206 <usbFunctionSetup+0xa2>
        return sizeof(uint16_t);
#endif


	SWITCH_CASE(CMD_GET_STARTUP)				// Return the startup frequency
     2f2:	2c 33       	cpi	r18, 0x3C	; 60
     2f4:	41 f4       	brne	.+16     	; 0x306 <__stack+0xa7>
		eeprom_read_block(replyBuf, &E.Freq, sizeof(E.Freq));
     2f6:	8b eb       	ldi	r24, 0xBB	; 187
     2f8:	90 e0       	ldi	r25, 0x00	; 0
     2fa:	65 e0       	ldi	r22, 0x05	; 5
     2fc:	70 e0       	ldi	r23, 0x00	; 0
     2fe:	44 e0       	ldi	r20, 0x04	; 4
     300:	50 e0       	ldi	r21, 0x00	; 0
     302:	55 d7       	rcall	.+3754   	; 0x11ae <__eerd_block_tn85>
     304:	71 c0       	rjmp	.+226    	; 0x3e8 <__stack+0x189>
		return sizeof(uint32_t);


	SWITCH_CASE(CMD_GET_XTAL)					// Return the XTal frequnecy
     306:	2d 33       	cpi	r18, 0x3D	; 61
     308:	19 f4       	brne	.+6      	; 0x310 <__stack+0xb1>
		usbMsgPtr = (uint8_t*)&R.FreqXtal;
     30a:	81 e6       	ldi	r24, 0x61	; 97
     30c:	90 e0       	ldi	r25, 0x00	; 0
     30e:	68 c0       	rjmp	.+208    	; 0x3e0 <__stack+0x181>
//	SWITCH_CASE(CMD_GET_REGS)					// read out calculated frequency control registers
//		usbMsgPtr = (uint8_t*)&Si570_Data;
//		return sizeof(Si570_t);


	SWITCH_CASE(CMD_GET_SI570)					// read out chip frequency control registers
     310:	2f 33       	cpi	r18, 0x3F	; 63
     312:	11 f4       	brne	.+4      	; 0x318 <__stack+0xb9>
		return GetRegFromSi570();				// read all registers in one block to replyBuf[]
     314:	b1 d2       	rcall	.+1378   	; 0x878 <GetRegFromSi570>
     316:	85 c0       	rjmp	.+266    	; 0x422 <__stack+0x1c3>


#if  INCLUDE_I2C
	SWITCH_CASE(CMD_GET_I2C_ERR)				// return I2C transmission error status
     318:	20 34       	cpi	r18, 0x40	; 64
     31a:	19 f4       	brne	.+6      	; 0x322 <__stack+0xc3>
		replyBuf[0].b0 = I2CErrors;
     31c:	80 92 bb 00 	sts	0x00BB, r8
     320:	7f c0       	rjmp	.+254    	; 0x420 <__stack+0x1c1>
		return sizeof(uint8_t);
#endif


	SWITCH_CASE(CMD_SET_I2C_ADDR)				// Set the new i2c address or factory default (pe0fko: function changed)
     322:	21 34       	cpi	r18, 0x41	; 65
     324:	69 f4       	brne	.+26     	; 0x340 <__stack+0xe1>
		replyBuf[0].b0 = R.ChipCrtlData;		// Return the old I2C address (V15.12)
     326:	80 91 9d 00 	lds	r24, 0x009D
     32a:	80 93 bb 00 	sts	0x00BB, r24
		if (rq->wValue.bytes[0] != 0) {			// Only set if Value != 0
     32e:	6a 81       	ldd	r22, Y+2	; 0x02
     330:	66 23       	and	r22, r22
     332:	09 f4       	brne	.+2      	; 0x336 <__stack+0xd7>
     334:	75 c0       	rjmp	.+234    	; 0x420 <__stack+0x1c1>
			R.ChipCrtlData = rq->wValue.bytes[0];
     336:	60 93 9d 00 	sts	0x009D, r22
			eeprom_write_byte(&E.ChipCrtlData, R.ChipCrtlData);
     33a:	8d e3       	ldi	r24, 0x3D	; 61
     33c:	90 e0       	ldi	r25, 0x00	; 0
     33e:	12 c0       	rjmp	.+36     	; 0x364 <__stack+0x105>
		}
		return sizeof(R.ChipCrtlData);


#if INCLUDE_TEMP
	SWITCH_CASE(CMD_GET_CPU_TEMP)				// Read the temperature mux 0
     340:	22 34       	cpi	r18, 0x42	; 66
     342:	11 f4       	brne	.+4      	; 0x348 <__stack+0xe9>
		replyBuf[0].w = GetTemperature();
     344:	bf de       	rcall	.-642    	; 0xc4 <GetTemperature>
     346:	5b cf       	rjmp	.-330    	; 0x1fe <usbFunctionSetup+0x9a>
		return sizeof(uint16_t);
#endif


#if INCLUDE_SN
	SWITCH_CASE(CMD_GET_USB_ID)					// Get/Set the USB SeialNumber ID
     348:	23 34       	cpi	r18, 0x43	; 67
     34a:	71 f4       	brne	.+28     	; 0x368 <__stack+0x109>
		replyBuf[0].b0 = R.SerialNumber;
     34c:	80 91 97 00 	lds	r24, 0x0097
     350:	80 93 bb 00 	sts	0x00BB, r24
		if (rq->wValue.bytes[0] != 0) {			// Only set if Value != 0
     354:	6a 81       	ldd	r22, Y+2	; 0x02
     356:	66 23       	and	r22, r22
     358:	09 f4       	brne	.+2      	; 0x35c <__stack+0xfd>
     35a:	62 c0       	rjmp	.+196    	; 0x420 <__stack+0x1c1>
			R.SerialNumber = rq->wValue.bytes[0];
     35c:	60 93 97 00 	sts	0x0097, r22
			eeprom_write_byte(&E.SerialNumber, R.SerialNumber);
     360:	87 e3       	ldi	r24, 0x37	; 55
     362:	90 e0       	ldi	r25, 0x00	; 0
     364:	45 d7       	rcall	.+3722   	; 0x11f0 <__eewr_byte_tn85>
     366:	5c c0       	rjmp	.+184    	; 0x420 <__stack+0x1c1>
		return sizeof(R.SerialNumber);
#endif


#if INCLUDE_SI570_GRADE
	SWITCH_CASE(CMD_SET_SI570_GRADE)			// Set Si570 grade (A,B,C)
     368:	24 34       	cpi	r18, 0x44	; 68
     36a:	31 f5       	brne	.+76     	; 0x3b8 <__stack+0x159>
		if (rq->wValue.bytes[0] != 0) 
     36c:	6a 81       	ldd	r22, Y+2	; 0x02
     36e:	66 23       	and	r22, r22
     370:	29 f0       	breq	.+10     	; 0x37c <__stack+0x11d>
		{
			R.Si570Grade = rq->wValue.bytes[0];
     372:	60 93 9c 00 	sts	0x009C, r22
			eeprom_write_byte(&E.Si570Grade, R.Si570Grade);
     376:	8c e3       	ldi	r24, 0x3C	; 60
     378:	90 e0       	ldi	r25, 0x00	; 0
     37a:	3a d7       	rcall	.+3700   	; 0x11f0 <__eewr_byte_tn85>
		}
		if (rq->wIndex.word != 0) 
     37c:	6c 81       	ldd	r22, Y+4	; 0x04
     37e:	7d 81       	ldd	r23, Y+5	; 0x05
     380:	61 15       	cp	r22, r1
     382:	71 05       	cpc	r23, r1
     384:	89 f0       	breq	.+34     	; 0x3a8 <__stack+0x149>
		{
			if (rq->wValue.bytes[1] == 0) 
     386:	8b 81       	ldd	r24, Y+3	; 0x03
     388:	88 23       	and	r24, r24
     38a:	39 f4       	brne	.+14     	; 0x39a <__stack+0x13b>
			{
				R.Si570DCOMin = rq->wIndex.word;
     38c:	70 93 99 00 	sts	0x0099, r23
     390:	60 93 98 00 	sts	0x0098, r22
				eeprom_write_word(&E.Si570DCOMin, R.Si570DCOMin);
     394:	88 e3       	ldi	r24, 0x38	; 56
     396:	90 e0       	ldi	r25, 0x00	; 0
     398:	06 c0       	rjmp	.+12     	; 0x3a6 <__stack+0x147>
			}
			else
			{
				R.Si570DCOMax = rq->wIndex.word;
     39a:	70 93 9b 00 	sts	0x009B, r23
     39e:	60 93 9a 00 	sts	0x009A, r22
				eeprom_write_word(&E.Si570DCOMax, R.Si570DCOMax);
     3a2:	8a e3       	ldi	r24, 0x3A	; 58
     3a4:	90 e0       	ldi	r25, 0x00	; 0
     3a6:	32 d7       	rcall	.+3684   	; 0x120c <__eewr_word_tn85>
			}
		}
		usbMsgPtr = (uint8_t*)&R.Si570DCOMin;
     3a8:	88 e9       	ldi	r24, 0x98	; 152
     3aa:	90 e0       	ldi	r25, 0x00	; 0
     3ac:	90 93 d6 00 	sts	0x00D6, r25
     3b0:	80 93 d5 00 	sts	0x00D5, r24
     3b4:	85 e0       	ldi	r24, 0x05	; 5
     3b6:	35 c0       	rjmp	.+106    	; 0x422 <__stack+0x1c3>
        return sizeof(R.Si570Grade)+sizeof(R.Si570DCOMin)+sizeof(R.Si570DCOMax);
#endif


#if INCLUDE_IBPF
	SWITCH_CASE(CMD_SET_RX_BAND_FILTER)			// Set the Filters for band 0..3
     3b8:	28 31       	cpi	r18, 0x18	; 24
     3ba:	71 f4       	brne	.+28     	; 0x3d8 <__stack+0x179>
		uint8_t band = rq->wIndex.bytes[0] & (MAX_BAND-1);	// 0..3 only
     3bc:	0c 81       	ldd	r16, Y+4	; 0x04
     3be:	03 70       	andi	r16, 0x03	; 3
		uint8_t filter = rq->wValue.bytes[0];
     3c0:	fa 80       	ldd	r15, Y+2	; 0x02
		eeprom_write_byte(&E.Band2Filter[band], filter);
     3c2:	10 e0       	ldi	r17, 0x00	; 0
     3c4:	c8 01       	movw	r24, r16
     3c6:	8d 5e       	subi	r24, 0xED	; 237
     3c8:	9f 4f       	sbci	r25, 0xFF	; 255
     3ca:	6f 2d       	mov	r22, r15
     3cc:	11 d7       	rcall	.+3618   	; 0x11f0 <__eewr_byte_tn85>
		R.Band2Filter[band] = filter;
     3ce:	00 5a       	subi	r16, 0xA0	; 160
     3d0:	1f 4f       	sbci	r17, 0xFF	; 255
     3d2:	f8 01       	movw	r30, r16
     3d4:	f3 8a       	std	Z+19, r15	; 0x13
     3d6:	02 c0       	rjmp	.+4      	; 0x3dc <__stack+0x17d>
		usbMsgPtr = (uint8_t*)R.Band2Filter;	// Length from 
        return sizeof(R.Band2Filter);

	SWITCH_CASE(CMD_GET_RX_BAND_FILTER)			// Read the Filters for band 0..3
     3d8:	29 31       	cpi	r18, 0x19	; 25
     3da:	41 f4       	brne	.+16     	; 0x3ec <__stack+0x18d>
		usbMsgPtr = (uint8_t*)R.Band2Filter;	// Length from 
     3dc:	83 e7       	ldi	r24, 0x73	; 115
     3de:	90 e0       	ldi	r25, 0x00	; 0
     3e0:	90 93 d6 00 	sts	0x00D6, r25
     3e4:	80 93 d5 00 	sts	0x00D5, r24
     3e8:	84 e0       	ldi	r24, 0x04	; 4
     3ea:	1b c0       	rjmp	.+54     	; 0x422 <__stack+0x1c3>
        return sizeof(R.Band2Filter);
#endif


	SWITCH_CASE2(CMD_SET_USRP1,CMD_GET_CW_KEY)	// set IO_P1 (cmd=0x50) and read CW key level (cmd=0x50 & 0x51)
     3ec:	82 2f       	mov	r24, r18
     3ee:	80 55       	subi	r24, 0x50	; 80
     3f0:	82 30       	cpi	r24, 0x02	; 2
     3f2:	b0 f4       	brcc	.+44     	; 0x420 <__stack+0x1c1>
		replyBuf[0].b0 = (_BV(IO_P2) | _BV(BIT_SDA));	// CW Key 1 (PB4) & 2 (PB1 + i2c SDA)
     3f4:	82 e2       	ldi	r24, 0x22	; 34
     3f6:	80 93 bb 00 	sts	0x00BB, r24
#if  INCLUDE_ABPF | INCLUDE_IBPF
		if (!FilterCrossOverOn)
     3fa:	80 91 71 00 	lds	r24, 0x0071
     3fe:	88 23       	and	r24, r24
     400:	79 f4       	brne	.+30     	; 0x420 <__stack+0x1c1>
#endif
		{
			if (usbRequest == 0x50)
     402:	20 35       	cpi	r18, 0x50	; 80
     404:	31 f4       	brne	.+12     	; 0x412 <__stack+0x1b3>
			{
			    if (rq->wValue.bytes[0] == 0)
     406:	8a 81       	ldd	r24, Y+2	; 0x02
     408:	88 23       	and	r24, r24
     40a:	11 f4       	brne	.+4      	; 0x410 <__stack+0x1b1>
					bit_0(IO_PORT, IO_P1);
     40c:	c4 98       	cbi	0x18, 4	; 24
     40e:	01 c0       	rjmp	.+2      	; 0x412 <__stack+0x1b3>
				else
					bit_1(IO_PORT, IO_P1);
     410:	c4 9a       	sbi	0x18, 4	; 24
			}

			replyBuf[0].b0 &= IO_PIN;
     412:	86 b3       	in	r24, 0x16	; 22
     414:	82 72       	andi	r24, 0x22	; 34
     416:	80 93 bb 00 	sts	0x00BB, r24
     41a:	02 c0       	rjmp	.+4      	; 0x420 <__stack+0x1c1>
     41c:	80 e0       	ldi	r24, 0x00	; 0
     41e:	01 c0       	rjmp	.+2      	; 0x422 <__stack+0x1c3>
     420:	81 e0       	ldi	r24, 0x01	; 1
        return sizeof(uint8_t);

	SWITCH_END

    return 1;
}
     422:	df 91       	pop	r29
     424:	cf 91       	pop	r28
     426:	1f 91       	pop	r17
     428:	0f 91       	pop	r16
     42a:	ff 90       	pop	r15
     42c:	08 95       	ret

0000042e <usbFunctionWrite>:
/* ------------------------------------------------------------------------- */
/* ------------------------ interface to USB driver ------------------------ */
/* ------------------------------------------------------------------------- */

uchar usbFunctionWrite(uchar *data, uchar len) //sends len bytes to SI570
{
     42e:	cf 92       	push	r12
     430:	df 92       	push	r13
     432:	ef 92       	push	r14
     434:	ff 92       	push	r15
     436:	0f 93       	push	r16
     438:	1f 93       	push	r17
     43a:	cf 93       	push	r28
     43c:	df 93       	push	r29
     43e:	ec 01       	movw	r28, r24
	SWITCH_START(usbRequest)
     440:	86 2d       	mov	r24, r6

	SWITCH_CASE(CMD_SET_FREQ_REG)
     442:	80 33       	cpi	r24, 0x30	; 48
     444:	09 f0       	breq	.+2      	; 0x448 <usbFunctionWrite+0x1a>
     446:	5b c0       	rjmp	.+182    	; 0x4fe <L_X_686+0xa>
		if (len == sizeof(Si570_t)) {
     448:	66 30       	cpi	r22, 0x06	; 6
     44a:	09 f0       	breq	.+2      	; 0x44e <usbFunctionWrite+0x20>
     44c:	c7 c0       	rjmp	.+398    	; 0x5dc <L_X_686+0xe8>
	uint8_t		A0,A1,A2,A3,B0,B1,B2,B3,B4;
	uint8_t		N1,HS_DIV;
	uint16_t	N;
//	sint32_t	Freq;

	HS_DIV = (reg[0] >> 5) & 0x07;
     44e:	68 81       	ld	r22, Y
	N1 = ((reg[0] << 2) & 0x7C) | ((reg[1] >> 6) & 0x03);
     450:	39 81       	ldd	r19, Y+1	; 0x01
     452:	86 2f       	mov	r24, r22
     454:	88 0f       	add	r24, r24
     456:	88 0f       	add	r24, r24
     458:	8c 77       	andi	r24, 0x7C	; 124
     45a:	93 2f       	mov	r25, r19
     45c:	92 95       	swap	r25
     45e:	96 95       	lsr	r25
     460:	96 95       	lsr	r25
     462:	93 70       	andi	r25, 0x03	; 3
     464:	89 2b       	or	r24, r25

	A0 = 0;
	A1 = 0;
	A2 = 0;
	A3 = 0;
	B0 = reg[5];
     466:	dd 80       	ldd	r13, Y+5	; 0x05
	B1 = reg[4];
     468:	bc 81       	ldd	r27, Y+4	; 0x04
	B2 = reg[3];
     46a:	7b 81       	ldd	r23, Y+3	; 0x03
	B3 = reg[2];
     46c:	5a 81       	ldd	r21, Y+2	; 0x02
	B4 = reg[1] & 0x3F;
     46e:	3f 73       	andi	r19, 0x3F	; 63

	cnt = 40+1;

	asm volatile (
     470:	f0 e0       	ldi	r31, 0x00	; 0
     472:	a9 e2       	ldi	r26, 0x29	; 41
     474:	2f 2f       	mov	r18, r31
     476:	9a 2f       	mov	r25, r26
     478:	42 ec       	ldi	r20, 0xC2	; 194
     47a:	e4 2e       	mov	r14, r20
     47c:	45 ef       	ldi	r20, 0xF5	; 245
     47e:	f4 2e       	mov	r15, r20
     480:	48 e4       	ldi	r20, 0x48	; 72
     482:	04 2f       	mov	r16, r20
     484:	42 e7       	ldi	r20, 0x72	; 114
     486:	14 2f       	mov	r17, r20
     488:	4f 2f       	mov	r20, r31
     48a:	ef 2f       	mov	r30, r31
     48c:	cf 2e       	mov	r12, r31
     48e:	88 94       	clc

00000490 <L_A_669>:
     490:	20 f4       	brcc	.+8      	; 0x49a <L_B_669>
     492:	2e 0d       	add	r18, r14
     494:	4f 1d       	adc	r20, r15
     496:	e0 1f       	adc	r30, r16
     498:	c1 1e       	adc	r12, r17

0000049a <L_B_669>:
     49a:	c7 94       	ror	r12
     49c:	e7 95       	ror	r30
     49e:	47 95       	ror	r20
     4a0:	27 95       	ror	r18
     4a2:	37 95       	ror	r19
     4a4:	57 95       	ror	r21
     4a6:	77 95       	ror	r23
     4a8:	b7 95       	ror	r27
     4aa:	d7 94       	ror	r13
     4ac:	9a 95       	dec	r25
     4ae:	81 f7       	brne	.-32     	; 0x490 <L_A_669>
     4b0:	55 0f       	add	r21, r21
     4b2:	33 1f       	adc	r19, r19
     4b4:	22 1f       	adc	r18, r18
     4b6:	44 1f       	adc	r20, r20
     4b8:	ee 1f       	adc	r30, r30
     4ba:	cc 1c       	adc	r12, r12
     4bc:	ec 2c       	mov	r14, r12
	uint8_t		A0,A1,A2,A3,B0,B1,B2,B3,B4;
	uint8_t		N1,HS_DIV;
	uint16_t	N;
//	sint32_t	Freq;

	HS_DIV = (reg[0] >> 5) & 0x07;
     4be:	62 95       	swap	r22
     4c0:	66 95       	lsr	r22
     4c2:	67 70       	andi	r22, 0x07	; 7
	B0 = 0;			// Reminder = 0
	B1 = 0;

	cnt = 40+1;

	asm volatile (
     4c4:	6c 5f       	subi	r22, 0xFC	; 252
     4c6:	8f 5f       	subi	r24, 0xFF	; 255
     4c8:	90 e0       	ldi	r25, 0x00	; 0
     4ca:	70 e0       	ldi	r23, 0x00	; 0
     4cc:	31 d6       	rcall	.+3170   	; 0x1130 <__mulhi3>
     4ce:	5f 2f       	mov	r21, r31
     4d0:	88 94       	clc

000004d2 <L_A_686>:
     4d2:	33 1f       	adc	r19, r19
     4d4:	22 1f       	adc	r18, r18
     4d6:	44 1f       	adc	r20, r20
     4d8:	ee 1f       	adc	r30, r30
     4da:	ee 1c       	adc	r14, r14
     4dc:	ff 1f       	adc	r31, r31
     4de:	55 1f       	adc	r21, r21
     4e0:	f8 1b       	sub	r31, r24
     4e2:	59 0b       	sbc	r21, r25
     4e4:	20 f4       	brcc	.+8      	; 0x4ee <L_B_686>
     4e6:	f8 0f       	add	r31, r24
     4e8:	59 1f       	adc	r21, r25
     4ea:	88 94       	clc
     4ec:	01 c0       	rjmp	.+2      	; 0x4f0 <L_C_686>

000004ee <L_B_686>:
     4ee:	08 94       	sec

000004f0 <L_C_686>:
     4f0:	aa 95       	dec	r26
     4f2:	79 f7       	brne	.-34     	; 0x4d2 <L_A_686>

000004f4 <L_X_686>:
     4f4:	38 83       	st	Y, r19
     4f6:	29 83       	std	Y+1, r18	; 0x01
     4f8:	4a 83       	std	Y+2, r20	; 0x02
     4fa:	eb 83       	std	Y+3, r30	; 0x03
     4fc:	3b c0       	rjmp	.+118    	; 0x574 <L_X_686+0x80>
			eeprom_write_block(data, &E.FreqSub, 2*sizeof(uint32_t));
		}
#endif

#if  INCLUDE_IBPF
	SWITCH_CASE(CMD_SET_LO_SM)					// Write the frequency subtract multiply to the eeprom
     4fe:	81 33       	cpi	r24, 0x31	; 49
     500:	a9 f5       	brne	.+106    	; 0x56c <L_X_686+0x78>
		if (len == 2*sizeof(uint32_t)) {
     502:	68 30       	cpi	r22, 0x08	; 8
     504:	09 f0       	breq	.+2      	; 0x508 <L_X_686+0x14>
     506:	6a c0       	rjmp	.+212    	; 0x5dc <L_X_686+0xe8>
			bIndex &= MAX_BAND-1;
     508:	60 91 b2 00 	lds	r22, 0x00B2
     50c:	63 70       	andi	r22, 0x03	; 3
     50e:	60 93 b2 00 	sts	0x00B2, r22
			memcpy(&R.BandSub[bIndex], &data[0], sizeof(uint32_t));
     512:	70 e0       	ldi	r23, 0x00	; 0
     514:	66 0f       	add	r22, r22
     516:	77 1f       	adc	r23, r23
     518:	66 0f       	add	r22, r22
     51a:	77 1f       	adc	r23, r23
     51c:	fb 01       	movw	r30, r22
     51e:	e9 58       	subi	r30, 0x89	; 137
     520:	ff 4f       	sbci	r31, 0xFF	; 255
     522:	88 81       	ld	r24, Y
     524:	99 81       	ldd	r25, Y+1	; 0x01
     526:	aa 81       	ldd	r26, Y+2	; 0x02
     528:	bb 81       	ldd	r27, Y+3	; 0x03
     52a:	80 83       	st	Z, r24
     52c:	91 83       	std	Z+1, r25	; 0x01
     52e:	a2 83       	std	Z+2, r26	; 0x02
     530:	b3 83       	std	Z+3, r27	; 0x03
			eeprom_write_block(&data[0], &E.BandSub[bIndex], sizeof(uint32_t));
     532:	69 5e       	subi	r22, 0xE9	; 233
     534:	7f 4f       	sbci	r23, 0xFF	; 255
     536:	ce 01       	movw	r24, r28
     538:	44 e0       	ldi	r20, 0x04	; 4
     53a:	50 e0       	ldi	r21, 0x00	; 0
     53c:	50 d6       	rcall	.+3232   	; 0x11de <__eewr_block_tn85>
			memcpy(&R.BandMul[bIndex], &data[4], sizeof(uint32_t));
     53e:	60 91 b2 00 	lds	r22, 0x00B2
     542:	70 e0       	ldi	r23, 0x00	; 0
     544:	66 0f       	add	r22, r22
     546:	77 1f       	adc	r23, r23
     548:	66 0f       	add	r22, r22
     54a:	77 1f       	adc	r23, r23
     54c:	fb 01       	movw	r30, r22
     54e:	e9 57       	subi	r30, 0x79	; 121
     550:	ff 4f       	sbci	r31, 0xFF	; 255
     552:	8c 81       	ldd	r24, Y+4	; 0x04
     554:	9d 81       	ldd	r25, Y+5	; 0x05
     556:	ae 81       	ldd	r26, Y+6	; 0x06
     558:	bf 81       	ldd	r27, Y+7	; 0x07
     55a:	80 83       	st	Z, r24
     55c:	91 83       	std	Z+1, r25	; 0x01
     55e:	a2 83       	std	Z+2, r26	; 0x02
     560:	b3 83       	std	Z+3, r27	; 0x03
			eeprom_write_block(&data[4], &E.BandMul[bIndex], sizeof(uint32_t));
     562:	69 5d       	subi	r22, 0xD9	; 217
     564:	7f 4f       	sbci	r23, 0xFF	; 255
     566:	ce 01       	movw	r24, r28
     568:	04 96       	adiw	r24, 0x04	; 4
     56a:	25 c0       	rjmp	.+74     	; 0x5b6 <L_X_686+0xc2>
		}
#endif

	SWITCH_CASE(CMD_SET_FREQ)					// Set frequency by value and load Si570
     56c:	82 33       	cpi	r24, 0x32	; 50
     56e:	41 f4       	brne	.+16     	; 0x580 <L_X_686+0x8c>
		if (len == sizeof(uint32_t)) {
     570:	64 30       	cpi	r22, 0x04	; 4
     572:	a1 f5       	brne	.+104    	; 0x5dc <L_X_686+0xe8>
			SetFreq(*(uint32_t*)data);
     574:	68 81       	ld	r22, Y
     576:	79 81       	ldd	r23, Y+1	; 0x01
     578:	8a 81       	ldd	r24, Y+2	; 0x02
     57a:	9b 81       	ldd	r25, Y+3	; 0x03
     57c:	c2 d1       	rcall	.+900    	; 0x902 <SetFreq>
     57e:	2e c0       	rjmp	.+92     	; 0x5dc <L_X_686+0xe8>
		}

	SWITCH_CASE(CMD_SET_XTAL)					// write new crystal frequency to EEPROM and use it.
     580:	83 33       	cpi	r24, 0x33	; 51
     582:	91 f4       	brne	.+36     	; 0x5a8 <L_X_686+0xb4>
		if (len == sizeof(R.FreqXtal)) {
     584:	64 30       	cpi	r22, 0x04	; 4
     586:	51 f5       	brne	.+84     	; 0x5dc <L_X_686+0xe8>
			R.FreqXtal = *(uint32_t*)data;
     588:	88 81       	ld	r24, Y
     58a:	99 81       	ldd	r25, Y+1	; 0x01
     58c:	aa 81       	ldd	r26, Y+2	; 0x02
     58e:	bb 81       	ldd	r27, Y+3	; 0x03
     590:	80 93 61 00 	sts	0x0061, r24
     594:	90 93 62 00 	sts	0x0062, r25
     598:	a0 93 63 00 	sts	0x0063, r26
     59c:	b0 93 64 00 	sts	0x0064, r27
			eeprom_write_block(data, &E.FreqXtal, sizeof(E.FreqXtal));
     5a0:	ce 01       	movw	r24, r28
     5a2:	61 e0       	ldi	r22, 0x01	; 1
     5a4:	70 e0       	ldi	r23, 0x00	; 0
     5a6:	07 c0       	rjmp	.+14     	; 0x5b6 <L_X_686+0xc2>
		}

	SWITCH_CASE(CMD_SET_STARTUP)				// Write new startup frequency to eeprom
     5a8:	84 33       	cpi	r24, 0x34	; 52
     5aa:	41 f4       	brne	.+16     	; 0x5bc <L_X_686+0xc8>
		if (len == sizeof(R.Freq)) {
     5ac:	64 30       	cpi	r22, 0x04	; 4
     5ae:	b1 f4       	brne	.+44     	; 0x5dc <L_X_686+0xe8>
			eeprom_write_block(data, &E.Freq, sizeof(E.Freq));
     5b0:	ce 01       	movw	r24, r28
     5b2:	65 e0       	ldi	r22, 0x05	; 5
     5b4:	70 e0       	ldi	r23, 0x00	; 0
     5b6:	44 e0       	ldi	r20, 0x04	; 4
     5b8:	50 e0       	ldi	r21, 0x00	; 0
     5ba:	0f c0       	rjmp	.+30     	; 0x5da <L_X_686+0xe6>
		}

#if  INCLUDE_SMOOTH
	SWITCH_CASE(CMD_SET_PPM)					// Write new smooth tune to eeprom and use it.
     5bc:	85 33       	cpi	r24, 0x35	; 53
     5be:	71 f4       	brne	.+28     	; 0x5dc <L_X_686+0xe8>
		if (len == sizeof(R.SmoothTunePPM)) {
     5c0:	62 30       	cpi	r22, 0x02	; 2
     5c2:	61 f4       	brne	.+24     	; 0x5dc <L_X_686+0xe8>
			R.SmoothTunePPM = *(uint16_t*)data;
     5c4:	88 81       	ld	r24, Y
     5c6:	99 81       	ldd	r25, Y+1	; 0x01
     5c8:	90 93 6a 00 	sts	0x006A, r25
     5cc:	80 93 69 00 	sts	0x0069, r24
			eeprom_write_block(data, &E.SmoothTunePPM, sizeof(E.SmoothTunePPM));
     5d0:	ce 01       	movw	r24, r28
     5d2:	69 e0       	ldi	r22, 0x09	; 9
     5d4:	70 e0       	ldi	r23, 0x00	; 0
     5d6:	42 e0       	ldi	r20, 0x02	; 2
     5d8:	50 e0       	ldi	r21, 0x00	; 0
     5da:	01 d6       	rcall	.+3074   	; 0x11de <__eewr_block_tn85>
#endif

	SWITCH_END

	return 1;
}
     5dc:	81 e0       	ldi	r24, 0x01	; 1
     5de:	df 91       	pop	r29
     5e0:	cf 91       	pop	r28
     5e2:	1f 91       	pop	r17
     5e4:	0f 91       	pop	r16
     5e6:	ff 90       	pop	r15
     5e8:	ef 90       	pop	r14
     5ea:	df 90       	pop	r13
     5ec:	cf 90       	pop	r12
     5ee:	08 95       	ret

000005f0 <calibrateOscillator>:
 * signal (a single SE0 bit) repeating every millisecond immediately after
 * a USB RESET. We first do a binary search for the OSCCAL value and then
 * optimize this value with a neighboorhod search.
 */
void    calibrateOscillator(void)
{
     5f0:	ef 92       	push	r14
     5f2:	ff 92       	push	r15
     5f4:	0f 93       	push	r16
     5f6:	1f 93       	push	r17
     5f8:	cf 93       	push	r28
     5fa:	df 93       	push	r29
     5fc:	80 e8       	ldi	r24, 0x80	; 128
     5fe:	f8 2e       	mov	r15, r24
     600:	00 e0       	ldi	r16, 0x00	; 0
     602:	c0 e0       	ldi	r28, 0x00	; 0
     604:	d0 e0       	ldi	r29, 0x00	; 0
uchar       trialValue = 0, optimumValue;
int         x, optimumDev, targetValue = (unsigned)(1499 * (double)F_CPU / 10.5e6 + 0.5);

    /* do a binary search: */
    do{
        OSCCAL = trialValue + step;
     606:	10 2f       	mov	r17, r16
     608:	1f 0d       	add	r17, r15
     60a:	11 bf       	out	0x31, r17	; 49
        x = usbMeasureFrameLength();    /* proportional to current real frequency */
     60c:	2d d4       	rcall	.+2138   	; 0xe68 <usbMeasureFrameLength>
     60e:	9c 01       	movw	r18, r24
        if(x < targetValue)             /* frequency still too low */
     610:	89 e0       	ldi	r24, 0x09	; 9
     612:	24 33       	cpi	r18, 0x34	; 52
     614:	38 07       	cpc	r19, r24
     616:	0c f0       	brlt	.+2      	; 0x61a <calibrateOscillator+0x2a>
     618:	10 2f       	mov	r17, r16
            trialValue += step;
        step >>= 1;
     61a:	f6 94       	lsr	r15
     61c:	21 96       	adiw	r28, 0x01	; 1
    }while(step > 0);
     61e:	c8 30       	cpi	r28, 0x08	; 8
     620:	d1 05       	cpc	r29, r1
     622:	11 f0       	breq	.+4      	; 0x628 <calibrateOscillator+0x38>
     624:	01 2f       	mov	r16, r17
     626:	ef cf       	rjmp	.-34     	; 0x606 <calibrateOscillator+0x16>
    /* We have a precision of +/- 1 for optimum OSCCAL here */
    /* now do a neighborhood search for optimum value */
    optimumValue = trialValue;
    optimumDev = x; /* this is certainly far away from optimum */
    for(OSCCAL = trialValue - 1; OSCCAL <= trialValue + 1; OSCCAL++){
     628:	11 50       	subi	r17, 0x01	; 1
     62a:	11 bf       	out	0x31, r17	; 49
     62c:	1f 5f       	subi	r17, 0xFF	; 255
     62e:	79 01       	movw	r14, r18
     630:	c1 2f       	mov	r28, r17
     632:	d0 e0       	ldi	r29, 0x00	; 0
     634:	21 96       	adiw	r28, 0x01	; 1
     636:	10 c0       	rjmp	.+32     	; 0x658 <calibrateOscillator+0x68>
        x = usbMeasureFrameLength() - targetValue;
     638:	17 d4       	rcall	.+2094   	; 0xe68 <usbMeasureFrameLength>
     63a:	84 53       	subi	r24, 0x34	; 52
     63c:	99 40       	sbci	r25, 0x09	; 9
     63e:	97 ff       	sbrs	r25, 7
     640:	03 c0       	rjmp	.+6      	; 0x648 <calibrateOscillator+0x58>
     642:	90 95       	com	r25
     644:	81 95       	neg	r24
     646:	9f 4f       	sbci	r25, 0xFF	; 255
        if(x < 0)
            x = -x;
        if(x < optimumDev){
     648:	8e 15       	cp	r24, r14
     64a:	9f 05       	cpc	r25, r15
     64c:	14 f4       	brge	.+4      	; 0x652 <calibrateOscillator+0x62>
            optimumDev = x;
            optimumValue = OSCCAL;
     64e:	11 b7       	in	r17, 0x31	; 49
     650:	7c 01       	movw	r14, r24
    }while(step > 0);
    /* We have a precision of +/- 1 for optimum OSCCAL here */
    /* now do a neighborhood search for optimum value */
    optimumValue = trialValue;
    optimumDev = x; /* this is certainly far away from optimum */
    for(OSCCAL = trialValue - 1; OSCCAL <= trialValue + 1; OSCCAL++){
     652:	81 b7       	in	r24, 0x31	; 49
     654:	8f 5f       	subi	r24, 0xFF	; 255
     656:	81 bf       	out	0x31, r24	; 49
     658:	81 b7       	in	r24, 0x31	; 49
     65a:	90 e0       	ldi	r25, 0x00	; 0
     65c:	c8 17       	cp	r28, r24
     65e:	d9 07       	cpc	r29, r25
     660:	5c f7       	brge	.-42     	; 0x638 <calibrateOscillator+0x48>
        if(x < optimumDev){
            optimumDev = x;
            optimumValue = OSCCAL;
        }
    }
    OSCCAL = optimumValue;
     662:	11 bf       	out	0x31, r17	; 49
}
     664:	df 91       	pop	r29
     666:	cf 91       	pop	r28
     668:	1f 91       	pop	r17
     66a:	0f 91       	pop	r16
     66c:	ff 90       	pop	r15
     66e:	ef 90       	pop	r14
     670:	08 95       	ret

00000672 <usbEventResetReady>:
both regions.
*/

void    usbEventResetReady(void)
{
    cli();  // usbMeasureFrameLength() counts CPU cycles, so disable interrupts.
     672:	f8 94       	cli
    calibrateOscillator();
     674:	bd df       	rcall	.-134    	; 0x5f0 <calibrateOscillator>
    sei();
     676:	78 94       	sei
    eeprom_write_byte(0, OSCCAL);   // store the calibrated value in EEPROM
     678:	61 b7       	in	r22, 0x31	; 49
     67a:	80 e0       	ldi	r24, 0x00	; 0
     67c:	90 e0       	ldi	r25, 0x00	; 0
     67e:	b8 d5       	rcall	.+2928   	; 0x11f0 <__eewr_byte_tn85>
}
     680:	08 95       	ret

00000682 <I2CStretch>:
}

//PE0FKO: The original code has no stop condition (hang on SCL low)
static void 
I2CStretch(void)						// Wait until clock hi
{										// Terminate the loop @ max 2.1ms
     682:	82 e3       	ldi	r24, 0x32	; 50
     684:	90 e0       	ldi	r25, 0x00	; 0
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     686:	3d e0       	ldi	r19, 0x0D	; 13
     688:	23 2f       	mov	r18, r19
     68a:	2a 95       	dec	r18
     68c:	f1 f7       	brne	.-4      	; 0x68a <I2CStretch+0x8>
	uint16_t i = 50;					// 2.1mS
	do {
		I2CDelay();						// Delay some time
		if (i-- == 0)
     68e:	01 97       	sbiw	r24, 0x01	; 1
     690:	2f ef       	ldi	r18, 0xFF	; 255
     692:	8f 3f       	cpi	r24, 0xFF	; 255
     694:	92 07       	cpc	r25, r18
     696:	19 f4       	brne	.+6      	; 0x69e <I2CStretch+0x1c>
		{
			I2CErrors = true;			// Error timeout
     698:	88 24       	eor	r8, r8
     69a:	83 94       	inc	r8
     69c:	08 95       	ret
			break;
		}
	}
	while(!(I2C_PIN & SCL));			// Clock line still low
     69e:	b3 9b       	sbis	0x16, 3	; 22
     6a0:	f3 cf       	rjmp	.-26     	; 0x688 <I2CStretch+0x6>
     6a2:	08 95       	ret

000006a4 <I2CSendStart>:
 *	SCL: ..  \__.. 
 */
void 
I2CSendStart(void)
{
	I2CErrors = false;					// reset error flag
     6a4:	88 24       	eor	r8, r8
	I2C_SCL_HI;
     6a6:	bb 98       	cbi	0x17, 3	; 23
	I2C_SDA_LO;  	I2CDelay(); 		// Start SDA to low
     6a8:	b9 9a       	sbi	0x17, 1	; 23
     6aa:	8d e0       	ldi	r24, 0x0D	; 13
     6ac:	98 2f       	mov	r25, r24
     6ae:	9a 95       	dec	r25
     6b0:	f1 f7       	brne	.-4      	; 0x6ae <I2CSendStart+0xa>
	I2C_SCL_LO;  	I2CDelay();			// and the clock low
     6b2:	bb 9a       	sbi	0x17, 3	; 23
     6b4:	8a 95       	dec	r24
     6b6:	f1 f7       	brne	.-4      	; 0x6b4 <I2CSendStart+0x10>
}
     6b8:	08 95       	ret

000006ba <I2CSendStop>:
 *	SCL: ../     .. 
 */
void 
I2CSendStop(void)
{
	I2C_SDA_LO;
     6ba:	b9 9a       	sbi	0x17, 1	; 23
	I2C_SCL_HI;		I2CDelay();
     6bc:	bb 98       	cbi	0x17, 3	; 23
     6be:	8d e0       	ldi	r24, 0x0D	; 13
     6c0:	98 2f       	mov	r25, r24
     6c2:	9a 95       	dec	r25
     6c4:	f1 f7       	brne	.-4      	; 0x6c2 <I2CSendStop+0x8>
	I2C_SDA_HI;		I2CDelay();
     6c6:	b9 98       	cbi	0x17, 1	; 23
     6c8:	8a 95       	dec	r24
     6ca:	f1 f7       	brne	.-4      	; 0x6c8 <I2CSendStop+0xe>
}
     6cc:	08 95       	ret

000006ce <I2CSend0>:

void 
I2CSend0(void)
{
	I2C_SDA_LO;							// Data low = 0
     6ce:	b9 9a       	sbi	0x17, 1	; 23
	I2C_SCL_HI;		I2CStretch();
     6d0:	bb 98       	cbi	0x17, 3	; 23
     6d2:	d7 df       	rcall	.-82     	; 0x682 <I2CStretch>
	I2C_SCL_LO;		I2CDelay();
     6d4:	bb 9a       	sbi	0x17, 3	; 23
     6d6:	8d e0       	ldi	r24, 0x0D	; 13
     6d8:	8a 95       	dec	r24
     6da:	f1 f7       	brne	.-4      	; 0x6d8 <I2CSend0+0xa>
}
     6dc:	08 95       	ret

000006de <I2CSend1>:

void 
I2CSend1(void)
{
	I2C_SDA_HI;							// Data high = 1
     6de:	b9 98       	cbi	0x17, 1	; 23
	I2C_SCL_HI;		I2CStretch();
     6e0:	bb 98       	cbi	0x17, 3	; 23
     6e2:	cf df       	rcall	.-98     	; 0x682 <I2CStretch>
	I2C_SCL_LO;		I2CDelay();
     6e4:	bb 9a       	sbi	0x17, 3	; 23
     6e6:	8d e0       	ldi	r24, 0x0D	; 13
     6e8:	8a 95       	dec	r24
     6ea:	f1 f7       	brne	.-4      	; 0x6e8 <I2CSend1+0xa>
}
     6ec:	08 95       	ret

000006ee <I2CGetBit>:

static uint8_t
I2CGetBit(void)
{
	uint8_t b;
	I2C_SDA_HI;							// Data high = input (opencollector)
     6ee:	b9 98       	cbi	0x17, 1	; 23
	I2C_SCL_HI;		I2CStretch();		// SDA Hi Z and wait
     6f0:	bb 98       	cbi	0x17, 3	; 23
     6f2:	c7 df       	rcall	.-114    	; 0x682 <I2CStretch>
	b = (I2C_PIN & SDA);				// get bit
     6f4:	86 b3       	in	r24, 0x16	; 22
	I2C_SCL_LO;							// clock low
     6f6:	bb 9a       	sbi	0x17, 3	; 23
	return b;
}
     6f8:	82 70       	andi	r24, 0x02	; 2
     6fa:	08 95       	ret

000006fc <I2CSendByte>:

void
I2CSendByte(uint8_t b)
{
     6fc:	ff 92       	push	r15
     6fe:	0f 93       	push	r16
     700:	1f 93       	push	r17
     702:	f8 2e       	mov	r15, r24
     704:	00 e0       	ldi	r16, 0x00	; 0
     706:	10 e8       	ldi	r17, 0x80	; 128
	uint8_t i,p;
	p = 0x80;
    for (i=0; i<8; i++)
	{
		if ((p & b) == 0) I2CSend0(); else I2CSend1();
     708:	81 2f       	mov	r24, r17
     70a:	8f 21       	and	r24, r15
     70c:	11 f4       	brne	.+4      	; 0x712 <I2CSendByte+0x16>
     70e:	df df       	rcall	.-66     	; 0x6ce <I2CSend0>
     710:	01 c0       	rjmp	.+2      	; 0x714 <I2CSendByte+0x18>
     712:	e5 df       	rcall	.-54     	; 0x6de <I2CSend1>
void
I2CSendByte(uint8_t b)
{
	uint8_t i,p;
	p = 0x80;
    for (i=0; i<8; i++)
     714:	0f 5f       	subi	r16, 0xFF	; 255
     716:	08 30       	cpi	r16, 0x08	; 8
     718:	11 f0       	breq	.+4      	; 0x71e <I2CSendByte+0x22>
	{
		if ((p & b) == 0) I2CSend0(); else I2CSend1();
    	p = p >> 1;
     71a:	16 95       	lsr	r17
     71c:	f5 cf       	rjmp	.-22     	; 0x708 <I2CSendByte+0xc>
	};
    I2CErrors |= I2CGetBit();	 		//Acknowledge
     71e:	18 2d       	mov	r17, r8
     720:	e6 df       	rcall	.-52     	; 0x6ee <I2CGetBit>
     722:	88 2e       	mov	r8, r24
     724:	81 2a       	or	r8, r17
  	return; 
}
     726:	1f 91       	pop	r17
     728:	0f 91       	pop	r16
     72a:	ff 90       	pop	r15
     72c:	08 95       	ret

0000072e <I2CReceiveByte>:

uint8_t
I2CReceiveByte(void)
{
     72e:	0f 93       	push	r16
     730:	1f 93       	push	r17
     732:	00 e0       	ldi	r16, 0x00	; 0
     734:	10 e0       	ldi	r17, 0x00	; 0
	uint8_t i;
	uint8_t b = 0;
    for (i=0; i<8; i++)
	{
		b = b << 1;
     736:	11 0f       	add	r17, r17
		if (I2CGetBit()) b |= 1;
     738:	da df       	rcall	.-76     	; 0x6ee <I2CGetBit>
     73a:	81 11       	cpse	r24, r1
     73c:	11 60       	ori	r17, 0x01	; 1
uint8_t
I2CReceiveByte(void)
{
	uint8_t i;
	uint8_t b = 0;
    for (i=0; i<8; i++)
     73e:	0f 5f       	subi	r16, 0xFF	; 255
     740:	08 30       	cpi	r16, 0x08	; 8
     742:	c9 f7       	brne	.-14     	; 0x736 <I2CReceiveByte+0x8>
	{
		b = b << 1;
		if (I2CGetBit()) b |= 1;
  	};
  	return b;
}
     744:	81 2f       	mov	r24, r17
     746:	1f 91       	pop	r17
     748:	0f 91       	pop	r16
     74a:	08 95       	ret

0000074c <Si570CalcRFREQ>:
// Cost: 140us
// frequency [MHz] * 2^21
static 
uint8_t
Si570CalcRFREQ(uint32_t freq)
{
     74c:	ff 92       	push	r15
     74e:	0f 93       	push	r16
     750:	1f 93       	push	r17
	uint8_t		RFREQ_b4;
	uint32_t	RR;						// Division remainder
	uint8_t		sN1;

	// Convert divider ratio to SI570 register value
	sN1 = Si570_N1 - 1;
     752:	04 2d       	mov	r16, r4
     754:	01 50       	subi	r16, 0x01	; 1
	Si570_Data.N1      = sN1 >> 2;
     756:	30 2f       	mov	r19, r16
     758:	36 95       	lsr	r19
     75a:	36 95       	lsr	r19
	Si570_Data.HS_DIV  = Si570_HS_DIV - 4;
     75c:	25 2d       	mov	r18, r5
     75e:	24 50       	subi	r18, 0x04	; 4
     760:	22 95       	swap	r18
     762:	22 0f       	add	r18, r18
     764:	20 7e       	andi	r18, 0xE0	; 224
     766:	3f 71       	andi	r19, 0x1F	; 31
     768:	32 2b       	or	r19, r18
     76a:	30 93 b5 00 	sts	0x00B5, r19
	// Multiplier_32  :                  b3      b2      b1      b0
	// Product_48     :  r0      b4      b3      b2      b1      b0
	//                  <--- high ----><---------- low ------------->

	cnt = 32+1;                      // Init loop counter
	asm (
     76e:	21 e2       	ldi	r18, 0x21	; 33
     770:	00 24       	eor	r0, r0
     772:	ff 18       	sub	r15, r15

00000774 <L_A_27>:
     774:	10 f4       	brcc	.+4      	; 0x77a <L_B_27>
     776:	f2 0c       	add	r15, r2
     778:	03 1c       	adc	r0, r3

0000077a <L_B_27>:
     77a:	07 94       	ror	r0
     77c:	f7 94       	ror	r15
     77e:	97 95       	ror	r25
     780:	87 95       	ror	r24
     782:	77 95       	ror	r23
     784:	67 95       	ror	r22
     786:	2a 95       	dec	r18
     788:	a9 f7       	brne	.-22     	; 0x774 <L_A_27>
     78a:	a6 2f       	mov	r26, r22
     78c:	e7 2f       	mov	r30, r23
     78e:	f8 2f       	mov	r31, r24
     790:	19 2f       	mov	r17, r25
	// Check if DCO is lower than the Si570 max specied.
	// The low 3 bit's are not used, so the error is 8MHz
	// DCO = Freq * sN (calculated above)
	// RFREQ is [19.21]bits
	sint16_t DCO;
	DCO.b0 = RFREQ.w1.b1;
     792:	29 2f       	mov	r18, r25
	DCO.b1 = RFREQ_b4;
     794:	3f 2d       	mov	r19, r15
#if INCLUDE_SI570_GRADE
	if (DCO.w > ((R.Si570DCOMax+4)/8))
     796:	80 91 9a 00 	lds	r24, 0x009A
     79a:	90 91 9b 00 	lds	r25, 0x009B
     79e:	04 96       	adiw	r24, 0x04	; 4
     7a0:	43 e0       	ldi	r20, 0x03	; 3
     7a2:	96 95       	lsr	r25
     7a4:	87 95       	ror	r24
     7a6:	4a 95       	dec	r20
     7a8:	e1 f7       	brne	.-8      	; 0x7a2 <L_B_27+0x28>
     7aa:	82 17       	cp	r24, r18
     7ac:	93 07       	cpc	r25, r19
     7ae:	10 f4       	brcc	.+4      	; 0x7b4 <L_B_27+0x3a>
     7b0:	80 e0       	ldi	r24, 0x00	; 0
     7b2:	3b c0       	rjmp	.+118    	; 0x82a <L_X_59+0x20>
	//---------------------------------------------------------------------------

	RR = 0;							// Clear Remainder_40
	cnt = 40+1+28+3;				// Init Loop_Counter
									// (28 = 12.28 bits, 3 = * 8)
	asm (
     7b4:	40 91 61 00 	lds	r20, 0x0061
     7b8:	50 91 62 00 	lds	r21, 0x0062
     7bc:	60 91 63 00 	lds	r22, 0x0063
     7c0:	70 91 64 00 	lds	r23, 0x0064
     7c4:	3a 2f       	mov	r19, r26
     7c6:	80 e0       	ldi	r24, 0x00	; 0
     7c8:	90 e0       	ldi	r25, 0x00	; 0
     7ca:	a0 e0       	ldi	r26, 0x00	; 0
     7cc:	b0 e0       	ldi	r27, 0x00	; 0
     7ce:	28 e4       	ldi	r18, 0x48	; 72
     7d0:	88 94       	clc

000007d2 <L_A_59>:
     7d2:	33 1f       	adc	r19, r19
     7d4:	ee 1f       	adc	r30, r30
     7d6:	ff 1f       	adc	r31, r31
     7d8:	11 1f       	adc	r17, r17
     7da:	ff 1c       	adc	r15, r15
     7dc:	88 1f       	adc	r24, r24
     7de:	99 1f       	adc	r25, r25
     7e0:	aa 1f       	adc	r26, r26
     7e2:	bb 1f       	adc	r27, r27
     7e4:	84 1b       	sub	r24, r20
     7e6:	95 0b       	sbc	r25, r21
     7e8:	a6 0b       	sbc	r26, r22
     7ea:	b7 0b       	sbc	r27, r23
     7ec:	30 f4       	brcc	.+12     	; 0x7fa <L_B_59>
     7ee:	84 0f       	add	r24, r20
     7f0:	95 1f       	adc	r25, r21
     7f2:	a6 1f       	adc	r26, r22
     7f4:	b7 1f       	adc	r27, r23
     7f6:	88 94       	clc
     7f8:	01 c0       	rjmp	.+2      	; 0x7fc <L_C_59>

000007fa <L_B_59>:
     7fa:	08 94       	sec

000007fc <L_C_59>:
     7fc:	2a 95       	dec	r18
     7fe:	49 f7       	brne	.-46     	; 0x7d2 <L_A_59>
     800:	31 1d       	adc	r19, r1
     802:	e1 1d       	adc	r30, r1
     804:	f1 1d       	adc	r31, r1
     806:	11 1d       	adc	r17, r1
     808:	f1 1c       	adc	r15, r1

0000080a <L_X_59>:
     80a:	30 93 ba 00 	sts	0x00BA, r19
     80e:	e0 93 b9 00 	sts	0x00B9, r30
     812:	f0 93 b8 00 	sts	0x00B8, r31
     816:	10 93 b7 00 	sts	0x00B7, r17
	// Si570_Data.RFREQ_b4 will be sent to register_8 in the Si570
	// register_8 :  76543210
	//               ||^^^^^^------< RFREQ[37:32]
	//               ^^------------< N1[1:0]
	Si570_Data.RFREQ_b4  = RFREQ_b4;
	Si570_Data.RFREQ_b4 |= (sN1 & 0x03) << 6;
     81a:	02 95       	swap	r16
     81c:	00 0f       	add	r16, r16
     81e:	00 0f       	add	r16, r16
     820:	00 7c       	andi	r16, 0xC0	; 192
     822:	0f 29       	or	r16, r15
     824:	00 93 b6 00 	sts	0x00B6, r16
     828:	81 e0       	ldi	r24, 0x01	; 1

	return 1;
}
     82a:	1f 91       	pop	r17
     82c:	0f 91       	pop	r16
     82e:	ff 90       	pop	r15
     830:	08 95       	ret

00000832 <SetFilter>:
	return MAX_BAND-1;
}

void
SetFilter(uint8_t filter)
{
     832:	98 2f       	mov	r25, r24
	if (FilterCrossOverOn)
     834:	80 91 71 00 	lds	r24, 0x0071
     838:	88 23       	and	r24, r24
     83a:	69 f0       	breq	.+26     	; 0x856 <SetFilter+0x24>
	{
		bit_1(IO_DDR, IO_P1);
     83c:	bc 9a       	sbi	0x17, 4	; 23
		bit_1(IO_DDR, IO_P2);
     83e:	bd 9a       	sbi	0x17, 5	; 23

		if (filter & 0x01)
     840:	89 2f       	mov	r24, r25
     842:	90 ff       	sbrs	r25, 0
     844:	02 c0       	rjmp	.+4      	; 0x84a <SetFilter+0x18>
			bit_1(IO_PORT, IO_P1);
     846:	c4 9a       	sbi	0x18, 4	; 24
     848:	01 c0       	rjmp	.+2      	; 0x84c <SetFilter+0x1a>
		else
			bit_0(IO_PORT, IO_P1);
     84a:	c4 98       	cbi	0x18, 4	; 24

		if (filter & 0x02)
     84c:	81 ff       	sbrs	r24, 1
     84e:	02 c0       	rjmp	.+4      	; 0x854 <SetFilter+0x22>
			bit_1(IO_PORT, IO_P2);
     850:	c5 9a       	sbi	0x18, 5	; 24
     852:	08 95       	ret
		else
			bit_0(IO_PORT, IO_P2);
     854:	c5 98       	cbi	0x18, 5	; 24
     856:	08 95       	ret

00000858 <Si570CmdStart>:
	}
}

static uint8_t
Si570CmdStart(uint8_t cmd)
{
     858:	1f 93       	push	r17
     85a:	18 2f       	mov	r17, r24
	I2CSendStart();
     85c:	23 df       	rcall	.-442    	; 0x6a4 <I2CSendStart>
	I2CSendByte((R.ChipCrtlData<<1)|0);	// send device address 
     85e:	80 91 9d 00 	lds	r24, 0x009D
     862:	88 0f       	add	r24, r24
     864:	4b df       	rcall	.-362    	; 0x6fc <I2CSendByte>
	if (I2CErrors == 0)
     866:	88 20       	and	r8, r8
     868:	11 f0       	breq	.+4      	; 0x86e <Si570CmdStart+0x16>
     86a:	80 e0       	ldi	r24, 0x00	; 0
     86c:	03 c0       	rjmp	.+6      	; 0x874 <Si570CmdStart+0x1c>
	{
		I2CSendByte(cmd);				// send Byte Command
     86e:	81 2f       	mov	r24, r17
     870:	45 df       	rcall	.-374    	; 0x6fc <I2CSendByte>
     872:	81 e0       	ldi	r24, 0x01	; 1
		return true;
	}
	return false;
}
     874:	1f 91       	pop	r17
     876:	08 95       	ret

00000878 <GetRegFromSi570>:
}

// read all registers in one block to replyBuf[]
uint8_t
GetRegFromSi570(void)
{
     878:	cf 93       	push	r28
     87a:	df 93       	push	r29
	if (Si570CmdStart(7))				// send Byte address 7
     87c:	87 e0       	ldi	r24, 0x07	; 7
     87e:	ec df       	rcall	.-40     	; 0x858 <Si570CmdStart>
     880:	88 23       	and	r24, r24
     882:	a1 f0       	breq	.+40     	; 0x8ac <GetRegFromSi570+0x34>
	{
		uint8_t i;
		I2CSendStart();	
     884:	0f df       	rcall	.-482    	; 0x6a4 <I2CSendStart>
		I2CSendByte((R.ChipCrtlData<<1)|1);
     886:	80 91 9d 00 	lds	r24, 0x009D
     88a:	88 0f       	add	r24, r24
     88c:	81 60       	ori	r24, 0x01	; 1
     88e:	36 df       	rcall	.-404    	; 0x6fc <I2CSendByte>
     890:	cb eb       	ldi	r28, 0xBB	; 187
     892:	d0 e0       	ldi	r29, 0x00	; 0
		for (i=0; i<5; i++)
		{
			((uint8_t*)replyBuf)[i] = I2CReceiveByte();
     894:	4c df       	rcall	.-360    	; 0x72e <I2CReceiveByte>
     896:	89 93       	st	Y+, r24
			I2CSend0();					// 0 more bytes to follow
     898:	1a df       	rcall	.-460    	; 0x6ce <I2CSend0>
	if (Si570CmdStart(7))				// send Byte address 7
	{
		uint8_t i;
		I2CSendStart();	
		I2CSendByte((R.ChipCrtlData<<1)|1);
		for (i=0; i<5; i++)
     89a:	80 e0       	ldi	r24, 0x00	; 0
     89c:	c0 3c       	cpi	r28, 0xC0	; 192
     89e:	d8 07       	cpc	r29, r24
     8a0:	c9 f7       	brne	.-14     	; 0x894 <GetRegFromSi570+0x1c>
		{
			((uint8_t*)replyBuf)[i] = I2CReceiveByte();
			I2CSend0();					// 0 more bytes to follow
		}
		((uint8_t*)replyBuf)[5] = I2CReceiveByte();
     8a2:	45 df       	rcall	.-374    	; 0x72e <I2CReceiveByte>
     8a4:	eb eb       	ldi	r30, 0xBB	; 187
     8a6:	f0 e0       	ldi	r31, 0x00	; 0
     8a8:	85 83       	std	Z+5, r24	; 0x05
		I2CSend1();						// 1 Last byte
     8aa:	19 df       	rcall	.-462    	; 0x6de <I2CSend1>
	}
	I2CSendStop(); 
     8ac:	06 df       	rcall	.-500    	; 0x6ba <I2CSendStop>

	return I2CErrors ? 0 : sizeof(Si570_t);
     8ae:	88 20       	and	r8, r8
     8b0:	11 f4       	brne	.+4      	; 0x8b6 <GetRegFromSi570+0x3e>
     8b2:	86 e0       	ldi	r24, 0x06	; 6
     8b4:	01 c0       	rjmp	.+2      	; 0x8b8 <GetRegFromSi570+0x40>
     8b6:	80 e0       	ldi	r24, 0x00	; 0
}
     8b8:	df 91       	pop	r29
     8ba:	cf 91       	pop	r28
     8bc:	08 95       	ret

000008be <Si570CmdReg>:
	return false;
}

void
Si570CmdReg(uint8_t reg, uint8_t data)
{
     8be:	1f 93       	push	r17
     8c0:	16 2f       	mov	r17, r22
	if (Si570CmdStart(reg))
     8c2:	ca df       	rcall	.-108    	; 0x858 <Si570CmdStart>
     8c4:	88 23       	and	r24, r24
     8c6:	11 f0       	breq	.+4      	; 0x8cc <Si570CmdReg+0xe>
	{
		I2CSendByte(data);
     8c8:	81 2f       	mov	r24, r17
     8ca:	18 df       	rcall	.-464    	; 0x6fc <I2CSendByte>
	}
	I2CSendStop();
     8cc:	f6 de       	rcall	.-532    	; 0x6ba <I2CSendStop>
}
     8ce:	1f 91       	pop	r17
     8d0:	08 95       	ret

000008d2 <Si570Write>:

// write all registers in one block.
static void
Si570Write(void)
{
	if (Si570CmdStart(7))				// send Byte address 7
     8d2:	87 e0       	ldi	r24, 0x07	; 7
     8d4:	c1 df       	rcall	.-126    	; 0x858 <Si570CmdStart>
     8d6:	88 23       	and	r24, r24
     8d8:	91 f0       	breq	.+36     	; 0x8fe <Si570Write+0x2c>
	{
		uint8_t i;
		for (i=0;i<6;i++)				// all 6 registers
			I2CSendByte(Si570_Data.bData[i]);// send data 
     8da:	80 91 b5 00 	lds	r24, 0x00B5
     8de:	0e df       	rcall	.-484    	; 0x6fc <I2CSendByte>
     8e0:	80 91 b6 00 	lds	r24, 0x00B6
     8e4:	0b df       	rcall	.-490    	; 0x6fc <I2CSendByte>
     8e6:	80 91 b7 00 	lds	r24, 0x00B7
     8ea:	08 df       	rcall	.-496    	; 0x6fc <I2CSendByte>
     8ec:	80 91 b8 00 	lds	r24, 0x00B8
     8f0:	05 df       	rcall	.-502    	; 0x6fc <I2CSendByte>
     8f2:	80 91 b9 00 	lds	r24, 0x00B9
     8f6:	02 df       	rcall	.-508    	; 0x6fc <I2CSendByte>
     8f8:	80 91 ba 00 	lds	r24, 0x00BA
     8fc:	ff de       	rcall	.-514    	; 0x6fc <I2CSendByte>
	}
	I2CSendStop();
     8fe:	dd de       	rcall	.-582    	; 0x6ba <I2CSendStop>
}
     900:	08 95       	ret

00000902 <SetFreq>:

#endif

void
SetFreq(uint32_t freq)		// frequency [MHz] * 2^21
{
     902:	af 92       	push	r10
     904:	bf 92       	push	r11
     906:	cf 92       	push	r12
     908:	df 92       	push	r13
     90a:	ef 92       	push	r14
     90c:	ff 92       	push	r15
     90e:	0f 93       	push	r16
     910:	1f 93       	push	r17
     912:	df 93       	push	r29
     914:	cf 93       	push	r28
     916:	cd b7       	in	r28, 0x3d	; 61
     918:	de b7       	in	r29, 0x3e	; 62
     91a:	28 97       	sbiw	r28, 0x08	; 8
     91c:	0f b6       	in	r0, 0x3f	; 63
     91e:	f8 94       	cli
     920:	de bf       	out	0x3e, r29	; 62
     922:	0f be       	out	0x3f, r0	; 63
     924:	cd bf       	out	0x3d, r28	; 61
     926:	5b 01       	movw	r10, r22
     928:	6c 01       	movw	r12, r24
	R.Freq = freq;			// Save the asked freq
     92a:	60 93 65 00 	sts	0x0065, r22
     92e:	70 93 66 00 	sts	0x0066, r23
     932:	80 93 67 00 	sts	0x0067, r24
     936:	90 93 68 00 	sts	0x0068, r25
	sint32_t Freq;

	Freq.dw = freq;

	for(n=0; n < MAX_BAND-1; ++n)
		if (Freq.w1.w < R.FilterCrossOver[n].w)
     93a:	80 91 6b 00 	lds	r24, 0x006B
     93e:	90 91 6c 00 	lds	r25, 0x006C
     942:	c8 16       	cp	r12, r24
     944:	d9 06       	cpc	r13, r25
     946:	10 f4       	brcc	.+4      	; 0x94c <SetFreq+0x4a>
     948:	a0 e0       	ldi	r26, 0x00	; 0
     94a:	13 c0       	rjmp	.+38     	; 0x972 <SetFreq+0x70>
     94c:	80 91 6d 00 	lds	r24, 0x006D
     950:	90 91 6e 00 	lds	r25, 0x006E
     954:	c8 16       	cp	r12, r24
     956:	d9 06       	cpc	r13, r25
     958:	10 f4       	brcc	.+4      	; 0x95e <SetFreq+0x5c>
     95a:	a1 e0       	ldi	r26, 0x01	; 1
     95c:	0a c0       	rjmp	.+20     	; 0x972 <SetFreq+0x70>
     95e:	80 91 6f 00 	lds	r24, 0x006F
     962:	90 91 70 00 	lds	r25, 0x0070
     966:	c8 16       	cp	r12, r24
     968:	d9 06       	cpc	r13, r25
     96a:	10 f0       	brcs	.+4      	; 0x970 <SetFreq+0x6e>
     96c:	a3 e0       	ldi	r26, 0x03	; 3
     96e:	01 c0       	rjmp	.+2      	; 0x972 <SetFreq+0x70>
     970:	a2 e0       	ldi	r26, 0x02	; 2

#if INCLUDE_IBPF

	uint8_t band = GetFreqBand(freq);

	freq = CalcFreqMulAdd(freq, R.BandSub[band], R.BandMul[band]);
     972:	b0 e0       	ldi	r27, 0x00	; 0
{
	uint32_t	oFreq = 0;
	uint8_t		cnt = 32+1;

	// Multiply 64bits = 32bits * 32bits
	asm volatile (
     974:	fd 01       	movw	r30, r26
     976:	ee 0f       	add	r30, r30
     978:	ff 1f       	adc	r31, r31
     97a:	ee 0f       	add	r30, r30
     97c:	ff 1f       	adc	r31, r31
     97e:	e0 5a       	subi	r30, 0xA0	; 160
     980:	ff 4f       	sbci	r31, 0xFF	; 255
     982:	e7 88       	ldd	r14, Z+23	; 0x17
     984:	f0 8c       	ldd	r15, Z+24	; 0x18
     986:	01 8d       	ldd	r16, Z+25	; 0x19
     988:	12 8d       	ldd	r17, Z+26	; 0x1a
     98a:	27 a1       	ldd	r18, Z+39	; 0x27
     98c:	30 a5       	ldd	r19, Z+40	; 0x28
     98e:	41 a5       	ldd	r20, Z+41	; 0x29
     990:	52 a5       	ldd	r21, Z+42	; 0x2a
     992:	2d 83       	std	Y+5, r18	; 0x05
     994:	3e 83       	std	Y+6, r19	; 0x06
     996:	4f 83       	std	Y+7, r20	; 0x07
     998:	58 87       	std	Y+8, r21	; 0x08
     99a:	e1 e2       	ldi	r30, 0x21	; 33
     99c:	60 e0       	ldi	r22, 0x00	; 0
     99e:	70 e0       	ldi	r23, 0x00	; 0
     9a0:	80 e0       	ldi	r24, 0x00	; 0
     9a2:	90 e0       	ldi	r25, 0x00	; 0
     9a4:	ae 18       	sub	r10, r14
     9a6:	bf 08       	sbc	r11, r15
     9a8:	c0 0a       	sbc	r12, r16
     9aa:	d1 0a       	sbc	r13, r17

000009ac <L_X_365>:
     9ac:	88 94       	clc

000009ae <L_A_365>:
     9ae:	20 f4       	brcc	.+8      	; 0x9b8 <L_B_365>
     9b0:	62 0f       	add	r22, r18
     9b2:	73 1f       	adc	r23, r19
     9b4:	84 1f       	adc	r24, r20
     9b6:	95 1f       	adc	r25, r21

000009b8 <L_B_365>:
     9b8:	97 95       	ror	r25
     9ba:	87 95       	ror	r24
     9bc:	77 95       	ror	r23
     9be:	67 95       	ror	r22
     9c0:	d7 94       	ror	r13
     9c2:	c7 94       	ror	r12
     9c4:	b7 94       	ror	r11
     9c6:	a7 94       	ror	r10
     9c8:	ea 95       	dec	r30
     9ca:	89 f7       	brne	.-30     	; 0x9ae <L_A_365>
     9cc:	eb e0       	ldi	r30, 0x0B	; 11

000009ce <L_C_365>:
     9ce:	cc 0c       	add	r12, r12
     9d0:	dd 1c       	adc	r13, r13
     9d2:	66 1f       	adc	r22, r22
     9d4:	77 1f       	adc	r23, r23
     9d6:	88 1f       	adc	r24, r24
     9d8:	99 1f       	adc	r25, r25
     9da:	ea 95       	dec	r30
     9dc:	c1 f7       	brne	.-16     	; 0x9ce <L_C_365>
     9de:	69 83       	std	Y+1, r22	; 0x01
     9e0:	7a 83       	std	Y+2, r23	; 0x02
     9e2:	8b 83       	std	Y+3, r24	; 0x03
     9e4:	9c 83       	std	Y+4, r25	; 0x04

	SetFilter(R.Band2Filter[band]);
     9e6:	a0 5a       	subi	r26, 0xA0	; 160
     9e8:	bf 4f       	sbci	r27, 0xFF	; 255
     9ea:	53 96       	adiw	r26, 0x13	; 19
     9ec:	8c 91       	ld	r24, X
     9ee:	21 df       	rcall	.-446    	; 0x832 <SetFilter>

#endif

#if INCLUDE_SMOOTH

	if ((R.SmoothTunePPM != 0) && Si570_Small_Change(freq))
     9f0:	60 91 69 00 	lds	r22, 0x0069
     9f4:	70 91 6a 00 	lds	r23, 0x006A
     9f8:	61 15       	cp	r22, r1
     9fa:	71 05       	cpc	r23, r1
     9fc:	c1 f1       	breq	.+112    	; 0xa6e <L_C_365+0xa0>
{
	uint32_t delta_F, delta_F_MAX;
	sint32_t previous_Frequency;

	// Get previous_Frequency   -> [11.21]
	previous_Frequency.dw = FreqSmoothTune;
     9fe:	a0 90 c3 00 	lds	r10, 0x00C3
     a02:	b0 90 c4 00 	lds	r11, 0x00C4
     a06:	c0 90 c5 00 	lds	r12, 0x00C5
     a0a:	d0 90 c6 00 	lds	r13, 0x00C6

	// Delta_F (MHz) = |current_Frequency - previous_Frequency|  -> [11.21]
	delta_F = current_Frequency - previous_Frequency.dw;
     a0e:	29 81       	ldd	r18, Y+1	; 0x01
     a10:	3a 81       	ldd	r19, Y+2	; 0x02
     a12:	4b 81       	ldd	r20, Y+3	; 0x03
     a14:	5c 81       	ldd	r21, Y+4	; 0x04
     a16:	2a 19       	sub	r18, r10
     a18:	3b 09       	sbc	r19, r11
     a1a:	4c 09       	sbc	r20, r12
     a1c:	5d 09       	sbc	r21, r13
	if (delta_F >= _2(31)) delta_F = 0 - delta_F;
     a1e:	57 ff       	sbrs	r21, 7
     a20:	07 c0       	rjmp	.+14     	; 0xa30 <L_C_365+0x62>
     a22:	50 95       	com	r21
     a24:	40 95       	com	r20
     a26:	30 95       	com	r19
     a28:	21 95       	neg	r18
     a2a:	3f 4f       	sbci	r19, 0xFF	; 255
     a2c:	4f 4f       	sbci	r20, 0xFF	; 255
     a2e:	5f 4f       	sbci	r21, 0xFF	; 255

#endif

#if INCLUDE_SMOOTH

	if ((R.SmoothTunePPM != 0) && Si570_Small_Change(freq))
     a30:	79 01       	movw	r14, r18
     a32:	8a 01       	movw	r16, r20
     a34:	a4 e0       	ldi	r26, 0x04	; 4
     a36:	ee 0c       	add	r14, r14
     a38:	ff 1c       	adc	r15, r15
     a3a:	00 1f       	adc	r16, r16
     a3c:	11 1f       	adc	r17, r17
     a3e:	aa 95       	dec	r26
     a40:	d1 f7       	brne	.-12     	; 0xa36 <L_C_365+0x68>
     a42:	e2 1a       	sub	r14, r18
     a44:	f3 0a       	sbc	r15, r19
     a46:	04 0b       	sbc	r16, r20
     a48:	15 0b       	sbc	r17, r21
     a4a:	80 e0       	ldi	r24, 0x00	; 0
     a4c:	90 e0       	ldi	r25, 0x00	; 0
     a4e:	96 01       	movw	r18, r12
     a50:	40 e0       	ldi	r20, 0x00	; 0
     a52:	50 e0       	ldi	r21, 0x00	; 0
     a54:	7f d3       	rcall	.+1790   	; 0x1154 <__mulsi3>
     a56:	6e 15       	cp	r22, r14
     a58:	7f 05       	cpc	r23, r15
     a5a:	80 07       	cpc	r24, r16
     a5c:	91 07       	cpc	r25, r17
     a5e:	38 f0       	brcs	.+14     	; 0xa6e <L_C_365+0xa0>
	{
		Si570CalcRFREQ(freq);
     a60:	69 81       	ldd	r22, Y+1	; 0x01
     a62:	7a 81       	ldd	r23, Y+2	; 0x02
     a64:	8b 81       	ldd	r24, Y+3	; 0x03
     a66:	9c 81       	ldd	r25, Y+4	; 0x04
     a68:	71 de       	rcall	.-798    	; 0x74c <Si570CalcRFREQ>
		Si570Write();
     a6a:	33 df       	rcall	.-410    	; 0x8d2 <Si570Write>
     a6c:	90 c0       	rjmp	.+288    	; 0xb8e <L_C_365+0x1c0>

	// Find the total division needed.
	// It is always one to low (not in the case reminder is zero, reminder not used here).
	// 16.0 bits = 13.3 bits / ( 11.5 bits >> 2)
#if INCLUDE_SI570_GRADE
	N0 = (R.Si570DCOMin * (uint16_t)(_2(3))) / (Freq.w1.w >> 2);
     a6e:	80 91 98 00 	lds	r24, 0x0098
     a72:	90 91 99 00 	lds	r25, 0x0099
     a76:	6b 81       	ldd	r22, Y+3	; 0x03
     a78:	7c 81       	ldd	r23, Y+4	; 0x04
     a7a:	76 95       	lsr	r23
     a7c:	67 95       	ror	r22
     a7e:	76 95       	lsr	r23
     a80:	67 95       	ror	r22
     a82:	e3 e0       	ldi	r30, 0x03	; 3
     a84:	88 0f       	add	r24, r24
     a86:	99 1f       	adc	r25, r25
     a88:	ea 95       	dec	r30
     a8a:	e1 f7       	brne	.-8      	; 0xa84 <L_C_365+0xb6>
     a8c:	7c d3       	rcall	.+1784   	; 0x1186 <__udivmodhi4>
     a8e:	6b 01       	movw	r12, r22
		// Skip the unavailable N1 divider's
		if (xN1.b0 != 1 && (xN1.b0 & 1) == 1)
			xN1.b0 += 1;

#if INCLUDE_SI570_GRADE
		if (R.Si570Grade == CHIP_SI570_A)
     a90:	10 91 9c 00 	lds	r17, 0x009C
     a94:	50 e8       	ldi	r21, 0x80	; 128
     a96:	a5 2e       	mov	r10, r21
     a98:	55 e0       	ldi	r21, 0x05	; 5
     a9a:	b5 2e       	mov	r11, r21
     a9c:	ee 24       	eor	r14, r14
     a9e:	00 e0       	ldi	r16, 0x00	; 0
     aa0:	47 e0       	ldi	r20, 0x07	; 7
     aa2:	eb e0       	ldi	r30, 0x0B	; 11
     aa4:	f0 e0       	ldi	r31, 0x00	; 0
     aa6:	2e 2f       	mov	r18, r30
#endif

	for(xHS_DIV = 11; xHS_DIV > 3; --xHS_DIV)
	{
		// Skip the unavailable divider's
		if (xHS_DIV == 8 || xHS_DIV == 10)
     aa8:	e8 30       	cpi	r30, 0x08	; 8
     aaa:	09 f4       	brne	.+2      	; 0xaae <L_C_365+0xe0>
     aac:	41 c0       	rjmp	.+130    	; 0xb30 <L_C_365+0x162>
     aae:	ea 30       	cpi	r30, 0x0A	; 10
     ab0:	09 f4       	brne	.+2      	; 0xab4 <L_C_365+0xe6>
     ab2:	3e c0       	rjmp	.+124    	; 0xb30 <L_C_365+0x162>
			continue;

		// Calculate the needed low speed divider
		xN1.w = N0 / xHS_DIV + 1;
     ab4:	c6 01       	movw	r24, r12
     ab6:	bf 01       	movw	r22, r30
     ab8:	66 d3       	rcall	.+1740   	; 0x1186 <__udivmodhi4>
     aba:	6f 5f       	subi	r22, 0xFF	; 255
     abc:	7f 4f       	sbci	r23, 0xFF	; 255
     abe:	86 2f       	mov	r24, r22

		if (xN1.w > 128)
     ac0:	61 38       	cpi	r22, 0x81	; 129
     ac2:	71 05       	cpc	r23, r1
     ac4:	a8 f5       	brcc	.+106    	; 0xb30 <L_C_365+0x162>
			continue;

		// Skip the unavailable N1 divider's
		if (xN1.b0 != 1 && (xN1.b0 & 1) == 1)
     ac6:	61 30       	cpi	r22, 0x01	; 1
     ac8:	11 f0       	breq	.+4      	; 0xace <L_C_365+0x100>
     aca:	60 fd       	sbrc	r22, 0
			xN1.b0 += 1;
     acc:	8f 5f       	subi	r24, 0xFF	; 255

#if INCLUDE_SI570_GRADE
		if (R.Si570Grade == CHIP_SI570_A)
     ace:	11 30       	cpi	r17, 0x01	; 1
     ad0:	39 f1       	breq	.+78     	; 0xb20 <L_C_365+0x152>
		{
			// No divider restrictions!
		}
		else
		if (R.Si570Grade == CHIP_SI570_B)
     ad2:	12 30       	cpi	r17, 0x02	; 2
     ad4:	29 f4       	brne	.+10     	; 0xae0 <L_C_365+0x112>
		{
			if ((xN1.b0 == 1 && xHS_DIV == 4)
     ad6:	81 30       	cpi	r24, 0x01	; 1
     ad8:	19 f5       	brne	.+70     	; 0xb20 <L_C_365+0x152>
     ada:	42 30       	cpi	r20, 0x02	; 2
     adc:	08 f5       	brcc	.+66     	; 0xb20 <L_C_365+0x152>
     ade:	28 c0       	rjmp	.+80     	; 0xb30 <L_C_365+0x162>
			{
				continue;
			}
		}
		else
		if (R.Si570Grade == CHIP_SI570_C)
     ae0:	13 30       	cpi	r17, 0x03	; 3
     ae2:	49 f4       	brne	.+18     	; 0xaf6 <L_C_365+0x128>
		{
			if ((xN1.b0 == 1 && xHS_DIV == 4)
     ae4:	81 30       	cpi	r24, 0x01	; 1
     ae6:	59 f0       	breq	.+22     	; 0xafe <L_C_365+0x130>
     ae8:	82 30       	cpi	r24, 0x02	; 2
     aea:	81 f0       	breq	.+32     	; 0xb0c <L_C_365+0x13e>
     aec:	84 30       	cpi	r24, 0x04	; 4
     aee:	c1 f4       	brne	.+48     	; 0xb20 <L_C_365+0x152>
     af0:	24 30       	cpi	r18, 0x04	; 4
     af2:	b1 f4       	brne	.+44     	; 0xb20 <L_C_365+0x152>
     af4:	1d c0       	rjmp	.+58     	; 0xb30 <L_C_365+0x162>
			{
				continue;
			}
		} 
		else
		if (R.Si570Grade == CHIP_SI570_D)
     af6:	14 30       	cpi	r17, 0x04	; 4
     af8:	99 f4       	brne	.+38     	; 0xb20 <L_C_365+0x152>
		{
			if ((xN1.b0 == 1 && xHS_DIV == 4)
     afa:	81 30       	cpi	r24, 0x01	; 1
     afc:	29 f4       	brne	.+10     	; 0xb08 <L_C_365+0x13a>
     afe:	44 30       	cpi	r20, 0x04	; 4
     b00:	b8 f0       	brcs	.+46     	; 0xb30 <L_C_365+0x162>
     b02:	2b 30       	cpi	r18, 0x0B	; 11
     b04:	69 f4       	brne	.+26     	; 0xb20 <L_C_365+0x152>
     b06:	14 c0       	rjmp	.+40     	; 0xb30 <L_C_365+0x162>
     b08:	82 30       	cpi	r24, 0x02	; 2
     b0a:	51 f4       	brne	.+20     	; 0xb20 <L_C_365+0x152>
     b0c:	24 30       	cpi	r18, 0x04	; 4
     b0e:	81 f0       	breq	.+32     	; 0xb30 <L_C_365+0x162>
     b10:	25 30       	cpi	r18, 0x05	; 5
     b12:	71 f0       	breq	.+28     	; 0xb30 <L_C_365+0x162>
     b14:	26 30       	cpi	r18, 0x06	; 6
     b16:	61 f0       	breq	.+24     	; 0xb30 <L_C_365+0x162>
     b18:	27 30       	cpi	r18, 0x07	; 7
     b1a:	51 f0       	breq	.+20     	; 0xb30 <L_C_365+0x162>
     b1c:	29 30       	cpi	r18, 0x09	; 9
     b1e:	41 f0       	breq	.+16     	; 0xb30 <L_C_365+0x162>
		{
		}
#endif


		xN = xHS_DIV * xN1.b0;
     b20:	38 2f       	mov	r19, r24
     b22:	cf 01       	movw	r24, r30
     b24:	63 2f       	mov	r22, r19
     b26:	70 e0       	ldi	r23, 0x00	; 0
     b28:	03 d3       	rcall	.+1542   	; 0x1130 <__mulhi3>
		if (sN > xN)
     b2a:	8a 15       	cp	r24, r10
     b2c:	9b 05       	cpc	r25, r11
     b2e:	18 f0       	brcs	.+6      	; 0xb36 <L_C_365+0x168>
     b30:	c5 01       	movw	r24, r10
     b32:	30 2f       	mov	r19, r16
     b34:	2e 2d       	mov	r18, r14
     b36:	41 50       	subi	r20, 0x01	; 1
     b38:	31 97       	sbiw	r30, 0x01	; 1
	N0 = (R.Si570DCOMin * (uint16_t)(_2(3))) / (Freq.w1.w >> 2);
#else
	N0 = (DCO_MIN * _2(3)) / (Freq.w1.w >> 2);
#endif

	for(xHS_DIV = 11; xHS_DIV > 3; --xHS_DIV)
     b3a:	4f 3f       	cpi	r20, 0xFF	; 255
     b3c:	21 f0       	breq	.+8      	; 0xb46 <L_C_365+0x178>
     b3e:	5c 01       	movw	r10, r24
     b40:	e2 2e       	mov	r14, r18
     b42:	03 2f       	mov	r16, r19
     b44:	b0 cf       	rjmp	.-160    	; 0xaa6 <L_C_365+0xd8>
			sN1		= xN1.b0;
			sHS_DIV	= xHS_DIV;
		}
	}

	if (sHS_DIV == 0)
     b46:	22 23       	and	r18, r18
     b48:	11 f1       	breq	.+68     	; 0xb8e <L_C_365+0x1c0>
		return false;

	Si570_N      = sN;
     b4a:	1c 01       	movw	r2, r24
	Si570_N1     = sN1;
     b4c:	43 2e       	mov	r4, r19
	Si570_HS_DIV = sHS_DIV;
     b4e:	52 2e       	mov	r5, r18
		Si570CalcRFREQ(freq);
		Si570Write();
	}
	else
	{
		if (!Si570CalcDivider(freq) || !Si570CalcRFREQ(freq))
     b50:	69 81       	ldd	r22, Y+1	; 0x01
     b52:	7a 81       	ldd	r23, Y+2	; 0x02
     b54:	8b 81       	ldd	r24, Y+3	; 0x03
     b56:	9c 81       	ldd	r25, Y+4	; 0x04
     b58:	f9 dd       	rcall	.-1038   	; 0x74c <Si570CalcRFREQ>
     b5a:	88 23       	and	r24, r24
     b5c:	c1 f0       	breq	.+48     	; 0xb8e <L_C_365+0x1c0>
			return;

		FreqSmoothTune = freq;
     b5e:	89 81       	ldd	r24, Y+1	; 0x01
     b60:	9a 81       	ldd	r25, Y+2	; 0x02
     b62:	ab 81       	ldd	r26, Y+3	; 0x03
     b64:	bc 81       	ldd	r27, Y+4	; 0x04
     b66:	80 93 c3 00 	sts	0x00C3, r24
     b6a:	90 93 c4 00 	sts	0x00C4, r25
     b6e:	a0 93 c5 00 	sts	0x00C5, r26
     b72:	b0 93 c6 00 	sts	0x00C6, r27
}

static void
Si570FreezeNCO(void)
{
	Si570CmdReg(137, 0x10);
     b76:	89 e8       	ldi	r24, 0x89	; 137
     b78:	60 e1       	ldi	r22, 0x10	; 16
     b7a:	a1 de       	rcall	.-702    	; 0x8be <Si570CmdReg>

static void
Si570Load(void)
{
	Si570FreezeNCO();
	if (I2CErrors == 0)
     b7c:	88 20       	and	r8, r8
     b7e:	39 f4       	brne	.+14     	; 0xb8e <L_C_365+0x1c0>
	{
		Si570Write();
     b80:	a8 de       	rcall	.-688    	; 0x8d2 <Si570Write>
}

static void
Si570UnFreezeNCO(void)
{
	Si570CmdReg(137, 0x00);
     b82:	89 e8       	ldi	r24, 0x89	; 137
     b84:	60 e0       	ldi	r22, 0x00	; 0
     b86:	9b de       	rcall	.-714    	; 0x8be <Si570CmdReg>
}

static void
Si570NewFreq(void)
{
	Si570CmdReg(135, 0x40);
     b88:	87 e8       	ldi	r24, 0x87	; 135
     b8a:	60 e4       	ldi	r22, 0x40	; 64
     b8c:	98 de       	rcall	.-720    	; 0x8be <Si570CmdReg>
		return;

	Si570Load();

#endif
}
     b8e:	28 96       	adiw	r28, 0x08	; 8
     b90:	0f b6       	in	r0, 0x3f	; 63
     b92:	f8 94       	cli
     b94:	de bf       	out	0x3e, r29	; 62
     b96:	0f be       	out	0x3f, r0	; 63
     b98:	cd bf       	out	0x3d, r28	; 61
     b9a:	cf 91       	pop	r28
     b9c:	df 91       	pop	r29
     b9e:	1f 91       	pop	r17
     ba0:	0f 91       	pop	r16
     ba2:	ff 90       	pop	r15
     ba4:	ef 90       	pop	r14
     ba6:	df 90       	pop	r13
     ba8:	cf 90       	pop	r12
     baa:	bf 90       	pop	r11
     bac:	af 90       	pop	r10
     bae:	08 95       	ret

00000bb0 <DeviceInit>:
void
DeviceInit(void)
{
	// Check if Si570 is online and intialize if nessesary
	// SCL Low is now power on the SI570 chip in the Softrock V9
	if ((I2C_PIN & _BV(BIT_SCL)) != 0)
     bb0:	b3 9b       	sbis	0x16, 3	; 22
     bb2:	15 c0       	rjmp	.+42     	; 0xbde <DeviceInit+0x2e>
	{
		if (SI570_OffLine)
     bb4:	77 20       	and	r7, r7
     bb6:	a9 f0       	breq	.+42     	; 0xbe2 <DeviceInit+0x32>
		{
#if INCLUDE_SMOOTH
			FreqSmoothTune = 0;				// Next SetFreq call no smoodtune
     bb8:	10 92 c3 00 	sts	0x00C3, r1
     bbc:	10 92 c4 00 	sts	0x00C4, r1
     bc0:	10 92 c5 00 	sts	0x00C5, r1
     bc4:	10 92 c6 00 	sts	0x00C6, r1
#endif
			SetFreq(R.Freq);
     bc8:	60 91 65 00 	lds	r22, 0x0065
     bcc:	70 91 66 00 	lds	r23, 0x0066
     bd0:	80 91 67 00 	lds	r24, 0x0067
     bd4:	90 91 68 00 	lds	r25, 0x0068
     bd8:	94 de       	rcall	.-728    	; 0x902 <SetFreq>

			SI570_OffLine = I2CErrors;
     bda:	78 2c       	mov	r7, r8
     bdc:	08 95       	ret
		}
	}
	else 
	{
		SI570_OffLine = true;
     bde:	77 24       	eor	r7, r7
     be0:	73 94       	inc	r7
     be2:	08 95       	ret

00000be4 <usbInit>:
/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbInit(void)
{
#if USB_INTR_CFG_SET != 0
    USB_INTR_CFG |= USB_INTR_CFG_SET;
     be4:	85 b7       	in	r24, 0x35	; 53
     be6:	82 60       	ori	r24, 0x02	; 2
     be8:	85 bf       	out	0x35, r24	; 53
#endif
#if USB_INTR_CFG_CLR != 0
    USB_INTR_CFG &= ~(USB_INTR_CFG_CLR);
#endif
    USB_INTR_ENABLE |= (1 << USB_INTR_ENABLE_BIT);
     bea:	8b b7       	in	r24, 0x3b	; 59
     bec:	80 64       	ori	r24, 0x40	; 64
     bee:	8b bf       	out	0x3b, r24	; 59
    usbTxLen1 = USBPID_NAK;
#if USB_CFG_HAVE_INTRIN_ENDPOINT3
    usbTxLen3 = USBPID_NAK;
#endif
#endif
}
     bf0:	08 95       	ret

00000bf2 <usbPoll>:
}

/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbPoll(void)
{
     bf2:	1f 93       	push	r17
     bf4:	cf 93       	push	r28
     bf6:	df 93       	push	r29
schar   len;
uchar   i;

    len = usbRxLen - 3;
     bf8:	60 91 d7 00 	lds	r22, 0x00D7
     bfc:	63 50       	subi	r22, 0x03	; 3
    if(len >= 0){
     bfe:	67 fd       	sbrc	r22, 7
     c00:	b2 c0       	rjmp	.+356    	; 0xd66 <usbPoll+0x174>
 * need data integrity checks with this driver, check the CRC in your app
 * code and report errors back to the host. Since the ACK was already sent,
 * retries must be handled on application level.
 * unsigned crc = usbCrc16(buffer + 1, usbRxLen - 3);
 */
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
     c02:	80 91 d4 00 	lds	r24, 0x00D4
     c06:	cc e0       	ldi	r28, 0x0C	; 12
     c08:	d0 e0       	ldi	r29, 0x00	; 0
     c0a:	c8 1b       	sub	r28, r24
     c0c:	d1 09       	sbc	r29, r1
     c0e:	c5 52       	subi	r28, 0x25	; 37
     c10:	df 4f       	sbci	r29, 0xFF	; 255
    if(usbRxToken < 0x10){  /* OUT to endpoint != 0: endpoint number in usbRxToken */
        usbFunctionWriteOut(data, len);
        return;
    }
#endif
    if(usbRxToken == (uchar)USBPID_SETUP){
     c12:	80 91 d3 00 	lds	r24, 0x00D3
     c16:	8d 32       	cpi	r24, 0x2D	; 45
     c18:	09 f0       	breq	.+2      	; 0xc1c <usbPoll+0x2a>
     c1a:	93 c0       	rjmp	.+294    	; 0xd42 <usbPoll+0x150>
        if(len != 8)    /* Setup size must be always 8 bytes. Ignore otherwise. */
     c1c:	68 30       	cpi	r22, 0x08	; 8
     c1e:	09 f0       	breq	.+2      	; 0xc22 <usbPoll+0x30>
     c20:	a0 c0       	rjmp	.+320    	; 0xd62 <usbPoll+0x170>
            return;
        usbMsgLen_t replyLen;
        usbTxBuf[0] = USBPID_DATA0;         /* initialize data toggling */
     c22:	83 ec       	ldi	r24, 0xC3	; 195
     c24:	80 93 c7 00 	sts	0x00C7, r24
        usbTxLen = USBPID_NAK;              /* abort pending transmit */
     c28:	8a e5       	ldi	r24, 0x5A	; 90
     c2a:	80 93 b0 00 	sts	0x00B0, r24
        usbMsgFlags = 0;
     c2e:	10 92 b4 00 	sts	0x00B4, r1
        uchar type = rq->bmRequestType & USBRQ_TYPE_MASK;
        if(type != USBRQ_TYPE_STANDARD){    /* standard requests are handled by driver */
     c32:	88 81       	ld	r24, Y
     c34:	80 76       	andi	r24, 0x60	; 96
     c36:	39 f0       	breq	.+14     	; 0xc46 <usbPoll+0x54>
            replyLen = usbFunctionSetup(data);
     c38:	ce 01       	movw	r24, r28
     c3a:	94 da       	rcall	.-2776   	; 0x164 <usbFunctionSetup>
     c3c:	28 2f       	mov	r18, r24
        }else{
            replyLen = usbDriverSetup(rq);
        }
#if USB_CFG_IMPLEMENT_FN_READ || USB_CFG_IMPLEMENT_FN_WRITE
        if(replyLen == USB_NO_MSG){         /* use user-supplied read/write function */
     c3e:	8f 3f       	cpi	r24, 0xFF	; 255
     c40:	09 f4       	brne	.+2      	; 0xc44 <usbPoll+0x52>
     c42:	6e c0       	rjmp	.+220    	; 0xd20 <usbPoll+0x12e>
     c44:	74 c0       	rjmp	.+232    	; 0xd2e <usbPoll+0x13c>
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
uchar   len  = 0, *dataPtr = usbTxBuf + 9;  /* there are 2 bytes free space at the end of the buffer */
uchar   value = rq->wValue.bytes[0];
     c46:	9a 81       	ldd	r25, Y+2	; 0x02
#if USB_CFG_IMPLEMENT_HALT
uchar   index = rq->wIndex.bytes[0];
#endif

    dataPtr[0] = 0; /* default reply common to USBRQ_GET_STATUS and USBRQ_GET_INTERFACE */
     c48:	10 92 d0 00 	sts	0x00D0, r1
    SWITCH_START(rq->bRequest)
     c4c:	89 81       	ldd	r24, Y+1	; 0x01
    SWITCH_CASE(USBRQ_GET_STATUS)           /* 0 */
     c4e:	88 23       	and	r24, r24
     c50:	21 f4       	brne	.+8      	; 0xc5a <usbPoll+0x68>
            dataPtr[0] =  USB_CFG_IS_SELF_POWERED;
#if USB_CFG_IMPLEMENT_HALT
        if(recipient == USBRQ_RCPT_ENDPOINT && index == 0x81)   /* request status for endpoint 1 */
            dataPtr[0] = usbTxLen1 == USBPID_STALL;
#endif
        dataPtr[1] = 0;
     c52:	10 92 d1 00 	sts	0x00D1, r1
     c56:	22 e0       	ldi	r18, 0x02	; 2
     c58:	5c c0       	rjmp	.+184    	; 0xd12 <usbPoll+0x120>
        if(value == 0 && index == 0x81){    /* feature 0 == HALT for endpoint == 1 */
            usbTxLen1 = rq->bRequest == USBRQ_CLEAR_FEATURE ? USBPID_NAK : USBPID_STALL;
            usbResetDataToggling();
        }
#endif
    SWITCH_CASE(USBRQ_SET_ADDRESS)          /* 5 */
     c5a:	85 30       	cpi	r24, 0x05	; 5
     c5c:	19 f4       	brne	.+6      	; 0xc64 <usbPoll+0x72>
        usbNewDeviceAddr = value;
     c5e:	90 93 d8 00 	sts	0x00D8, r25
     c62:	56 c0       	rjmp	.+172    	; 0xd10 <usbPoll+0x11e>
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
     c64:	86 30       	cpi	r24, 0x06	; 6
     c66:	09 f0       	breq	.+2      	; 0xc6a <usbPoll+0x78>
     c68:	44 c0       	rjmp	.+136    	; 0xcf2 <usbPoll+0x100>
static inline usbMsgLen_t usbDriverDescriptor(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar       flags = USB_FLG_MSGPTR_IS_ROM;

    SWITCH_START(rq->wValue.bytes[1])
     c6a:	8b 81       	ldd	r24, Y+3	; 0x03
    SWITCH_CASE(USBDESCR_DEVICE)    /* 1 */
     c6c:	81 30       	cpi	r24, 0x01	; 1
     c6e:	19 f4       	brne	.+6      	; 0xc76 <usbPoll+0x84>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_DEVICE, usbDescriptorDevice)
     c70:	82 e5       	ldi	r24, 0x52	; 82
     c72:	90 e0       	ldi	r25, 0x00	; 0
     c74:	04 c0       	rjmp	.+8      	; 0xc7e <usbPoll+0x8c>
    SWITCH_CASE(USBDESCR_CONFIG)    /* 2 */
     c76:	82 30       	cpi	r24, 0x02	; 2
     c78:	41 f4       	brne	.+16     	; 0xc8a <usbPoll+0x98>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_CONFIGURATION, usbDescriptorConfiguration)
     c7a:	84 e6       	ldi	r24, 0x64	; 100
     c7c:	90 e0       	ldi	r25, 0x00	; 0
     c7e:	90 93 d6 00 	sts	0x00D6, r25
     c82:	80 93 d5 00 	sts	0x00D5, r24
     c86:	80 e4       	ldi	r24, 0x40	; 64
     c88:	2d c0       	rjmp	.+90     	; 0xce4 <usbPoll+0xf2>
    SWITCH_CASE(USBDESCR_STRING)    /* 3 */
     c8a:	83 30       	cpi	r24, 0x03	; 3
     c8c:	69 f5       	brne	.+90     	; 0xce8 <usbPoll+0xf6>
#if USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC
        if(USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_RAM)
            flags = 0;
        len = usbFunctionDescriptor(rq);
#else   /* USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC */
        SWITCH_START(rq->wValue.bytes[0])
     c8e:	8a 81       	ldd	r24, Y+2	; 0x02
        SWITCH_CASE(0)
     c90:	88 23       	and	r24, r24
     c92:	49 f4       	brne	.+18     	; 0xca6 <usbPoll+0xb4>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_0, usbDescriptorString0)
     c94:	8e e1       	ldi	r24, 0x1E	; 30
     c96:	90 e0       	ldi	r25, 0x00	; 0
     c98:	90 93 d6 00 	sts	0x00D6, r25
     c9c:	80 93 d5 00 	sts	0x00D5, r24
     ca0:	80 e4       	ldi	r24, 0x40	; 64
     ca2:	24 e0       	ldi	r18, 0x04	; 4
     ca4:	23 c0       	rjmp	.+70     	; 0xcec <usbPoll+0xfa>
        SWITCH_CASE(1)
     ca6:	81 30       	cpi	r24, 0x01	; 1
     ca8:	49 f4       	brne	.+18     	; 0xcbc <usbPoll+0xca>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_VENDOR, usbDescriptorStringVendor)
     caa:	82 e2       	ldi	r24, 0x22	; 34
     cac:	90 e0       	ldi	r25, 0x00	; 0
     cae:	90 93 d6 00 	sts	0x00D6, r25
     cb2:	80 93 d5 00 	sts	0x00D5, r24
     cb6:	80 e4       	ldi	r24, 0x40	; 64
     cb8:	2a e1       	ldi	r18, 0x1A	; 26
     cba:	18 c0       	rjmp	.+48     	; 0xcec <usbPoll+0xfa>
        SWITCH_CASE(2)
     cbc:	82 30       	cpi	r24, 0x02	; 2
     cbe:	49 f4       	brne	.+18     	; 0xcd2 <usbPoll+0xe0>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_PRODUCT, usbDescriptorStringDevice)
     cc0:	8c e3       	ldi	r24, 0x3C	; 60
     cc2:	90 e0       	ldi	r25, 0x00	; 0
     cc4:	90 93 d6 00 	sts	0x00D6, r25
     cc8:	80 93 d5 00 	sts	0x00D5, r24
     ccc:	80 e4       	ldi	r24, 0x40	; 64
     cce:	26 e1       	ldi	r18, 0x16	; 22
     cd0:	0d c0       	rjmp	.+26     	; 0xcec <usbPoll+0xfa>
        SWITCH_CASE(3)
     cd2:	83 30       	cpi	r24, 0x03	; 3
     cd4:	49 f4       	brne	.+18     	; 0xce8 <usbPoll+0xf6>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_SERIAL_NUMBER, usbDescriptorStringSerialNumber)
     cd6:	8e e9       	ldi	r24, 0x9E	; 158
     cd8:	90 e0       	ldi	r25, 0x00	; 0
     cda:	90 93 d6 00 	sts	0x00D6, r25
     cde:	80 93 d5 00 	sts	0x00D5, r24
     ce2:	80 e0       	ldi	r24, 0x00	; 0
     ce4:	22 e1       	ldi	r18, 0x12	; 18
     ce6:	02 c0       	rjmp	.+4      	; 0xcec <usbPoll+0xfa>
     ce8:	80 e4       	ldi	r24, 0x40	; 64
     cea:	20 e0       	ldi	r18, 0x00	; 0
    SWITCH_DEFAULT
        if(USB_CFG_DESCR_PROPS_UNKNOWN & USB_PROP_IS_DYNAMIC){
            len = usbFunctionDescriptor(rq);
        }
    SWITCH_END
    usbMsgFlags = flags;
     cec:	80 93 b4 00 	sts	0x00B4, r24
     cf0:	1e c0       	rjmp	.+60     	; 0xd2e <usbPoll+0x13c>
        usbNewDeviceAddr = value;
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
        len = usbDriverDescriptor(rq);
        goto skipMsgPtrAssignment;
    SWITCH_CASE(USBRQ_GET_CONFIGURATION)    /* 8 */
     cf2:	88 30       	cpi	r24, 0x08	; 8
     cf4:	21 f4       	brne	.+8      	; 0xcfe <usbPoll+0x10c>
     cf6:	21 e0       	ldi	r18, 0x01	; 1
     cf8:	8a ed       	ldi	r24, 0xDA	; 218
     cfa:	90 e0       	ldi	r25, 0x00	; 0
     cfc:	0c c0       	rjmp	.+24     	; 0xd16 <usbPoll+0x124>
        dataPtr = &usbConfiguration;  /* send current configuration value */
        len = 1;
    SWITCH_CASE(USBRQ_SET_CONFIGURATION)    /* 9 */
     cfe:	89 30       	cpi	r24, 0x09	; 9
     d00:	19 f4       	brne	.+6      	; 0xd08 <usbPoll+0x116>
        usbConfiguration = value;
     d02:	90 93 da 00 	sts	0x00DA, r25
     d06:	04 c0       	rjmp	.+8      	; 0xd10 <usbPoll+0x11e>
        usbResetStall();
    SWITCH_CASE(USBRQ_GET_INTERFACE)        /* 10 */
     d08:	8a 30       	cpi	r24, 0x0A	; 10
     d0a:	11 f4       	brne	.+4      	; 0xd10 <usbPoll+0x11e>
     d0c:	21 e0       	ldi	r18, 0x01	; 1
     d0e:	01 c0       	rjmp	.+2      	; 0xd12 <usbPoll+0x120>
     d10:	20 e0       	ldi	r18, 0x00	; 0
     d12:	80 ed       	ldi	r24, 0xD0	; 208
     d14:	90 e0       	ldi	r25, 0x00	; 0
        usbResetStall();
#endif
    SWITCH_DEFAULT                          /* 7=SET_DESCRIPTOR, 12=SYNC_FRAME */
        /* Should we add an optional hook here? */
    SWITCH_END
    usbMsgPtr = dataPtr;
     d16:	90 93 d6 00 	sts	0x00D6, r25
     d1a:	80 93 d5 00 	sts	0x00D5, r24
     d1e:	07 c0       	rjmp	.+14     	; 0xd2e <usbPoll+0x13c>
            replyLen = usbDriverSetup(rq);
        }
#if USB_CFG_IMPLEMENT_FN_READ || USB_CFG_IMPLEMENT_FN_WRITE
        if(replyLen == USB_NO_MSG){         /* use user-supplied read/write function */
            /* do some conditioning on replyLen, but on IN transfers only */
            if((rq->bmRequestType & USBRQ_DIR_MASK) != USBRQ_DIR_HOST_TO_DEVICE){
     d20:	88 81       	ld	r24, Y
     d22:	87 fd       	sbrc	r24, 7
                if(sizeof(replyLen) < sizeof(rq->wLength.word)){ /* help compiler with optimizing */
                    replyLen = rq->wLength.bytes[0];
     d24:	2e 81       	ldd	r18, Y+6	; 0x06
                }else{
                    replyLen = rq->wLength.word;
                }
            }
            usbMsgFlags = USB_FLG_USE_USER_RW;
     d26:	80 e8       	ldi	r24, 0x80	; 128
     d28:	80 93 b4 00 	sts	0x00B4, r24
     d2c:	06 c0       	rjmp	.+12     	; 0xd3a <usbPoll+0x148>
        }else   /* The 'else' prevents that we limit a replyLen of USB_NO_MSG to the maximum transfer len. */
#endif
        if(sizeof(replyLen) < sizeof(rq->wLength.word)){ /* help compiler with optimizing */
            if(!rq->wLength.bytes[1] && replyLen > rq->wLength.bytes[0])    /* limit length to max */
     d2e:	8f 81       	ldd	r24, Y+7	; 0x07
     d30:	88 23       	and	r24, r24
     d32:	19 f4       	brne	.+6      	; 0xd3a <usbPoll+0x148>
     d34:	8e 81       	ldd	r24, Y+6	; 0x06
     d36:	82 17       	cp	r24, r18
     d38:	08 f0       	brcs	.+2      	; 0xd3c <usbPoll+0x14a>
     d3a:	82 2f       	mov	r24, r18
                replyLen = rq->wLength.bytes[0];
        }else{
            if(replyLen > rq->wLength.word)     /* limit length to max */
                replyLen = rq->wLength.word;
        }
        usbMsgLen = replyLen;
     d3c:	80 93 b1 00 	sts	0x00B1, r24
     d40:	10 c0       	rjmp	.+32     	; 0xd62 <usbPoll+0x170>
    }else{  /* usbRxToken must be USBPID_OUT, which means data phase of setup (control-out) */
#if USB_CFG_IMPLEMENT_FN_WRITE
        if(usbMsgFlags & USB_FLG_USE_USER_RW){
     d42:	80 91 b4 00 	lds	r24, 0x00B4
     d46:	87 ff       	sbrs	r24, 7
     d48:	0c c0       	rjmp	.+24     	; 0xd62 <usbPoll+0x170>
            uchar rval = usbFunctionWrite(data, len);
     d4a:	ce 01       	movw	r24, r28
     d4c:	70 db       	rcall	.-2336   	; 0x42e <usbFunctionWrite>
            if(rval == 0xff){   /* an error occurred */
     d4e:	8f 3f       	cpi	r24, 0xFF	; 255
     d50:	21 f4       	brne	.+8      	; 0xd5a <usbPoll+0x168>
                usbTxLen = USBPID_STALL;
     d52:	8e e1       	ldi	r24, 0x1E	; 30
     d54:	80 93 b0 00 	sts	0x00B0, r24
     d58:	04 c0       	rjmp	.+8      	; 0xd62 <usbPoll+0x170>
            }else if(rval != 0){    /* This was the final package */
     d5a:	88 23       	and	r24, r24
     d5c:	11 f0       	breq	.+4      	; 0xd62 <usbPoll+0x170>
                usbMsgLen = 0;  /* answer with a zero-sized data packet */
     d5e:	10 92 b1 00 	sts	0x00B1, r1
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
#if USB_CFG_HAVE_FLOWCONTROL
        if(usbRxLen > 0)    /* only mark as available if not inactivated */
            usbRxLen = 0;
#else
        usbRxLen = 0;       /* mark rx buffer as available */
     d62:	10 92 d7 00 	sts	0x00D7, r1
#endif
    }
    if(usbTxLen & 0x10){    /* transmit system idle */
     d66:	80 91 b0 00 	lds	r24, 0x00B0
     d6a:	84 ff       	sbrs	r24, 4
     d6c:	49 c0       	rjmp	.+146    	; 0xe00 <usbPoll+0x20e>
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
     d6e:	80 91 b1 00 	lds	r24, 0x00B1
     d72:	8f 3f       	cpi	r24, 0xFF	; 255
     d74:	09 f4       	brne	.+2      	; 0xd78 <usbPoll+0x186>
     d76:	44 c0       	rjmp	.+136    	; 0xe00 <usbPoll+0x20e>
     d78:	18 2f       	mov	r17, r24
     d7a:	89 30       	cpi	r24, 0x09	; 9
     d7c:	08 f0       	brcs	.+2      	; 0xd80 <usbPoll+0x18e>
     d7e:	18 e0       	ldi	r17, 0x08	; 8
uchar       len;

    wantLen = usbMsgLen;
    if(wantLen > 8)
        wantLen = 8;
    usbMsgLen -= wantLen;
     d80:	81 1b       	sub	r24, r17
     d82:	80 93 b1 00 	sts	0x00B1, r24
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
     d86:	80 91 c7 00 	lds	r24, 0x00C7
     d8a:	98 e8       	ldi	r25, 0x88	; 136
     d8c:	89 27       	eor	r24, r25
     d8e:	80 93 c7 00 	sts	0x00C7, r24
/* This function is similar to usbFunctionRead(), but it's also called for
 * data handled automatically by the driver (e.g. descriptor reads).
 */
static uchar usbDeviceRead(uchar *data, uchar len)
{
    if(len > 0){    /* don't bother app with 0 sized reads */
     d92:	11 23       	and	r17, r17
     d94:	41 f1       	breq	.+80     	; 0xde6 <usbPoll+0x1f4>
        if(usbMsgFlags & USB_FLG_USE_USER_RW){
            len = usbFunctionRead(data, len);
        }else
#endif
        {
            uchar i = len, *r = usbMsgPtr;
     d96:	20 91 d5 00 	lds	r18, 0x00D5
     d9a:	30 91 d6 00 	lds	r19, 0x00D6
            if(usbMsgFlags & USB_FLG_MSGPTR_IS_ROM){    /* ROM data */
     d9e:	80 91 b4 00 	lds	r24, 0x00B4
     da2:	86 ff       	sbrs	r24, 6
     da4:	0d c0       	rjmp	.+26     	; 0xdc0 <usbPoll+0x1ce>
     da6:	a8 ec       	ldi	r26, 0xC8	; 200
     da8:	b0 e0       	ldi	r27, 0x00	; 0
     daa:	80 e0       	ldi	r24, 0x00	; 0
     dac:	90 e0       	ldi	r25, 0x00	; 0
                do{
                    uchar c = USB_READ_FLASH(r);    /* assign to char size variable to enforce byte ops */
     dae:	f9 01       	movw	r30, r18
     db0:	e8 0f       	add	r30, r24
     db2:	f9 1f       	adc	r31, r25
     db4:	e4 91       	lpm	r30, Z+
                    *data++ = c;
     db6:	ed 93       	st	X+, r30
     db8:	01 96       	adiw	r24, 0x01	; 1
                    r++;
                }while(--i);
     dba:	18 17       	cp	r17, r24
     dbc:	c1 f7       	brne	.-16     	; 0xdae <usbPoll+0x1bc>
     dbe:	08 c0       	rjmp	.+16     	; 0xdd0 <usbPoll+0x1de>
     dc0:	91 2f       	mov	r25, r17
     dc2:	d9 01       	movw	r26, r18
     dc4:	e8 ec       	ldi	r30, 0xC8	; 200
     dc6:	f0 e0       	ldi	r31, 0x00	; 0
            }else{  /* RAM data */
                do{
                    *data++ = *r++;
     dc8:	8d 91       	ld	r24, X+
     dca:	81 93       	st	Z+, r24
                }while(--i);
     dcc:	91 50       	subi	r25, 0x01	; 1
     dce:	e1 f7       	brne	.-8      	; 0xdc8 <usbPoll+0x1d6>
     dd0:	11 50       	subi	r17, 0x01	; 1
     dd2:	81 2f       	mov	r24, r17
     dd4:	90 e0       	ldi	r25, 0x00	; 0
     dd6:	1f 5f       	subi	r17, 0xFF	; 255
     dd8:	01 96       	adiw	r24, 0x01	; 1
     dda:	82 0f       	add	r24, r18
     ddc:	93 1f       	adc	r25, r19
            }
            usbMsgPtr = r;
     dde:	90 93 d6 00 	sts	0x00D6, r25
     de2:	80 93 d5 00 	sts	0x00D5, r24
        wantLen = 8;
    usbMsgLen -= wantLen;
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
    len = usbDeviceRead(usbTxBuf + 1, wantLen);
    if(len <= 8){           /* valid data packet */
        usbCrc16Append(&usbTxBuf[1], len);
     de6:	88 ec       	ldi	r24, 0xC8	; 200
     de8:	90 e0       	ldi	r25, 0x00	; 0
     dea:	61 2f       	mov	r22, r17
     dec:	39 d0       	rcall	.+114    	; 0xe60 <usbCrc16Append>
        len += 4;           /* length including sync byte */
     dee:	61 2f       	mov	r22, r17
     df0:	6c 5f       	subi	r22, 0xFC	; 252
        if(len < 12)        /* a partial package identifies end of message */
     df2:	6c 30       	cpi	r22, 0x0C	; 12
     df4:	19 f0       	breq	.+6      	; 0xdfc <usbPoll+0x20a>
            usbMsgLen = USB_NO_MSG;
     df6:	8f ef       	ldi	r24, 0xFF	; 255
     df8:	80 93 b1 00 	sts	0x00B1, r24
    }else{
        len = USBPID_STALL;   /* stall the endpoint */
        usbMsgLen = USB_NO_MSG;
    }
    usbTxLen = len;
     dfc:	60 93 b0 00 	sts	0x00B0, r22
     e00:	94 e1       	ldi	r25, 0x14	; 20
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
            usbBuildTxBlock();
        }
    }
    for(i = 20; i > 0; i--){
        uchar usbLineStatus = USBIN & USBMASK;
     e02:	86 b3       	in	r24, 0x16	; 22
        if(usbLineStatus != 0)  /* SE0 has ended */
     e04:	85 70       	andi	r24, 0x05	; 5
     e06:	31 f4       	brne	.+12     	; 0xe14 <usbPoll+0x222>
    if(usbTxLen & 0x10){    /* transmit system idle */
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
            usbBuildTxBlock();
        }
    }
    for(i = 20; i > 0; i--){
     e08:	91 50       	subi	r25, 0x01	; 1
     e0a:	d9 f7       	brne	.-10     	; 0xe02 <usbPoll+0x210>
        uchar usbLineStatus = USBIN & USBMASK;
        if(usbLineStatus != 0)  /* SE0 has ended */
            goto isNotReset;
    }
    /* RESET condition, called multiple times during reset */
    usbNewDeviceAddr = 0;
     e0c:	10 92 d8 00 	sts	0x00D8, r1
    usbDeviceAddr = 0;
     e10:	10 92 d2 00 	sts	0x00D2, r1

static inline void usbHandleResetHook(uchar notResetState)
{
#ifdef USB_RESET_HOOK
static uchar    wasReset;
uchar           isReset = !notResetState;
     e14:	10 e0       	ldi	r17, 0x00	; 0
     e16:	99 23       	and	r25, r25
     e18:	09 f4       	brne	.+2      	; 0xe1c <usbPoll+0x22a>
     e1a:	11 e0       	ldi	r17, 0x01	; 1

    if(wasReset != isReset){
     e1c:	80 91 b3 00 	lds	r24, 0x00B3
     e20:	81 17       	cp	r24, r17
     e22:	29 f0       	breq	.+10     	; 0xe2e <usbPoll+0x23c>
        USB_RESET_HOOK(isReset);
     e24:	11 23       	and	r17, r17
     e26:	09 f4       	brne	.+2      	; 0xe2a <usbPoll+0x238>
     e28:	24 dc       	rcall	.-1976   	; 0x672 <usbEventResetReady>
        wasReset = isReset;
     e2a:	10 93 b3 00 	sts	0x00B3, r17
    usbDeviceAddr = 0;
    usbResetStall();
    DBG1(0xff, 0, 0);
isNotReset:
    usbHandleResetHook(i);
}
     e2e:	df 91       	pop	r29
     e30:	cf 91       	pop	r28
     e32:	1f 91       	pop	r17
     e34:	08 95       	ret

00000e36 <usbCrc16>:
;   poly    r20+r21
;   scratch r23
;   resCrc  r24+r25 / r16+r17
;   ptr     X / Z
usbCrc16:
    mov     ptrL, argPtrL
     e36:	a8 2f       	mov	r26, r24
    mov     ptrH, argPtrH
     e38:	b9 2f       	mov	r27, r25
    ldi     resCrcL, 0
     e3a:	80 e0       	ldi	r24, 0x00	; 0
    ldi     resCrcH, 0
     e3c:	90 e0       	ldi	r25, 0x00	; 0
    ldi     polyL, lo8(0xa001)
     e3e:	41 e0       	ldi	r20, 0x01	; 1
    ldi     polyH, hi8(0xa001)
     e40:	50 ea       	ldi	r21, 0xA0	; 160
    com     argLen      ; argLen = -argLen - 1: modified loop to ensure that carry is set
     e42:	60 95       	com	r22
    ldi     bitCnt, 0   ; loop counter with starnd condition = end condition
     e44:	30 e0       	ldi	r19, 0x00	; 0
    rjmp    usbCrcLoopEntry
     e46:	09 c0       	rjmp	.+18     	; 0xe5a <usbCrcLoopEntry>

00000e48 <usbCrcByteLoop>:
usbCrcByteLoop:
    ld      byte, ptr+
     e48:	2d 91       	ld	r18, X+
    eor     resCrcL, byte
     e4a:	82 27       	eor	r24, r18

00000e4c <usbCrcBitLoop>:
usbCrcBitLoop:
    ror     resCrcH     ; carry is always set here (see brcs jumps to here)
     e4c:	97 95       	ror	r25
    ror     resCrcL
     e4e:	87 95       	ror	r24
    brcs    usbCrcNoXor
     e50:	10 f0       	brcs	.+4      	; 0xe56 <usbCrcNoXor>
    eor     resCrcL, polyL
     e52:	84 27       	eor	r24, r20
    eor     resCrcH, polyH
     e54:	95 27       	eor	r25, r21

00000e56 <usbCrcNoXor>:
usbCrcNoXor:
    subi    bitCnt, 224 ; (8 * 224) % 256 = 0; this loop iterates 8 times
     e56:	30 5e       	subi	r19, 0xE0	; 224
    brcs    usbCrcBitLoop
     e58:	c8 f3       	brcs	.-14     	; 0xe4c <usbCrcBitLoop>

00000e5a <usbCrcLoopEntry>:
usbCrcLoopEntry:
    subi    argLen, -1
     e5a:	6f 5f       	subi	r22, 0xFF	; 255
    brcs    usbCrcByteLoop
     e5c:	a8 f3       	brcs	.-22     	; 0xe48 <usbCrcByteLoop>

00000e5e <usbCrcReady>:
usbCrcReady:
    ret
     e5e:	08 95       	ret

00000e60 <usbCrc16Append>:

#endif /* USB_USE_FAST_CRC */

; extern unsigned usbCrc16Append(unsigned char *data, unsigned char len);
usbCrc16Append:
    rcall   usbCrc16
     e60:	ea df       	rcall	.-44     	; 0xe36 <usbCrc16>
    st      ptr+, resCrcL
     e62:	8d 93       	st	X+, r24
    st      ptr+, resCrcH
     e64:	9d 93       	st	X+, r25
    ret
     e66:	08 95       	ret

00000e68 <usbMeasureFrameLength>:

; extern unsigned usbMeasurePacketLength(void);
; returns time between two idle strobes in multiples of 7 CPU clocks
.global usbMeasureFrameLength
usbMeasureFrameLength:
    ldi     cntH, 6         ; wait ~ 10 ms for D- == 0
     e68:	a6 e0       	ldi	r26, 0x06	; 6
    clr     cnt16L
     e6a:	88 27       	eor	r24, r24
    clr     cnt16H
     e6c:	99 27       	eor	r25, r25

00000e6e <usbMFTime16>:
usbMFTime16:
    dec     cntH
     e6e:	aa 95       	dec	r26
    breq    usbMFTimeout
     e70:	69 f0       	breq	.+26     	; 0xe8c <usbMFTimeout>

00000e72 <usbMFWaitStrobe>:
usbMFWaitStrobe:            ; first wait for D- == 0 (idle strobe)
    sbiw    cnt16, 1        ;[0] [6]
     e72:	01 97       	sbiw	r24, 0x01	; 1
    breq    usbMFTime16     ;[2]
     e74:	e1 f3       	breq	.-8      	; 0xe6e <usbMFTime16>
    sbic    USBIN, USBMINUS ;[3]
     e76:	b2 99       	sbic	0x16, 2	; 22
    rjmp    usbMFWaitStrobe ;[4]
     e78:	fc cf       	rjmp	.-8      	; 0xe72 <usbMFWaitStrobe>

00000e7a <usbMFWaitIdle>:
usbMFWaitIdle:              ; then wait until idle again
    sbis    USBIN, USBMINUS ;1 wait for D- == 1
     e7a:	b2 9b       	sbis	0x16, 2	; 22
    rjmp    usbMFWaitIdle   ;2
     e7c:	fe cf       	rjmp	.-4      	; 0xe7a <usbMFWaitIdle>
    ldi     cnt16L, 1       ;1 represents cycles so far
     e7e:	81 e0       	ldi	r24, 0x01	; 1
    clr     cnt16H          ;1
     e80:	99 27       	eor	r25, r25

00000e82 <usbMFWaitLoop>:
usbMFWaitLoop:
    in      cntH, USBIN     ;[0] [7]
     e82:	a6 b3       	in	r26, 0x16	; 22
    adiw    cnt16, 1        ;[1]
     e84:	01 96       	adiw	r24, 0x01	; 1
    breq    usbMFTimeout    ;[3]
     e86:	11 f0       	breq	.+4      	; 0xe8c <usbMFTimeout>
    andi    cntH, USBMASK   ;[4]
     e88:	a5 70       	andi	r26, 0x05	; 5
    brne    usbMFWaitLoop   ;[5]
     e8a:	d9 f7       	brne	.-10     	; 0xe82 <usbMFWaitLoop>

00000e8c <usbMFTimeout>:
usbMFTimeout:
#if resL != cnt16L
    mov     resL, cnt16L
    mov     resH, cnt16H
#endif
    ret
     e8c:	08 95       	ret

00000e8e <__vector_1>:
; when instruction starts


USB_INTR_VECTOR:
;order of registers pushed: YL, SREG [sofError], r0, YH, shift, x1, x2, x3, x4, cnt
    push    YL                  ;[-23] push only what is necessary to sync with edge ASAP
     e8e:	cf 93       	push	r28
    in      YL, SREG            ;[-21]
     e90:	cf b7       	in	r28, 0x3f	; 63
    push    YL                  ;[-20]
     e92:	cf 93       	push	r28

00000e94 <waitForJ>:
;sync up with J to K edge during sync pattern -- use fastest possible loops
;The first part waits at most 1 bit long since we must be in sync pattern.
;YL is guarenteed to be < 0x80 because I flag is clear. When we jump to
;waitForJ, ensure that this prerequisite is met.
waitForJ:
    inc     YL
     e94:	c3 95       	inc	r28
    sbis    USBIN, USBMINUS
     e96:	b2 9b       	sbis	0x16, 2	; 22
    brne    waitForJ        ; just make sure we have ANY timeout
     e98:	e9 f7       	brne	.-6      	; 0xe94 <waitForJ>

00000e9a <waitForK>:
waitForK:
;The following code results in a sampling window of < 1/4 bit which meets the spec.
    sbis    USBIN, USBMINUS     ;[-15]
     e9a:	b2 9b       	sbis	0x16, 2	; 22
    rjmp    foundK              ;[-14]
     e9c:	0b c0       	rjmp	.+22     	; 0xeb4 <foundK>
    sbis    USBIN, USBMINUS
     e9e:	b2 9b       	sbis	0x16, 2	; 22
    rjmp    foundK
     ea0:	09 c0       	rjmp	.+18     	; 0xeb4 <foundK>
    sbis    USBIN, USBMINUS
     ea2:	b2 9b       	sbis	0x16, 2	; 22
    rjmp    foundK
     ea4:	07 c0       	rjmp	.+14     	; 0xeb4 <foundK>
    sbis    USBIN, USBMINUS
     ea6:	b2 9b       	sbis	0x16, 2	; 22
    rjmp    foundK
     ea8:	05 c0       	rjmp	.+10     	; 0xeb4 <foundK>
    sbis    USBIN, USBMINUS
     eaa:	b2 9b       	sbis	0x16, 2	; 22
    rjmp    foundK
     eac:	03 c0       	rjmp	.+6      	; 0xeb4 <foundK>
    sbis    USBIN, USBMINUS
     eae:	b2 9b       	sbis	0x16, 2	; 22
    rjmp    foundK
     eb0:	01 c0       	rjmp	.+2      	; 0xeb4 <foundK>
    sts     usbSofCount, YL
#endif  /* USB_COUNT_SOF */
#ifdef USB_SOF_HOOK
    USB_SOF_HOOK
#endif
    rjmp    sofError
     eb2:	d3 c0       	rjmp	.+422    	; 0x105a <sofError>

00000eb4 <foundK>:
foundK:                         ;[-12]
;{3, 5} after falling D- edge, average delay: 4 cycles [we want 5 for center sampling]
;we have 1 bit time for setup purposes, then sample again. Numbers in brackets
;are cycles from center of first sync (double K) bit after the instruction
    push    r0                  ;[-12]
     eb4:	0f 92       	push	r0
;   [---]                       ;[-11]
    push    YH                  ;[-10]
     eb6:	df 93       	push	r29
;   [---]                       ;[-9]
    lds     YL, usbInputBufOffset;[-8]
     eb8:	c0 91 d4 00 	lds	r28, 0x00D4
;   [---]                       ;[-7]
    clr     YH                  ;[-6]
     ebc:	dd 27       	eor	r29, r29
    subi    YL, lo8(-(usbRxBuf));[-5] [rx loop init]
     ebe:	c5 52       	subi	r28, 0x25	; 37
    sbci    YH, hi8(-(usbRxBuf));[-4] [rx loop init]
     ec0:	df 4f       	sbci	r29, 0xFF	; 255
    mov     r0, x2              ;[-3] [rx loop init]
     ec2:	01 2e       	mov	r0, r17
    sbis    USBIN, USBMINUS     ;[-2] we want two bits K (sample 2 cycles too early)
     ec4:	b2 9b       	sbis	0x16, 2	; 22
    rjmp    haveTwoBitsK        ;[-1]
     ec6:	03 c0       	rjmp	.+6      	; 0xece <haveTwoBitsK>
    pop     YH                  ;[0] undo the pushes from before
     ec8:	df 91       	pop	r29
    pop     r0                  ;[2]
     eca:	0f 90       	pop	r0
    rjmp    waitForK            ;[4] this was not the end of sync, retry
     ecc:	e6 cf       	rjmp	.-52     	; 0xe9a <waitForK>

00000ece <haveTwoBitsK>:

;----------------------------------------------------------------------------
; push more registers and initialize values while we sample the first bits:
;----------------------------------------------------------------------------
haveTwoBitsK:               ;[1]
    push    shift           ;[1]
     ece:	2f 93       	push	r18
    push    x1              ;[3]
     ed0:	0f 93       	push	r16
    push    x2              ;[5]
     ed2:	1f 93       	push	r17
    push    x3              ;[7]
     ed4:	4f 93       	push	r20
    ldi     shift, 0xff     ;[9] [rx loop init]
     ed6:	2f ef       	ldi	r18, 0xFF	; 255
    ori     x3, 0xff        ;[10] [rx loop init] == ser x3, clear zero flag
     ed8:	4f 6f       	ori	r20, 0xFF	; 255

    in      x1, USBIN       ;[11] <-- sample bit 0
     eda:	06 b3       	in	r16, 0x16	; 22
    bst     x1, USBMINUS    ;[12]
     edc:	02 fb       	bst	r16, 2
    bld     shift, 0        ;[13]
     ede:	20 f9       	bld	r18, 0
    push    x4              ;[14] == phase
     ee0:	5f 93       	push	r21
;   [---]                   ;[15]
    push    cnt             ;[16]
     ee2:	3f 93       	push	r19
;   [---]                   ;[17]
    ldi     phase, 0        ;[18] [rx loop init]
     ee4:	50 e0       	ldi	r21, 0x00	; 0
    ldi     cnt, USB_BUFSIZE;[19] [rx loop init]
     ee6:	3b e0       	ldi	r19, 0x0B	; 11
    rjmp    rxbit1          ;[20]
     ee8:	65 c0       	rjmp	.+202    	; 0xfb4 <rxbit1>

00000eea <continueWithBit5>:
bit 7: jump, fixup bitstuff
; 87 [+ 2] cycles
------------------------------------------------------------------
*/
continueWithBit5:
    in      x2, USBIN       ;[055] <-- bit 5
     eea:	16 b3       	in	r17, 0x16	; 22
    eor     r0, x2          ;[056]
     eec:	01 26       	eor	r0, r17
    or      phase, r0       ;[057]
     eee:	50 29       	or	r21, r0
    sbrc    phase, USBMINUS ;[058]
     ef0:	52 fd       	sbrc	r21, 2
    lpm                     ;[059] optional nop3; modifies r0
     ef2:	c8 95       	lpm
    in      phase, USBIN    ;[060] <-- phase
     ef4:	56 b3       	in	r21, 0x16	; 22
    eor     x1, x2          ;[061]
     ef6:	01 27       	eor	r16, r17
    bst     x1, USBMINUS    ;[062]
     ef8:	02 fb       	bst	r16, 2
    bld     shift, 5        ;[063]
     efa:	25 f9       	bld	r18, 5
    andi    shift, 0x3f     ;[064]
     efc:	2f 73       	andi	r18, 0x3F	; 63
    in      x1, USBIN       ;[065] <-- bit 6
     efe:	06 b3       	in	r16, 0x16	; 22
    breq    unstuff5        ;[066] *** unstuff escape
     f00:	b1 f0       	breq	.+44     	; 0xf2e <unstuff5>
    eor     phase, x1       ;[067]
     f02:	50 27       	eor	r21, r16
    eor     x2, x1          ;[068]
     f04:	10 27       	eor	r17, r16
    bst     x2, USBMINUS    ;[069]
     f06:	12 fb       	bst	r17, 2
    bld     shift, 6        ;[070]
     f08:	26 f9       	bld	r18, 6

00000f0a <didUnstuff6>:
didUnstuff6:                ;[   ]
    in      r0, USBIN       ;[071] <-- phase
     f0a:	06 b2       	in	r0, 0x16	; 22
    cpi     shift, 0x02     ;[072]
     f0c:	22 30       	cpi	r18, 0x02	; 2
    brlo    unstuff6        ;[073] *** unstuff escape
     f0e:	f0 f0       	brcs	.+60     	; 0xf4c <unstuff6>

00000f10 <didUnstuff5>:
didUnstuff5:                ;[   ]
    nop2                    ;[074]
     f10:	00 c0       	rjmp	.+0      	; 0xf12 <didUnstuff5+0x2>
;   [---]                   ;[075]
    in      x2, USBIN       ;[076] <-- bit 7
     f12:	16 b3       	in	r17, 0x16	; 22
    eor     x1, x2          ;[077]
     f14:	01 27       	eor	r16, r17
    bst     x1, USBMINUS    ;[078]
     f16:	02 fb       	bst	r16, 2
    bld     shift, 7        ;[079]
     f18:	27 f9       	bld	r18, 7

00000f1a <didUnstuff7>:
didUnstuff7:                ;[   ]
    eor     r0, x2          ;[080]
     f1a:	01 26       	eor	r0, r17
    or      phase, r0       ;[081]
     f1c:	50 29       	or	r21, r0
    in      r0, USBIN       ;[082] <-- phase
     f1e:	06 b2       	in	r0, 0x16	; 22
    cpi     shift, 0x04     ;[083]
     f20:	24 30       	cpi	r18, 0x04	; 4
    brsh    rxLoop          ;[084]
     f22:	e8 f5       	brcc	.+122    	; 0xf9e <rxLoop>

00000f24 <unstuff7>:
;   [---]                   ;[085]
unstuff7:                   ;[   ]
    andi    x3, ~0x80       ;[085]
     f24:	4f 77       	andi	r20, 0x7F	; 127
    ori     shift, 0x80     ;[086]
     f26:	20 68       	ori	r18, 0x80	; 128
    in      x2, USBIN       ;[087] <-- sample stuffed bit 7
     f28:	16 b3       	in	r17, 0x16	; 22
    nop                     ;[088]
     f2a:	00 00       	nop
    rjmp    didUnstuff7     ;[089]
     f2c:	f6 cf       	rjmp	.-20     	; 0xf1a <didUnstuff7>

00000f2e <unstuff5>:
;   [---]                   ;[090]
                            ;[080]

unstuff5:                   ;[067]
    eor     phase, x1       ;[068]
     f2e:	50 27       	eor	r21, r16
    andi    x3, ~0x20       ;[069]
     f30:	4f 7d       	andi	r20, 0xDF	; 223
    ori     shift, 0x20     ;[070]
     f32:	20 62       	ori	r18, 0x20	; 32
    in      r0, USBIN       ;[071] <-- phase
     f34:	06 b2       	in	r0, 0x16	; 22
    mov     x2, x1          ;[072]
     f36:	10 2f       	mov	r17, r16
    nop                     ;[073]
     f38:	00 00       	nop
    nop2                    ;[074]
     f3a:	00 c0       	rjmp	.+0      	; 0xf3c <unstuff5+0xe>
;   [---]                   ;[075]
    in      x1, USBIN       ;[076] <-- bit 6
     f3c:	06 b3       	in	r16, 0x16	; 22
    eor     r0, x1          ;[077]
     f3e:	00 26       	eor	r0, r16
    or      phase, r0       ;[078]
     f40:	50 29       	or	r21, r0
    eor     x2, x1          ;[079]
     f42:	10 27       	eor	r17, r16
    bst     x2, USBMINUS    ;[080]
     f44:	12 fb       	bst	r17, 2
    bld     shift, 6        ;[081] no need to check bitstuffing, we just had one
     f46:	26 f9       	bld	r18, 6
    in      r0, USBIN       ;[082] <-- phase
     f48:	06 b2       	in	r0, 0x16	; 22
    rjmp    didUnstuff5     ;[083]
     f4a:	e2 cf       	rjmp	.-60     	; 0xf10 <didUnstuff5>

00000f4c <unstuff6>:
;   [---]                   ;[084]
                            ;[074]

unstuff6:                   ;[074]
    andi    x3, ~0x40       ;[075]
     f4c:	4f 7b       	andi	r20, 0xBF	; 191
    in      x1, USBIN       ;[076] <-- bit 6 again
     f4e:	06 b3       	in	r16, 0x16	; 22
    ori     shift, 0x40     ;[077]
     f50:	20 64       	ori	r18, 0x40	; 64
    nop2                    ;[078]
     f52:	00 c0       	rjmp	.+0      	; 0xf54 <unstuff6+0x8>
;   [---]                   ;[079]
    rjmp    didUnstuff6     ;[080]
     f54:	da cf       	rjmp	.-76     	; 0xf0a <didUnstuff6>

00000f56 <unstuff0>:
;   [---]                   ;[081]
                            ;[071]

unstuff0:                   ;[013]
    eor     r0, x2          ;[014]
     f56:	01 26       	eor	r0, r17
    or      phase, r0       ;[015]
     f58:	50 29       	or	r21, r0
    andi    x2, USBMASK     ;[016] check for SE0
     f5a:	15 70       	andi	r17, 0x05	; 5
    in      r0, USBIN       ;[017] <-- phase
     f5c:	06 b2       	in	r0, 0x16	; 22
    breq    didUnstuff0     ;[018] direct jump to se0 would be too long
     f5e:	69 f1       	breq	.+90     	; 0xfba <didUnstuff0>
    andi    x3, ~0x01       ;[019]
     f60:	4e 7f       	andi	r20, 0xFE	; 254
    ori     shift, 0x01     ;[020]
     f62:	21 60       	ori	r18, 0x01	; 1
    mov     x1, x2          ;[021] mov existing sample
     f64:	01 2f       	mov	r16, r17
    in      x2, USBIN       ;[022] <-- bit 1 again
     f66:	16 b3       	in	r17, 0x16	; 22
    rjmp    didUnstuff0     ;[023]
     f68:	28 c0       	rjmp	.+80     	; 0xfba <didUnstuff0>

00000f6a <unstuff1>:
;   [---]                   ;[024]
                            ;[014]

unstuff1:                   ;[024]
    eor     r0, x1          ;[025]
     f6a:	00 26       	eor	r0, r16
    or      phase, r0       ;[026]
     f6c:	50 29       	or	r21, r0
    andi    x3, ~0x02       ;[027]
     f6e:	4d 7f       	andi	r20, 0xFD	; 253
    in      r0, USBIN       ;[028] <-- phase
     f70:	06 b2       	in	r0, 0x16	; 22
    ori     shift, 0x02     ;[029]
     f72:	22 60       	ori	r18, 0x02	; 2
    mov     x2, x1          ;[030]
     f74:	10 2f       	mov	r17, r16
    rjmp    didUnstuff1     ;[031]
     f76:	29 c0       	rjmp	.+82     	; 0xfca <didUnstuff1>

00000f78 <unstuff2>:
;   [---]                   ;[032]
                            ;[022]

unstuff2:                   ;[035]
    eor     r0, x2          ;[036]
     f78:	01 26       	eor	r0, r17
    or      phase, r0       ;[037]
     f7a:	50 29       	or	r21, r0
    andi    x3, ~0x04       ;[038]
     f7c:	4b 7f       	andi	r20, 0xFB	; 251
    in      r0, USBIN       ;[039] <-- phase
     f7e:	06 b2       	in	r0, 0x16	; 22
    ori     shift, 0x04     ;[040]
     f80:	24 60       	ori	r18, 0x04	; 4
    mov     x1, x2          ;[041]
     f82:	01 2f       	mov	r16, r17
    rjmp    didUnstuff2     ;[042]
     f84:	2d c0       	rjmp	.+90     	; 0xfe0 <didUnstuff2>

00000f86 <unstuff3>:
;   [---]                   ;[043]
                            ;[033]

unstuff3:                   ;[043]
    in      x2, USBIN       ;[044] <-- bit 3 again
     f86:	16 b3       	in	r17, 0x16	; 22
    eor     r0, x2          ;[045]
     f88:	01 26       	eor	r0, r17
    or      phase, r0       ;[046]
     f8a:	50 29       	or	r21, r0
    andi    x3, ~0x08       ;[047]
     f8c:	47 7f       	andi	r20, 0xF7	; 247
    ori     shift, 0x08     ;[048]
     f8e:	28 60       	ori	r18, 0x08	; 8
    nop                     ;[049]
     f90:	00 00       	nop
    in      r0, USBIN       ;[050] <-- phase
     f92:	06 b2       	in	r0, 0x16	; 22
    rjmp    didUnstuff3     ;[051]
     f94:	2e c0       	rjmp	.+92     	; 0xff2 <didUnstuff3>

00000f96 <unstuff4>:
;   [---]                   ;[052]
                            ;[042]

unstuff4:                   ;[053]
    andi    x3, ~0x10       ;[054]
     f96:	4f 7e       	andi	r20, 0xEF	; 239
    in      x1, USBIN       ;[055] <-- bit 4 again
     f98:	06 b3       	in	r16, 0x16	; 22
    ori     shift, 0x10     ;[056]
     f9a:	20 61       	ori	r18, 0x10	; 16
    rjmp    didUnstuff4     ;[057]
     f9c:	30 c0       	rjmp	.+96     	; 0xffe <didUnstuff4>

00000f9e <rxLoop>:
;   [---]                   ;[058]
                            ;[048]

rxLoop:                     ;[085]
    eor     x3, shift       ;[086] reconstruct: x3 is 0 at bit locations we changed, 1 at others
     f9e:	42 27       	eor	r20, r18
    in      x1, USBIN       ;[000] <-- bit 0
     fa0:	06 b3       	in	r16, 0x16	; 22
    st      y+, x3          ;[001]
     fa2:	49 93       	st	Y+, r20
;   [---]                   ;[002]
    eor     r0, x1          ;[003]
     fa4:	00 26       	eor	r0, r16
    or      phase, r0       ;[004]
     fa6:	50 29       	or	r21, r0
    eor     x2, x1          ;[005]
     fa8:	10 27       	eor	r17, r16
    in      r0, USBIN       ;[006] <-- phase
     faa:	06 b2       	in	r0, 0x16	; 22
    ser     x3              ;[007]
     fac:	4f ef       	ldi	r20, 0xFF	; 255
    bst     x2, USBMINUS    ;[008]
     fae:	12 fb       	bst	r17, 2
    bld     shift, 0        ;[009]
     fb0:	20 f9       	bld	r18, 0
    andi    shift, 0xf9     ;[010]
     fb2:	29 7f       	andi	r18, 0xF9	; 249

00000fb4 <rxbit1>:
rxbit1:                     ;[   ]
    in      x2, USBIN       ;[011] <-- bit 1
     fb4:	16 b3       	in	r17, 0x16	; 22
    breq    unstuff0        ;[012] *** unstuff escape
     fb6:	79 f2       	breq	.-98     	; 0xf56 <unstuff0>
    andi    x2, USBMASK     ;[013] SE0 check for bit 1
     fb8:	15 70       	andi	r17, 0x05	; 5

00000fba <didUnstuff0>:
didUnstuff0:                ;[   ] Z only set if we detected SE0 in bitstuff
    breq    se0             ;[014]
     fba:	59 f1       	breq	.+86     	; 0x1012 <se0>
    eor     r0, x2          ;[015]
     fbc:	01 26       	eor	r0, r17
    or      phase, r0       ;[016]
     fbe:	50 29       	or	r21, r0
    in      r0, USBIN       ;[017] <-- phase
     fc0:	06 b2       	in	r0, 0x16	; 22
    eor     x1, x2          ;[018]
     fc2:	01 27       	eor	r16, r17
    bst     x1, USBMINUS    ;[019]
     fc4:	02 fb       	bst	r16, 2
    bld     shift, 1        ;[020]
     fc6:	21 f9       	bld	r18, 1
    andi    shift, 0xf3     ;[021]
     fc8:	23 7f       	andi	r18, 0xF3	; 243

00000fca <didUnstuff1>:
didUnstuff1:                ;[   ]
    in      x1, USBIN       ;[022] <-- bit 2
     fca:	06 b3       	in	r16, 0x16	; 22
    breq    unstuff1        ;[023] *** unstuff escape
     fcc:	71 f2       	breq	.-100    	; 0xf6a <unstuff1>
    eor     r0, x1          ;[024]
     fce:	00 26       	eor	r0, r16
    or      phase, r0       ;[025]
     fd0:	50 29       	or	r21, r0
    subi    cnt, 1          ;[026] overflow check
     fd2:	31 50       	subi	r19, 0x01	; 1
    brcs    overflow        ;[027]
     fd4:	d0 f0       	brcs	.+52     	; 0x100a <overflow>
    in      r0, USBIN       ;[028] <-- phase
     fd6:	06 b2       	in	r0, 0x16	; 22
    eor     x2, x1          ;[029]
     fd8:	10 27       	eor	r17, r16
    bst     x2, USBMINUS    ;[030]
     fda:	12 fb       	bst	r17, 2
    bld     shift, 2        ;[031]
     fdc:	22 f9       	bld	r18, 2
    andi    shift, 0xe7     ;[032]
     fde:	27 7e       	andi	r18, 0xE7	; 231

00000fe0 <didUnstuff2>:
didUnstuff2:                ;[   ]
    in      x2, USBIN       ;[033] <-- bit 3
     fe0:	16 b3       	in	r17, 0x16	; 22
    breq    unstuff2        ;[034] *** unstuff escape
     fe2:	51 f2       	breq	.-108    	; 0xf78 <unstuff2>
    eor     r0, x2          ;[035]
     fe4:	01 26       	eor	r0, r17
    or      phase, r0       ;[036]
     fe6:	50 29       	or	r21, r0
    eor     x1, x2          ;[037]
     fe8:	01 27       	eor	r16, r17
    bst     x1, USBMINUS    ;[038]
     fea:	02 fb       	bst	r16, 2
    in      r0, USBIN       ;[039] <-- phase
     fec:	06 b2       	in	r0, 0x16	; 22
    bld     shift, 3        ;[040]
     fee:	23 f9       	bld	r18, 3
    andi    shift, 0xcf     ;[041]
     ff0:	2f 7c       	andi	r18, 0xCF	; 207

00000ff2 <didUnstuff3>:
didUnstuff3:                ;[   ]
    breq    unstuff3        ;[042] *** unstuff escape
     ff2:	49 f2       	breq	.-110    	; 0xf86 <unstuff3>
    nop                     ;[043]
     ff4:	00 00       	nop
    in      x1, USBIN       ;[044] <-- bit 4
     ff6:	06 b3       	in	r16, 0x16	; 22
    eor     x2, x1          ;[045]
     ff8:	10 27       	eor	r17, r16
    bst     x2, USBMINUS    ;[046]
     ffa:	12 fb       	bst	r17, 2
    bld     shift, 4        ;[047]
     ffc:	24 f9       	bld	r18, 4

00000ffe <didUnstuff4>:
didUnstuff4:                ;[   ]
    eor     r0, x1          ;[048]
     ffe:	00 26       	eor	r0, r16
    or      phase, r0       ;[049]
    1000:	50 29       	or	r21, r0
    in      r0, USBIN       ;[050] <-- phase
    1002:	06 b2       	in	r0, 0x16	; 22
    andi    shift, 0x9f     ;[051]
    1004:	2f 79       	andi	r18, 0x9F	; 159
    breq    unstuff4        ;[052] *** unstuff escape
    1006:	39 f2       	breq	.-114    	; 0xf96 <unstuff4>
    rjmp    continueWithBit5;[053]
    1008:	70 cf       	rjmp	.-288    	; 0xeea <continueWithBit5>

0000100a <overflow>:
*/

#define token   x1

overflow:
    ldi     x2, 1<<USB_INTR_PENDING_BIT
    100a:	10 e4       	ldi	r17, 0x40	; 64
    USB_STORE_PENDING(x2)       ; clear any pending interrupts
    100c:	1a bf       	out	0x3a, r17	; 58

0000100e <ignorePacket>:
ignorePacket:
    clr     token
    100e:	00 27       	eor	r16, r16
    rjmp    storeTokenAndReturn
    1010:	17 c0       	rjmp	.+46     	; 0x1040 <handleSetupOrOut>

00001012 <se0>:
; Processing of received packet (numbers in brackets are cycles after center of SE0)
;----------------------------------------------------------------------------
;This is the only non-error exit point for the software receiver loop
;we don't check any CRCs here because there is no time left.
se0:
    subi    cnt, USB_BUFSIZE    ;[5]
    1012:	3b 50       	subi	r19, 0x0B	; 11
    neg     cnt                 ;[6]
    1014:	31 95       	neg	r19
    sub     YL, cnt             ;[7]
    1016:	c3 1b       	sub	r28, r19
    sbci    YH, 0               ;[8]
    1018:	d0 40       	sbci	r29, 0x00	; 0
    ldi     x2, 1<<USB_INTR_PENDING_BIT ;[9]
    101a:	10 e4       	ldi	r17, 0x40	; 64
    USB_STORE_PENDING(x2)       ;[10] clear pending intr and check flag later. SE0 should be over.
    101c:	1a bf       	out	0x3a, r17	; 58
    ld      token, y            ;[11]
    101e:	08 81       	ld	r16, Y
    cpi     token, USBPID_DATA0 ;[13]
    1020:	03 3c       	cpi	r16, 0xC3	; 195
    breq    handleData          ;[14]
    1022:	f9 f0       	breq	.+62     	; 0x1062 <handleData>
    cpi     token, USBPID_DATA1 ;[15]
    1024:	0b 34       	cpi	r16, 0x4B	; 75
    breq    handleData          ;[16]
    1026:	e9 f0       	breq	.+58     	; 0x1062 <handleData>
    lds     shift, usbDeviceAddr;[17]
    1028:	20 91 d2 00 	lds	r18, 0x00D2
    ldd     x2, y+1             ;[19] ADDR and 1 bit endpoint number
    102c:	19 81       	ldd	r17, Y+1	; 0x01
    lsl     x2                  ;[21] shift out 1 bit endpoint number
    102e:	11 0f       	add	r17, r17
    cpse    x2, shift           ;[22]
    1030:	12 13       	cpse	r17, r18
    rjmp    ignorePacket        ;[23]
    1032:	ed cf       	rjmp	.-38     	; 0x100e <ignorePacket>
/* only compute endpoint number in x3 if required later */
#if USB_CFG_HAVE_INTRIN_ENDPOINT || USB_CFG_IMPLEMENT_FN_WRITEOUT
    ldd     x3, y+2             ;[24] endpoint number + crc
    rol     x3                  ;[26] shift in LSB of endpoint
#endif
    cpi     token, USBPID_IN    ;[27]
    1034:	09 36       	cpi	r16, 0x69	; 105
    breq    handleIn            ;[28]
    1036:	51 f1       	breq	.+84     	; 0x108c <handleIn>
    cpi     token, USBPID_SETUP ;[29]
    1038:	0d 32       	cpi	r16, 0x2D	; 45
    breq    handleSetupOrOut    ;[30]
    103a:	11 f0       	breq	.+4      	; 0x1040 <handleSetupOrOut>
    cpi     token, USBPID_OUT   ;[31]
    103c:	01 3e       	cpi	r16, 0xE1	; 225
    brne    ignorePacket        ;[32] must be ack, nak or whatever
    103e:	39 f7       	brne	.-50     	; 0x100e <ignorePacket>

00001040 <handleSetupOrOut>:
    andi    x3, 0xf             ;[32]
    breq    storeTokenAndReturn ;[33]
    mov     token, x3           ;[34] indicate that this is endpoint x OUT
#endif
storeTokenAndReturn:
    sts     usbCurrentTok, token;[35]
    1040:	00 93 d9 00 	sts	0x00D9, r16

00001044 <doReturn>:
doReturn:
    POP_STANDARD                ;[37] 12...16 cycles
    1044:	3f 91       	pop	r19
    1046:	5f 91       	pop	r21
    1048:	4f 91       	pop	r20
    104a:	1f 91       	pop	r17
    104c:	0f 91       	pop	r16
    104e:	2f 91       	pop	r18
    1050:	df 91       	pop	r29
    1052:	0f 90       	pop	r0
    USB_LOAD_PENDING(YL)        ;[49]
    1054:	ca b7       	in	r28, 0x3a	; 58
    sbrc    YL, USB_INTR_PENDING_BIT;[50] check whether data is already arriving
    1056:	c6 fd       	sbrc	r28, 6
    rjmp    waitForJ            ;[51] save the pops and pushes -- a new interrupt is already pending
    1058:	1d cf       	rjmp	.-454    	; 0xe94 <waitForJ>

0000105a <sofError>:
sofError:
    POP_RETI                    ;macro call
    105a:	cf 91       	pop	r28
    105c:	cf bf       	out	0x3f, r28	; 63
    105e:	cf 91       	pop	r28
    reti
    1060:	18 95       	reti

00001062 <handleData>:

handleData:
#if USB_CFG_CHECK_CRC
    CRC_CLEANUP_AND_CHECK       ; jumps to ignorePacket if CRC error
#endif
    lds     shift, usbCurrentTok;[18]
    1062:	20 91 d9 00 	lds	r18, 0x00D9
    tst     shift               ;[20]
    1066:	22 23       	and	r18, r18
    breq    doReturn            ;[21]
    1068:	69 f3       	breq	.-38     	; 0x1044 <doReturn>
    lds     x2, usbRxLen        ;[22]
    106a:	10 91 d7 00 	lds	r17, 0x00D7
    tst     x2                  ;[24]
    106e:	11 23       	and	r17, r17
    brne    sendNakAndReti      ;[25]
    1070:	21 f5       	brne	.+72     	; 0x10ba <sendNakAndReti>
; 2006-03-11: The following two lines fix a problem where the device was not
; recognized if usbPoll() was called less frequently than once every 4 ms.
    cpi     cnt, 4              ;[26] zero sized data packets are status phase only -- ignore and ack
    1072:	34 30       	cpi	r19, 0x04	; 4
    brmi    sendAckAndReti      ;[27] keep rx buffer clean -- we must not NAK next SETUP
    1074:	22 f1       	brmi	.+72     	; 0x10be <sendAckAndReti>
#if USB_CFG_CHECK_DATA_TOGGLING
    sts     usbCurrentDataToken, token  ; store for checking by C code
#endif
    sts     usbRxLen, cnt       ;[28] store received data, swap buffers
    1076:	30 93 d7 00 	sts	0x00D7, r19
    sts     usbRxToken, shift   ;[30]
    107a:	20 93 d3 00 	sts	0x00D3, r18
    lds     x2, usbInputBufOffset;[32] swap buffers
    107e:	10 91 d4 00 	lds	r17, 0x00D4
    ldi     cnt, USB_BUFSIZE    ;[34]
    1082:	3b e0       	ldi	r19, 0x0B	; 11
    sub     cnt, x2             ;[35]
    1084:	31 1b       	sub	r19, r17
    sts     usbInputBufOffset, cnt;[36] buffers now swapped
    1086:	30 93 d4 00 	sts	0x00D4, r19
    rjmp    sendAckAndReti      ;[38] 40 + 17 = 57 until SOP
    108a:	19 c0       	rjmp	.+50     	; 0x10be <sendAckAndReti>

0000108c <handleIn>:

handleIn:
;We don't send any data as long as the C code has not processed the current
;input data and potentially updated the output data. That's more efficient
;in terms of code size than clearing the tx buffers when a packet is received.
    lds     x1, usbRxLen        ;[30]
    108c:	00 91 d7 00 	lds	r16, 0x00D7
    cpi     x1, 1               ;[32] negative values are flow control, 0 means "buffer free"
    1090:	01 30       	cpi	r16, 0x01	; 1
    brge    sendNakAndReti      ;[33] unprocessed input packet?
    1092:	9c f4       	brge	.+38     	; 0x10ba <sendNakAndReti>
    ldi     x1, USBPID_NAK      ;[34] prepare value for usbTxLen
    1094:	0a e5       	ldi	r16, 0x5A	; 90
    brne    sendNakAndReti      ;[36]
#else
    brne    handleIn1           ;[36]
#endif
#endif
    lds     cnt, usbTxLen       ;[37]
    1096:	30 91 b0 00 	lds	r19, 0x00B0
    sbrc    cnt, 4              ;[39] all handshake tokens have bit 4 set
    109a:	34 fd       	sbrc	r19, 4
    rjmp    sendCntAndReti      ;[40] 42 + 16 = 58 until SOP
    109c:	11 c0       	rjmp	.+34     	; 0x10c0 <sendCntAndReti>
    sts     usbTxLen, x1        ;[41] x1 == USBPID_NAK from above
    109e:	00 93 b0 00 	sts	0x00B0, r16
    ldi     YL, lo8(usbTxBuf)   ;[43]
    10a2:	c7 ec       	ldi	r28, 0xC7	; 199
    ldi     YH, hi8(usbTxBuf)   ;[44]
    10a4:	d0 e0       	ldi	r29, 0x00	; 0
    rjmp    usbSendAndReti      ;[45] 57 + 12 = 59 until SOP
    10a6:	10 c0       	rjmp	.+32     	; 0x10c8 <usbSendAndReti>

000010a8 <bitstuff7>:
; J = (D+ = 0), (D- = 1)
; K = (D+ = 1), (D- = 0)
; Spec allows 7.5 bit times from EOP to SOP for replies

bitstuff7:
    eor     x1, x4          ;[4]
    10a8:	05 27       	eor	r16, r21
    ldi     x2, 0           ;[5]
    10aa:	10 e0       	ldi	r17, 0x00	; 0
    nop2                    ;[6] C is zero (brcc)
    10ac:	00 c0       	rjmp	.+0      	; 0x10ae <bitstuff7+0x6>
    rjmp    didStuff7       ;[8]
    10ae:	21 c0       	rjmp	.+66     	; 0x10f2 <didStuff7>

000010b0 <bitstuffN>:

bitstuffN:
    eor     x1, x4          ;[5]
    10b0:	05 27       	eor	r16, r21
    ldi     x2, 0           ;[6]
    10b2:	10 e0       	ldi	r17, 0x00	; 0
    lpm                     ;[7] 3 cycle NOP, modifies r0
    10b4:	c8 95       	lpm
    out     USBOUT, x1      ;[10] <-- out
    10b6:	08 bb       	out	0x18, r16	; 24
    rjmp    didStuffN       ;[0]
    10b8:	14 c0       	rjmp	.+40     	; 0x10e2 <didStuffN>

000010ba <sendNakAndReti>:

#define bitStatus   x3

sendNakAndReti:
    ldi     cnt, USBPID_NAK ;[-19]
    10ba:	3a e5       	ldi	r19, 0x5A	; 90
    rjmp    sendCntAndReti  ;[-18]
    10bc:	01 c0       	rjmp	.+2      	; 0x10c0 <sendCntAndReti>

000010be <sendAckAndReti>:
sendAckAndReti:
    ldi     cnt, USBPID_ACK ;[-17]
    10be:	32 ed       	ldi	r19, 0xD2	; 210

000010c0 <sendCntAndReti>:
sendCntAndReti:
    mov     r0, cnt         ;[-16]
    10c0:	03 2e       	mov	r0, r19
    ldi     YL, 0           ;[-15] R0 address is 0
    10c2:	c0 e0       	ldi	r28, 0x00	; 0
    ldi     YH, 0           ;[-14]
    10c4:	d0 e0       	ldi	r29, 0x00	; 0
    ldi     cnt, 2          ;[-13]
    10c6:	32 e0       	ldi	r19, 0x02	; 2

000010c8 <usbSendAndReti>:
;pointer to data in 'Y'
;number of bytes in 'cnt' -- including sync byte [range 2 ... 12]
;uses: x1...x4, shift, cnt, Y
;Numbers in brackets are time since first bit of sync pattern is sent
usbSendAndReti:             ; 12 cycles until SOP
    in      x2, USBDDR      ;[-12]
    10c8:	17 b3       	in	r17, 0x17	; 23
    ori     x2, USBMASK     ;[-11]
    10ca:	15 60       	ori	r17, 0x05	; 5
    sbi     USBOUT, USBMINUS;[-10] prepare idle state; D+ and D- must have been 0 (no pullups)
    10cc:	c2 9a       	sbi	0x18, 2	; 24
    in      x1, USBOUT      ;[-8] port mirror for tx loop
    10ce:	08 b3       	in	r16, 0x18	; 24
    out     USBDDR, x2      ;[-7] <- acquire bus
    10d0:	17 bb       	out	0x17, r17	; 23
; need not init x2 (bitstuff history) because sync starts with 0
    ldi     x4, USBMASK     ;[-6] exor mask
    10d2:	55 e0       	ldi	r21, 0x05	; 5
    ldi     shift, 0x80     ;[-5] sync byte is first byte sent
    10d4:	20 e8       	ldi	r18, 0x80	; 128
    ldi     bitStatus, 0xff ;[-4] init bit loop counter, works for up to 12 bytes
    10d6:	4f ef       	ldi	r20, 0xFF	; 255

000010d8 <bitloop>:
byteloop:
bitloop:
    sbrs    shift, 0        ;[8] [-3]
    10d8:	20 ff       	sbrs	r18, 0
    eor     x1, x4          ;[9] [-2]
    10da:	05 27       	eor	r16, r21
    out     USBOUT, x1      ;[10] [-1] <-- out
    10dc:	08 bb       	out	0x18, r16	; 24
    ror     shift           ;[0]
    10de:	27 95       	ror	r18
    ror     x2              ;[1]
    10e0:	17 95       	ror	r17

000010e2 <didStuffN>:
didStuffN:
    cpi     x2, 0xfc        ;[2]
    10e2:	1c 3f       	cpi	r17, 0xFC	; 252
    brcc    bitstuffN       ;[3]
    10e4:	28 f7       	brcc	.-54     	; 0x10b0 <bitstuffN>
    nop                     ;[4]
    10e6:	00 00       	nop
    subi    bitStatus, 37   ;[5] 256 / 7 ~=~ 37
    10e8:	45 52       	subi	r20, 0x25	; 37
    brcc    bitloop         ;[6] when we leave the loop, bitStatus has almost the initial value
    10ea:	b0 f7       	brcc	.-20     	; 0x10d8 <bitloop>
    sbrs    shift, 0        ;[7]
    10ec:	20 ff       	sbrs	r18, 0
    eor     x1, x4          ;[8]
    10ee:	05 27       	eor	r16, r21
    ror     shift           ;[9]
    10f0:	27 95       	ror	r18

000010f2 <didStuff7>:
didStuff7:
    out     USBOUT, x1      ;[10] <-- out
    10f2:	08 bb       	out	0x18, r16	; 24
    ror     x2              ;[0]
    10f4:	17 95       	ror	r17
    cpi     x2, 0xfc        ;[1]
    10f6:	1c 3f       	cpi	r17, 0xFC	; 252
    brcc    bitstuff7       ;[2]
    10f8:	b8 f6       	brcc	.-82     	; 0x10a8 <bitstuff7>
    ld      shift, y+       ;[3]
    10fa:	29 91       	ld	r18, Y+
    dec     cnt             ;[5]
    10fc:	3a 95       	dec	r19
    brne    byteloop        ;[6]
    10fe:	61 f7       	brne	.-40     	; 0x10d8 <bitloop>
;make SE0:
    cbr     x1, USBMASK     ;[7] prepare SE0 [spec says EOP may be 21 to 25 cycles]
    1100:	0a 7f       	andi	r16, 0xFA	; 250
    lds     x2, usbNewDeviceAddr;[8]
    1102:	10 91 d8 00 	lds	r17, 0x00D8
    lsl     x2              ;[10] we compare with left shifted address
    1106:	11 0f       	add	r17, r17
    out     USBOUT, x1      ;[11] <-- out SE0 -- from now 2 bits = 22 cycles until bus idle
    1108:	08 bb       	out	0x18, r16	; 24
;2006-03-06: moved transfer of new address to usbDeviceAddr from C-Code to asm:
;set address only after data packet was sent, not after handshake
    subi    YL, 2           ;[0] Only assign address on data packets, not ACK/NAK in r0
    110a:	c2 50       	subi	r28, 0x02	; 2
    sbci    YH, 0           ;[1]
    110c:	d0 40       	sbci	r29, 0x00	; 0
    breq    skipAddrAssign  ;[2]
    110e:	11 f0       	breq	.+4      	; 0x1114 <skipAddrAssign>
    sts     usbDeviceAddr, x2; if not skipped: SE0 is one cycle longer
    1110:	10 93 d2 00 	sts	0x00D2, r17

00001114 <skipAddrAssign>:
skipAddrAssign:
;end of usbDeviceAddress transfer
    ldi     x2, 1<<USB_INTR_PENDING_BIT;[4] int0 occurred during TX -- clear pending flag
    1114:	10 e4       	ldi	r17, 0x40	; 64
    USB_STORE_PENDING(x2)   ;[5]
    1116:	1a bf       	out	0x3a, r17	; 58
    ori     x1, USBIDLE     ;[6]
    1118:	04 60       	ori	r16, 0x04	; 4
    in      x2, USBDDR      ;[7]
    111a:	17 b3       	in	r17, 0x17	; 23
    cbr     x2, USBMASK     ;[8] set both pins to input
    111c:	1a 7f       	andi	r17, 0xFA	; 250
    mov     x3, x1          ;[9]
    111e:	40 2f       	mov	r20, r16
    cbr     x3, USBMASK     ;[10] configure no pullup on both pins
    1120:	4a 7f       	andi	r20, 0xFA	; 250
    ldi     x4, 4           ;[11]
    1122:	54 e0       	ldi	r21, 0x04	; 4

00001124 <se0Delay>:
se0Delay:
    dec     x4              ;[12] [15] [18] [21]
    1124:	5a 95       	dec	r21
    brne    se0Delay        ;[13] [16] [19] [22]
    1126:	f1 f7       	brne	.-4      	; 0x1124 <se0Delay>
    out     USBOUT, x1      ;[23] <-- out J (idle) -- end of SE0 (EOP signal)
    1128:	08 bb       	out	0x18, r16	; 24
    out     USBDDR, x2      ;[24] <-- release bus now
    112a:	17 bb       	out	0x17, r17	; 23
    out     USBOUT, x3      ;[25] <-- ensure no pull-up resistors are active
    112c:	48 bb       	out	0x18, r20	; 24
    rjmp    doReturn
    112e:	8a cf       	rjmp	.-236    	; 0x1044 <doReturn>

00001130 <__mulhi3>:
    1130:	55 27       	eor	r21, r21
    1132:	00 24       	eor	r0, r0

00001134 <__mulhi3_loop>:
    1134:	80 ff       	sbrs	r24, 0
    1136:	02 c0       	rjmp	.+4      	; 0x113c <__mulhi3_skip1>
    1138:	06 0e       	add	r0, r22
    113a:	57 1f       	adc	r21, r23

0000113c <__mulhi3_skip1>:
    113c:	66 0f       	add	r22, r22
    113e:	77 1f       	adc	r23, r23
    1140:	61 15       	cp	r22, r1
    1142:	71 05       	cpc	r23, r1
    1144:	21 f0       	breq	.+8      	; 0x114e <__mulhi3_exit>
    1146:	96 95       	lsr	r25
    1148:	87 95       	ror	r24
    114a:	00 97       	sbiw	r24, 0x00	; 0
    114c:	99 f7       	brne	.-26     	; 0x1134 <__mulhi3_loop>

0000114e <__mulhi3_exit>:
    114e:	95 2f       	mov	r25, r21
    1150:	80 2d       	mov	r24, r0
    1152:	08 95       	ret

00001154 <__mulsi3>:
    1154:	ff 27       	eor	r31, r31
    1156:	ee 27       	eor	r30, r30
    1158:	bb 27       	eor	r27, r27
    115a:	aa 27       	eor	r26, r26

0000115c <__mulsi3_loop>:
    115c:	60 ff       	sbrs	r22, 0
    115e:	04 c0       	rjmp	.+8      	; 0x1168 <__mulsi3_skip1>
    1160:	a2 0f       	add	r26, r18
    1162:	b3 1f       	adc	r27, r19
    1164:	e4 1f       	adc	r30, r20
    1166:	f5 1f       	adc	r31, r21

00001168 <__mulsi3_skip1>:
    1168:	22 0f       	add	r18, r18
    116a:	33 1f       	adc	r19, r19
    116c:	44 1f       	adc	r20, r20
    116e:	55 1f       	adc	r21, r21
    1170:	96 95       	lsr	r25
    1172:	87 95       	ror	r24
    1174:	77 95       	ror	r23
    1176:	67 95       	ror	r22
    1178:	89 f7       	brne	.-30     	; 0x115c <__mulsi3_loop>
    117a:	00 97       	sbiw	r24, 0x00	; 0
    117c:	76 07       	cpc	r23, r22
    117e:	71 f7       	brne	.-36     	; 0x115c <__mulsi3_loop>

00001180 <__mulsi3_exit>:
    1180:	cf 01       	movw	r24, r30
    1182:	bd 01       	movw	r22, r26
    1184:	08 95       	ret

00001186 <__udivmodhi4>:
    1186:	aa 1b       	sub	r26, r26
    1188:	bb 1b       	sub	r27, r27
    118a:	51 e1       	ldi	r21, 0x11	; 17
    118c:	07 c0       	rjmp	.+14     	; 0x119c <__udivmodhi4_ep>

0000118e <__udivmodhi4_loop>:
    118e:	aa 1f       	adc	r26, r26
    1190:	bb 1f       	adc	r27, r27
    1192:	a6 17       	cp	r26, r22
    1194:	b7 07       	cpc	r27, r23
    1196:	10 f0       	brcs	.+4      	; 0x119c <__udivmodhi4_ep>
    1198:	a6 1b       	sub	r26, r22
    119a:	b7 0b       	sbc	r27, r23

0000119c <__udivmodhi4_ep>:
    119c:	88 1f       	adc	r24, r24
    119e:	99 1f       	adc	r25, r25
    11a0:	5a 95       	dec	r21
    11a2:	a9 f7       	brne	.-22     	; 0x118e <__udivmodhi4_loop>
    11a4:	80 95       	com	r24
    11a6:	90 95       	com	r25
    11a8:	bc 01       	movw	r22, r24
    11aa:	cd 01       	movw	r24, r26
    11ac:	08 95       	ret

000011ae <__eerd_block_tn85>:
    11ae:	dc 01       	movw	r26, r24
    11b0:	cb 01       	movw	r24, r22

000011b2 <__eerd_blraw_tn85>:
    11b2:	fc 01       	movw	r30, r24
    11b4:	e1 99       	sbic	0x1c, 1	; 28
    11b6:	fe cf       	rjmp	.-4      	; 0x11b4 <__eerd_blraw_tn85+0x2>
    11b8:	06 c0       	rjmp	.+12     	; 0x11c6 <__eerd_blraw_tn85+0x14>
    11ba:	ff bb       	out	0x1f, r31	; 31
    11bc:	ee bb       	out	0x1e, r30	; 30
    11be:	e0 9a       	sbi	0x1c, 0	; 28
    11c0:	31 96       	adiw	r30, 0x01	; 1
    11c2:	0d b2       	in	r0, 0x1d	; 29
    11c4:	0d 92       	st	X+, r0
    11c6:	41 50       	subi	r20, 0x01	; 1
    11c8:	50 40       	sbci	r21, 0x00	; 0
    11ca:	b8 f7       	brcc	.-18     	; 0x11ba <__eerd_blraw_tn85+0x8>
    11cc:	08 95       	ret

000011ce <__eerd_byte_tn85>:
    11ce:	e1 99       	sbic	0x1c, 1	; 28
    11d0:	fe cf       	rjmp	.-4      	; 0x11ce <__eerd_byte_tn85>
    11d2:	9f bb       	out	0x1f, r25	; 31
    11d4:	8e bb       	out	0x1e, r24	; 30
    11d6:	e0 9a       	sbi	0x1c, 0	; 28
    11d8:	99 27       	eor	r25, r25
    11da:	8d b3       	in	r24, 0x1d	; 29
    11dc:	08 95       	ret

000011de <__eewr_block_tn85>:
    11de:	dc 01       	movw	r26, r24
    11e0:	cb 01       	movw	r24, r22
    11e2:	02 c0       	rjmp	.+4      	; 0x11e8 <__eewr_block_tn85+0xa>
    11e4:	2d 91       	ld	r18, X+
    11e6:	05 d0       	rcall	.+10     	; 0x11f2 <__eewr_r18_tn85>
    11e8:	41 50       	subi	r20, 0x01	; 1
    11ea:	50 40       	sbci	r21, 0x00	; 0
    11ec:	d8 f7       	brcc	.-10     	; 0x11e4 <__eewr_block_tn85+0x6>
    11ee:	08 95       	ret

000011f0 <__eewr_byte_tn85>:
    11f0:	26 2f       	mov	r18, r22

000011f2 <__eewr_r18_tn85>:
    11f2:	e1 99       	sbic	0x1c, 1	; 28
    11f4:	fe cf       	rjmp	.-4      	; 0x11f2 <__eewr_r18_tn85>
    11f6:	1c ba       	out	0x1c, r1	; 28
    11f8:	9f bb       	out	0x1f, r25	; 31
    11fa:	8e bb       	out	0x1e, r24	; 30
    11fc:	2d bb       	out	0x1d, r18	; 29
    11fe:	0f b6       	in	r0, 0x3f	; 63
    1200:	f8 94       	cli
    1202:	e2 9a       	sbi	0x1c, 2	; 28
    1204:	e1 9a       	sbi	0x1c, 1	; 28
    1206:	0f be       	out	0x3f, r0	; 63
    1208:	01 96       	adiw	r24, 0x01	; 1
    120a:	08 95       	ret

0000120c <__eewr_word_tn85>:
    120c:	f1 df       	rcall	.-30     	; 0x11f0 <__eewr_byte_tn85>
    120e:	27 2f       	mov	r18, r23
    1210:	f0 cf       	rjmp	.-32     	; 0x11f2 <__eewr_r18_tn85>

00001212 <_exit>:
    1212:	f8 94       	cli

00001214 <__stop_program>:
    1214:	ff cf       	rjmp	.-2      	; 0x1214 <__stop_program>
