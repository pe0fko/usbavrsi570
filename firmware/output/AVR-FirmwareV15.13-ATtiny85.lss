
AVR-FirmwareV15.13-ATtiny85.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001180  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000004e  00800060  00001180  00001234  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000003f  008000ae  008000ae  00001282  2**0
                  ALLOC
  3 .eeprom       00000039  00810000  00810000  00001282  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .debug_aranges 000000c8  00000000  00000000  000012c0  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000044c  00000000  00000000  00001388  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001d41  00000000  00000000  000017d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a4a  00000000  00000000  00003515  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001387  00000000  00000000  00003f5f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001f0  00000000  00000000  000052e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000792  00000000  00000000  000054d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000aff  00000000  00000000  00005c6a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  00006769  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	3a c0       	rjmp	.+116    	; 0x76 <__ctors_end>
       2:	d4 c5       	rjmp	.+2984   	; 0xbac <__vector_1>
       4:	5d c0       	rjmp	.+186    	; 0xc0 <__bad_interrupt>
       6:	5c c0       	rjmp	.+184    	; 0xc0 <__bad_interrupt>
       8:	5b c0       	rjmp	.+182    	; 0xc0 <__bad_interrupt>
       a:	5a c0       	rjmp	.+180    	; 0xc0 <__bad_interrupt>
       c:	59 c0       	rjmp	.+178    	; 0xc0 <__bad_interrupt>
       e:	58 c0       	rjmp	.+176    	; 0xc0 <__bad_interrupt>
      10:	57 c0       	rjmp	.+174    	; 0xc0 <__bad_interrupt>
      12:	56 c0       	rjmp	.+172    	; 0xc0 <__bad_interrupt>
      14:	55 c0       	rjmp	.+170    	; 0xc0 <__bad_interrupt>
      16:	54 c0       	rjmp	.+168    	; 0xc0 <__bad_interrupt>
      18:	53 c0       	rjmp	.+166    	; 0xc0 <__bad_interrupt>
      1a:	52 c0       	rjmp	.+164    	; 0xc0 <__bad_interrupt>
      1c:	51 c0       	rjmp	.+162    	; 0xc0 <__bad_interrupt>

0000001e <usbDescriptorString0>:
      1e:	04 03 09 04                                         ....

00000022 <usbDescriptorStringVendor>:
      22:	1a 03 77 00 77 00 77 00 2e 00 6f 00 62 00 64 00     ..w.w.w...o.b.d.
      32:	65 00 76 00 2e 00 61 00 74 00                       e.v...a.t.

0000003c <usbDescriptorStringDevice>:
      3c:	16 03 44 00 47 00 38 00 53 00 41 00 51 00 2d 00     ..D.G.8.S.A.Q.-.
      4c:	49 00 32 00 43 00                                   I.2.C.

00000052 <usbDescriptorDevice>:
      52:	12 01 10 01 ff 00 00 08 c0 16 dc 05 00 01 01 02     ................
      62:	03 01                                               ..

00000064 <usbDescriptorConfiguration>:
      64:	09 02 12 00 01 01 00 80 0a 09 04 00 00 00 00 00     ................
	...

00000076 <__ctors_end>:
      76:	11 24       	eor	r1, r1
      78:	1f be       	out	0x3f, r1	; 63
      7a:	cf e5       	ldi	r28, 0x5F	; 95
      7c:	d2 e0       	ldi	r29, 0x02	; 2
      7e:	de bf       	out	0x3e, r29	; 62
      80:	cd bf       	out	0x3d, r28	; 61

00000082 <dotInit3>:
// The watchdog will need to be reset (<16ms). Fast (div 2K) prescaler after watchdog reset!
// MCUSR must be cleared (datasheet) it is not done within the wdt_disable().
void __attribute__((naked))
     __attribute__((section(".init3")))
dotInit3(void)
{
      82:	14 be       	out	0x34, r1	; 52
	MCUSR = 0;
	wdt_disable();
      84:	88 e1       	ldi	r24, 0x18	; 24
      86:	0f b6       	in	r0, 0x3f	; 63
      88:	f8 94       	cli
      8a:	81 bd       	out	0x21, r24	; 33
      8c:	11 bc       	out	0x21, r1	; 33
      8e:	0f be       	out	0x3f, r0	; 63

	IO_DDR = _BV(IO_P1);		// All port pins inputs except IO_P1 switching output
      90:	80 e1       	ldi	r24, 0x10	; 16
      92:	87 bb       	out	0x17, r24	; 23
	IO_PORT = 0;				// Inp on startup, no pullups
      94:	18 ba       	out	0x18, r1	; 24

00000096 <__do_copy_data>:
      96:	10 e0       	ldi	r17, 0x00	; 0
      98:	a0 e6       	ldi	r26, 0x60	; 96
      9a:	b0 e0       	ldi	r27, 0x00	; 0
      9c:	e0 e8       	ldi	r30, 0x80	; 128
      9e:	f1 e1       	ldi	r31, 0x11	; 17
      a0:	02 c0       	rjmp	.+4      	; 0xa6 <.do_copy_data_start>

000000a2 <.do_copy_data_loop>:
      a2:	05 90       	lpm	r0, Z+
      a4:	0d 92       	st	X+, r0

000000a6 <.do_copy_data_start>:
      a6:	ae 3a       	cpi	r26, 0xAE	; 174
      a8:	b1 07       	cpc	r27, r17
      aa:	d9 f7       	brne	.-10     	; 0xa2 <.do_copy_data_loop>

000000ac <__do_clear_bss>:
      ac:	10 e0       	ldi	r17, 0x00	; 0
      ae:	ae ea       	ldi	r26, 0xAE	; 174
      b0:	b0 e0       	ldi	r27, 0x00	; 0
      b2:	01 c0       	rjmp	.+2      	; 0xb6 <.do_clear_bss_start>

000000b4 <.do_clear_bss_loop>:
      b4:	1d 92       	st	X+, r1

000000b6 <.do_clear_bss_start>:
      b6:	ad 3e       	cpi	r26, 0xED	; 237
      b8:	b1 07       	cpc	r27, r17
      ba:	e1 f7       	brne	.-8      	; 0xb4 <.do_clear_bss_loop>
      bc:	16 d0       	rcall	.+44     	; 0xea <main>
      be:	5e c8       	rjmp	.-3908   	; 0xfffff17c <__eeprom_end+0xff7ef143>

000000c0 <__bad_interrupt>:
      c0:	00 c0       	rjmp	.+0      	; 0xc2 <__vector_default>

000000c2 <__vector_default>:

				Si570_t		Si570_Data;			// Si570 register values
				sint16_t	replyBuf[4];		// USB Reply buffer
static	uint8_t			bIndex;

EMPTY_INTERRUPT( __vector_default );			// Redirect all unused interrupts to reti
      c2:	18 95       	reti

000000c4 <GetTemperature>:
GetTemperature()
{
	uint16_t temp;

	// Ref 1.1V, MUX=ADC4 temperature
	ADMUX = (1<<REFS1)|15;
      c4:	8f e8       	ldi	r24, 0x8F	; 143
      c6:	87 b9       	out	0x07, r24	; 7
	ADCSRA = (1<<ADEN)|(1<<ADSC)|(7<<ADPS0);
      c8:	87 ec       	ldi	r24, 0xC7	; 199
      ca:	86 b9       	out	0x06, r24	; 6

	while(ADCSRA & _BV(ADSC)) {}
      cc:	36 99       	sbic	0x06, 6	; 6
      ce:	fe cf       	rjmp	.-4      	; 0xcc <GetTemperature+0x8>
	temp = ((ADC - 270) * (6 * (1<<4))) / 7;
      d0:	84 b1       	in	r24, 0x04	; 4
      d2:	95 b1       	in	r25, 0x05	; 5

	ADCSRA = (0<<ADEN);
      d4:	16 b8       	out	0x06, r1	; 6
      d6:	60 e6       	ldi	r22, 0x60	; 96
      d8:	70 e0       	ldi	r23, 0x00	; 0
      da:	e2 d7       	rcall	.+4036   	; 0x10a0 <__mulhi3>
      dc:	80 54       	subi	r24, 0x40	; 64
      de:	95 46       	sbci	r25, 0x65	; 101
      e0:	67 e0       	ldi	r22, 0x07	; 7
      e2:	70 e0       	ldi	r23, 0x00	; 0
      e4:	08 d8       	rcall	.-4080   	; 0xfffff0f6 <__eeprom_end+0xff7ef0bd>
      e6:	cb 01       	movw	r24, r22
//	temp *= 6 * (1<<4);
//	temp /= 7;
//	temp = ((temp - 270) * (6 * (1<<4))) / 7;

	return temp;
}
      e8:	08 95       	ret

000000ea <main>:
int __attribute__((naked)) 
main(void)
{

	// Check if eeprom is initialized, use only the field ChipCrtlData.
	if (eeprom_read_byte(&E.ChipCrtlData) == 0xFF)
      ea:	88 e3       	ldi	r24, 0x38	; 56
      ec:	90 e0       	ldi	r25, 0x00	; 0
      ee:	27 d8       	rcall	.-4018   	; 0xfffff13e <__eeprom_end+0xff7ef105>
      f0:	8f 3f       	cpi	r24, 0xFF	; 255
      f2:	41 f4       	brne	.+16     	; 0x104 <main+0x1a>
		eeprom_write_block(&R, &E, sizeof(E));	// Initialize eeprom to "factory defaults".
      f4:	80 e6       	ldi	r24, 0x60	; 96
      f6:	90 e0       	ldi	r25, 0x00	; 0
      f8:	60 e0       	ldi	r22, 0x00	; 0
      fa:	70 e0       	ldi	r23, 0x00	; 0
      fc:	49 e3       	ldi	r20, 0x39	; 57
      fe:	50 e0       	ldi	r21, 0x00	; 0
     100:	26 d8       	rcall	.-4020   	; 0xfffff14e <__eeprom_end+0xff7ef115>
     102:	07 c0       	rjmp	.+14     	; 0x112 <main+0x28>
	else
		eeprom_read_block(&R, &E, sizeof(E));	// Load the persistend data from eeprom.
     104:	80 e6       	ldi	r24, 0x60	; 96
     106:	90 e0       	ldi	r25, 0x00	; 0
     108:	60 e0       	ldi	r22, 0x00	; 0
     10a:	70 e0       	ldi	r23, 0x00	; 0
     10c:	49 e3       	ldi	r20, 0x39	; 57
     10e:	50 e0       	ldi	r21, 0x00	; 0
     110:	06 d8       	rcall	.-4084   	; 0xfffff11e <__eeprom_end+0xff7ef0e5>

	if(R.RC_OSCCAL != 0xFF)
     112:	80 91 60 00 	lds	r24, 0x0060
     116:	8f 3f       	cpi	r24, 0xFF	; 255
     118:	09 f0       	breq	.+2      	; 0x11c <main+0x32>
		OSCCAL = R.RC_OSCCAL;
     11a:	81 bf       	out	0x31, r24	; 49

	SI570_OffLine = true;						// Si570 is offline, not initialized
     11c:	77 24       	eor	r7, r7
     11e:	73 94       	inc	r7

#if INCLUDE_SN
	// Update the USB SerialNumber string with the correct ID from eprom.
	usbDescriptorStringSerialNumber[
     120:	80 91 97 00 	lds	r24, 0x0097
     124:	80 93 a9 00 	sts	0x00A9, r24
     128:	10 92 aa 00 	sts	0x00AA, r1
		sizeof(usbDescriptorStringSerialNumber)/sizeof(int)-1] = R.SerialNumber;
#endif

	DeviceInit();								// Initialize the Si570 device.
     12c:	f9 d4       	rcall	.+2546   	; 0xb20 <DeviceInit>
     12e:	88 ee       	ldi	r24, 0xE8	; 232
     130:	93 e0       	ldi	r25, 0x03	; 3
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     132:	2c e9       	ldi	r18, 0x9C	; 156
     134:	31 e0       	ldi	r19, 0x01	; 1
     136:	f9 01       	movw	r30, r18
     138:	31 97       	sbiw	r30, 0x01	; 1
     13a:	f1 f7       	brne	.-4      	; 0x138 <main+0x4e>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     13c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     13e:	d9 f7       	brne	.-10     	; 0x136 <main+0x4c>

	// Start USB enumeration
	_delay_ms(100);								// First wait USB connection is stable
	usbDeviceDisconnect();
     140:	ba 9a       	sbi	0x17, 2	; 23
     142:	80 ea       	ldi	r24, 0xA0	; 160
     144:	9f e0       	ldi	r25, 0x0F	; 15
     146:	2c e9       	ldi	r18, 0x9C	; 156
     148:	31 e0       	ldi	r19, 0x01	; 1
     14a:	f9 01       	movw	r30, r18
     14c:	31 97       	sbiw	r30, 0x01	; 1
     14e:	f1 f7       	brne	.-4      	; 0x14c <main+0x62>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     150:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     152:	d9 f7       	brne	.-10     	; 0x14a <main+0x60>
	_delay_ms(400);
	usbDeviceConnect();
     154:	ba 98       	cbi	0x17, 2	; 23

	wdt_enable(WDTO_250MS);						// Watchdog 250ms
     156:	2c e0       	ldi	r18, 0x0C	; 12
     158:	88 e1       	ldi	r24, 0x18	; 24
     15a:	90 e0       	ldi	r25, 0x00	; 0
     15c:	0f b6       	in	r0, 0x3f	; 63
     15e:	f8 94       	cli
     160:	a8 95       	wdr
     162:	81 bd       	out	0x21, r24	; 33
     164:	0f be       	out	0x3f, r0	; 63
     166:	21 bd       	out	0x21, r18	; 33

	usbInit();									// Init the USB used ports
     168:	72 d6       	rcall	.+3300   	; 0xe4e <usbInit>

	sei();										// Enable interupts
     16a:	78 94       	sei

	while(true)
	{
	    wdt_reset();
     16c:	a8 95       	wdr
	    usbPoll();
     16e:	76 d6       	rcall	.+3308   	; 0xe5c <usbPoll>

#if  INCLUDE_SI570
		DeviceInit();
     170:	d7 d4       	rcall	.+2478   	; 0xb20 <DeviceInit>
     172:	fc cf       	rjmp	.-8      	; 0x16c <main+0x82>

00000174 <usbFunctionSetup>:
}


usbMsgLen_t 
usbFunctionSetup(uchar data[8])
{
     174:	ff 92       	push	r15
     176:	0f 93       	push	r16
     178:	1f 93       	push	r17
     17a:	dc 01       	movw	r26, r24
	usbRequest_t* rq = (usbRequest_t*)data;
	usbRequest = rq->bRequest;
     17c:	11 96       	adiw	r26, 0x01	; 1
     17e:	2c 91       	ld	r18, X
     180:	11 97       	sbiw	r26, 0x01	; 1
     182:	62 2e       	mov	r6, r18

    usbMsgPtr = (uchar*)replyBuf;
     184:	87 eb       	ldi	r24, 0xB7	; 183
     186:	90 e0       	ldi	r25, 0x00	; 0
     188:	90 93 d2 00 	sts	0x00D2, r25
     18c:	80 93 d1 00 	sts	0x00D1, r24
	replyBuf[0].b0 = 0xff;						// return value 0xff => command not supported 
     190:	8f ef       	ldi	r24, 0xFF	; 255
     192:	80 93 b7 00 	sts	0x00B7, r24


	SWITCH_START(usbRequest)


	SWITCH_CASE(CMD_GET_VERSION)				// Return software version number
     196:	22 23       	and	r18, r18
     198:	19 f4       	brne	.+6      	; 0x1a0 <usbFunctionSetup+0x2c>
		replyBuf[0].w = (VERSION_MAJOR<<8)|(VERSION_MINOR);
     19a:	8d e0       	ldi	r24, 0x0D	; 13
     19c:	9f e0       	ldi	r25, 0x0F	; 15
     19e:	3c c0       	rjmp	.+120    	; 0x218 <usbFunctionSetup+0xa4>
//		replyBuf[0].w = rq->wValue.word;		// rq->bRequest identical data[1]!
//		return sizeof(uint16_t);


#if  INCLUDE_NOT_USED
	SWITCH_CASE(CMD_SET_DDR)					// set port directions
     1a0:	21 30       	cpi	r18, 0x01	; 1
     1a2:	29 f4       	brne	.+10     	; 0x1ae <usbFunctionSetup+0x3a>
		IO_DDR = data[2] & 
     1a4:	12 96       	adiw	r26, 0x02	; 2
     1a6:	8c 91       	ld	r24, X
     1a8:	8a 7f       	andi	r24, 0xFA	; 250
     1aa:	87 bb       	out	0x17, r24	; 23
     1ac:	2c c1       	rjmp	.+600    	; 0x406 <__stack+0x1a7>
		return 0;
#endif


#if  INCLUDE_NOT_USED
	SWITCH_CASE(CMD_GET_PIN)					// read ports (pe0fko changed)
     1ae:	22 30       	cpi	r18, 0x02	; 2
     1b0:	11 f4       	brne	.+4      	; 0x1b6 <usbFunctionSetup+0x42>
		replyBuf[0].b0 = IO_PIN;
     1b2:	86 b3       	in	r24, 0x16	; 22
     1b4:	25 c1       	rjmp	.+586    	; 0x400 <__stack+0x1a1>
		return sizeof(uint8_t);
#endif


#if  INCLUDE_NOT_USED
	SWITCH_CASE(CMD_GET_PORT)					// read port states 
     1b6:	23 30       	cpi	r18, 0x03	; 3
     1b8:	11 f4       	brne	.+4      	; 0x1be <usbFunctionSetup+0x4a>
		replyBuf[0].b0 = IO_PORT;
     1ba:	88 b3       	in	r24, 0x18	; 24
     1bc:	21 c1       	rjmp	.+578    	; 0x400 <__stack+0x1a1>
		return sizeof(uint8_t);


	SWITCH_CASE(CMD_SET_PORT)					// set ports 
     1be:	24 30       	cpi	r18, 0x04	; 4
     1c0:	51 f4       	brne	.+20     	; 0x1d6 <usbFunctionSetup+0x62>
#if  INCLUDE_ABPF | INCLUDE_IBPF
		if (!FilterCrossOverOn)
     1c2:	80 91 71 00 	lds	r24, 0x0071
     1c6:	88 23       	and	r24, r24
     1c8:	09 f0       	breq	.+2      	; 0x1cc <usbFunctionSetup+0x58>
     1ca:	1d c1       	rjmp	.+570    	; 0x406 <__stack+0x1a7>
#endif
		{
			IO_PORT = data[2] & 
     1cc:	12 96       	adiw	r26, 0x02	; 2
     1ce:	8c 91       	ld	r24, X
     1d0:	8a 7f       	andi	r24, 0xFA	; 250
     1d2:	88 bb       	out	0x18, r24	; 24
     1d4:	18 c1       	rjmp	.+560    	; 0x406 <__stack+0x1a7>
		}
		return 0;
#endif


	SWITCH_CASE(CMD_REBOOT)						// Watchdog reset
     1d6:	2f 30       	cpi	r18, 0x0F	; 15
     1d8:	09 f4       	brne	.+2      	; 0x1dc <usbFunctionSetup+0x68>
     1da:	ff cf       	rjmp	.-2      	; 0x1da <usbFunctionSetup+0x66>
		while(true) ;


	SWITCH_CASE(CMD_SET_IO)						// Set IO port with mask and data bytes
     1dc:	25 31       	cpi	r18, 0x15	; 21
     1de:	11 f5       	brne	.+68     	; 0x224 <usbFunctionSetup+0xb0>
#if  INCLUDE_ABPF | INCLUDE_IBPF
		if (!FilterCrossOverOn)
     1e0:	80 91 71 00 	lds	r24, 0x0071
     1e4:	88 23       	and	r24, r24
     1e6:	91 f4       	brne	.+36     	; 0x20c <usbFunctionSetup+0x98>
#endif
		{	// SoftRock V9 only had 2 I/O pins from tiny45 available.
			uint8_t msk,dat;		
			msk = (rq->wValue.bytes[0] << IO_BIT_START) & (IO_BIT_MASK << IO_BIT_START);
			dat = (rq->wIndex.bytes[0] << IO_BIT_START) & (IO_BIT_MASK << IO_BIT_START);
			IO_DDR  = (IO_DDR & ~(IO_BIT_MASK << IO_BIT_START)) | msk;
     1e8:	87 b3       	in	r24, 0x17	; 23
     1ea:	12 96       	adiw	r26, 0x02	; 2
     1ec:	9c 91       	ld	r25, X
     1ee:	12 97       	sbiw	r26, 0x02	; 2
     1f0:	92 95       	swap	r25
     1f2:	90 73       	andi	r25, 0x30	; 48
     1f4:	8f 7c       	andi	r24, 0xCF	; 207
     1f6:	89 2b       	or	r24, r25
     1f8:	87 bb       	out	0x17, r24	; 23
			IO_PORT = (IO_PORT & ~msk) | dat;
     1fa:	88 b3       	in	r24, 0x18	; 24
     1fc:	90 95       	com	r25
     1fe:	98 23       	and	r25, r24
     200:	14 96       	adiw	r26, 0x04	; 4
     202:	8c 91       	ld	r24, X
     204:	82 95       	swap	r24
     206:	80 73       	andi	r24, 0x30	; 48
     208:	98 2b       	or	r25, r24
     20a:	98 bb       	out	0x18, r25	; 24
		}
		// Return I/O pin's
		replyBuf[0].w = (IO_PIN>>IO_BIT_START) & IO_BIT_MASK;
     20c:	86 b3       	in	r24, 0x16	; 22
     20e:	82 95       	swap	r24
     210:	8f 70       	andi	r24, 0x0F	; 15
     212:	90 e0       	ldi	r25, 0x00	; 0
     214:	83 70       	andi	r24, 0x03	; 3
     216:	90 70       	andi	r25, 0x00	; 0
     218:	90 93 b8 00 	sts	0x00B8, r25
     21c:	80 93 b7 00 	sts	0x00B7, r24
     220:	82 e0       	ldi	r24, 0x02	; 2
     222:	f4 c0       	rjmp	.+488    	; 0x40c <__stack+0x1ad>
        return sizeof(uint16_t);

	SWITCH_CASE(CMD_GET_IO)						// Read I/O bits
     224:	26 31       	cpi	r18, 0x16	; 22
     226:	91 f3       	breq	.-28     	; 0x20c <usbFunctionSetup+0x98>
		replyBuf[0].w = (IO_PIN>>IO_BIT_START) & IO_BIT_MASK;
        return sizeof(uint16_t);


#if  INCLUDE_ABPF | INCLUDE_IBPF
	SWITCH_CASE(CMD_SET_FILTER)					// Read and Write the Filter Cross over point's and use it.
     228:	27 31       	cpi	r18, 0x17	; 23
     22a:	41 f5       	brne	.+80     	; 0x27c <__stack+0x1d>
		uint8_t index = rq->wIndex.bytes[0];
     22c:	14 96       	adiw	r26, 0x04	; 4
     22e:	6c 91       	ld	r22, X
     230:	14 97       	sbiw	r26, 0x04	; 4

		if (rq->wIndex.bytes[1] == 0) {
     232:	15 96       	adiw	r26, 0x05	; 5
     234:	8c 91       	ld	r24, X
     236:	15 97       	sbiw	r26, 0x05	; 5
     238:	88 23       	and	r24, r24
     23a:	09 f0       	breq	.+2      	; 0x23e <usbFunctionSetup+0xca>
     23c:	e4 c0       	rjmp	.+456    	; 0x406 <__stack+0x1a7>
			// RX Filter cross over point table.

			if (index < 4)
     23e:	64 30       	cpi	r22, 0x04	; 4
     240:	b0 f4       	brcc	.+44     	; 0x26e <__stack+0xf>
			{
				R.FilterCrossOver[index].w = rq->wValue.word;
     242:	70 e0       	ldi	r23, 0x00	; 0
     244:	66 0f       	add	r22, r22
     246:	77 1f       	adc	r23, r23
     248:	fb 01       	movw	r30, r22
     24a:	e0 5a       	subi	r30, 0xA0	; 160
     24c:	ff 4f       	sbci	r31, 0xFF	; 255
     24e:	12 96       	adiw	r26, 0x02	; 2
     250:	8d 91       	ld	r24, X+
     252:	9c 91       	ld	r25, X
     254:	13 97       	sbiw	r26, 0x03	; 3
     256:	94 87       	std	Z+12, r25	; 0x0c
     258:	83 87       	std	Z+11, r24	; 0x0b

				eeprom_write_block(&R.FilterCrossOver[index].w, 
     25a:	65 5f       	subi	r22, 0xF5	; 245
     25c:	7f 4f       	sbci	r23, 0xFF	; 255
     25e:	cb 01       	movw	r24, r22
     260:	80 5a       	subi	r24, 0xA0	; 160
     262:	9f 4f       	sbci	r25, 0xFF	; 255
     264:	60 50       	subi	r22, 0x00	; 0
     266:	70 40       	sbci	r23, 0x00	; 0
     268:	42 e0       	ldi	r20, 0x02	; 2
     26a:	50 e0       	ldi	r21, 0x00	; 0
     26c:	70 d7       	rcall	.+3808   	; 0x114e <__eewr_block_tn85>
						&E.FilterCrossOver[index].w, 
						sizeof(E.FilterCrossOver[0].w));
			}

			usbMsgPtr = (uint8_t*)&R.FilterCrossOver;
     26e:	8b e6       	ldi	r24, 0x6B	; 107
     270:	90 e0       	ldi	r25, 0x00	; 0
     272:	90 93 d2 00 	sts	0x00D2, r25
     276:	80 93 d1 00 	sts	0x00D1, r24
     27a:	43 c0       	rjmp	.+134    	; 0x302 <__stack+0xa3>
		}
#endif


#if  INCLUDE_SI570
	SWITCH_CASE(CMD_SET_SI570)					// [DEBUG] Write byte to Si570 register
     27c:	20 32       	cpi	r18, 0x20	; 32
     27e:	79 f4       	brne	.+30     	; 0x29e <__stack+0x3f>
		Si570CmdReg(rq->wValue.bytes[1], rq->wIndex.bytes[0]);
     280:	13 96       	adiw	r26, 0x03	; 3
     282:	8c 91       	ld	r24, X
     284:	13 97       	sbiw	r26, 0x03	; 3
     286:	14 96       	adiw	r26, 0x04	; 4
     288:	6c 91       	ld	r22, X
     28a:	03 d3       	rcall	.+1542   	; 0x892 <Si570CmdReg>
#if  INCLUDE_SMOOTH
		FreqSmoothTune = 0;						// Next SetFreq call no smoodtune
     28c:	10 92 bf 00 	sts	0x00BF, r1
     290:	10 92 c0 00 	sts	0x00C0, r1
     294:	10 92 c1 00 	sts	0x00C1, r1
     298:	10 92 c2 00 	sts	0x00C2, r1
     29c:	57 c0       	rjmp	.+174    	; 0x34c <__stack+0xed>
		replyBuf[0].b0 = I2CErrors;				// return I2C transmission error status
        return sizeof(uint8_t);
#endif


	SWITCH_CASE6(CMD_SET_FREQ_REG,CMD_SET_LO_SM,CMD_SET_FREQ,CMD_SET_XTAL,CMD_SET_STARTUP,CMD_SET_PPM)
     29e:	82 2f       	mov	r24, r18
     2a0:	80 53       	subi	r24, 0x30	; 48
     2a2:	86 30       	cpi	r24, 0x06	; 6
     2a4:	30 f4       	brcc	.+12     	; 0x2b2 <__stack+0x53>
		//	0x31								// Write the FREQ mul & add to the eeprom
		//	0x32								// Set frequency by value and load Si570
		//	0x33								// write new crystal frequency to EEPROM and use it.
		//	0x34								// Write new startup frequency to eeprom
		//	0x35								// Write new smooth tune to eeprom and use it.
		bIndex = rq->wIndex.bytes[0];
     2a6:	14 96       	adiw	r26, 0x04	; 4
     2a8:	8c 91       	ld	r24, X
     2aa:	80 93 ae 00 	sts	0x00AE, r24
     2ae:	8f ef       	ldi	r24, 0xFF	; 255
     2b0:	ad c0       	rjmp	.+346    	; 0x40c <__stack+0x1ad>
        return 2 * sizeof(uint32_t);
#endif


#if  INCLUDE_IBPF
	SWITCH_CASE(CMD_GET_LO_SM)					// Return the frequency subtract multiply
     2b2:	29 33       	cpi	r18, 0x39	; 57
     2b4:	41 f5       	brne	.+80     	; 0x306 <__stack+0xa7>
		uint8_t band = rq->wIndex.bytes[0] & (MAX_BAND-1);	// 0..3 only
		memcpy(&replyBuf[0].w, &R.BandSub[band], sizeof(uint32_t));
     2b6:	14 96       	adiw	r26, 0x04	; 4
     2b8:	ec 91       	ld	r30, X
     2ba:	e3 70       	andi	r30, 0x03	; 3
     2bc:	f0 e0       	ldi	r31, 0x00	; 0
     2be:	ee 0f       	add	r30, r30
     2c0:	ff 1f       	adc	r31, r31
     2c2:	ee 0f       	add	r30, r30
     2c4:	ff 1f       	adc	r31, r31
     2c6:	df 01       	movw	r26, r30
     2c8:	a9 58       	subi	r26, 0x89	; 137
     2ca:	bf 4f       	sbci	r27, 0xFF	; 255
     2cc:	8d 91       	ld	r24, X+
     2ce:	9d 91       	ld	r25, X+
     2d0:	0d 90       	ld	r0, X+
     2d2:	bc 91       	ld	r27, X
     2d4:	a0 2d       	mov	r26, r0
     2d6:	80 93 b7 00 	sts	0x00B7, r24
     2da:	90 93 b8 00 	sts	0x00B8, r25
     2de:	a0 93 b9 00 	sts	0x00B9, r26
     2e2:	b0 93 ba 00 	sts	0x00BA, r27
		memcpy(&replyBuf[2].w, &R.BandMul[band], sizeof(uint32_t));
     2e6:	e9 57       	subi	r30, 0x79	; 121
     2e8:	ff 4f       	sbci	r31, 0xFF	; 255
     2ea:	80 81       	ld	r24, Z
     2ec:	91 81       	ldd	r25, Z+1	; 0x01
     2ee:	a2 81       	ldd	r26, Z+2	; 0x02
     2f0:	b3 81       	ldd	r27, Z+3	; 0x03
     2f2:	80 93 bb 00 	sts	0x00BB, r24
     2f6:	90 93 bc 00 	sts	0x00BC, r25
     2fa:	a0 93 bd 00 	sts	0x00BD, r26
     2fe:	b0 93 be 00 	sts	0x00BE, r27
     302:	88 e0       	ldi	r24, 0x08	; 8
     304:	83 c0       	rjmp	.+262    	; 0x40c <__stack+0x1ad>
        return 2 * sizeof(uint32_t);
#endif


	SWITCH_CASE(CMD_GET_FREQ)					// Return running frequnecy
     306:	2a 33       	cpi	r18, 0x3A	; 58
     308:	19 f4       	brne	.+6      	; 0x310 <__stack+0xb1>
		usbMsgPtr = (uint8_t*)&R.Freq;
     30a:	85 e6       	ldi	r24, 0x65	; 101
     30c:	90 e0       	ldi	r25, 0x00	; 0
     30e:	5c c0       	rjmp	.+184    	; 0x3c8 <__stack+0x169>
        return sizeof(uint32_t);


#if  INCLUDE_SMOOTH
	SWITCH_CASE(CMD_GET_PPM)					// Return smooth tune ppm value
     310:	2b 33       	cpi	r18, 0x3B	; 59
     312:	39 f4       	brne	.+14     	; 0x322 <__stack+0xc3>
		usbMsgPtr = (uint8_t*)&R.SmoothTunePPM;
     314:	89 e6       	ldi	r24, 0x69	; 105
     316:	90 e0       	ldi	r25, 0x00	; 0
     318:	90 93 d2 00 	sts	0x00D2, r25
     31c:	80 93 d1 00 	sts	0x00D1, r24
     320:	7f cf       	rjmp	.-258    	; 0x220 <usbFunctionSetup+0xac>
        return sizeof(uint16_t);
#endif


	SWITCH_CASE(CMD_GET_STARTUP)				// Return the startup frequency
     322:	2c 33       	cpi	r18, 0x3C	; 60
     324:	41 f4       	brne	.+16     	; 0x336 <__stack+0xd7>
		eeprom_read_block(replyBuf, &E.Freq, sizeof(E.Freq));
     326:	87 eb       	ldi	r24, 0xB7	; 183
     328:	90 e0       	ldi	r25, 0x00	; 0
     32a:	65 e0       	ldi	r22, 0x05	; 5
     32c:	70 e0       	ldi	r23, 0x00	; 0
     32e:	44 e0       	ldi	r20, 0x04	; 4
     330:	50 e0       	ldi	r21, 0x00	; 0
     332:	f5 d6       	rcall	.+3562   	; 0x111e <__eerd_block_tn85>
     334:	4d c0       	rjmp	.+154    	; 0x3d0 <__stack+0x171>
		return sizeof(uint32_t);


	SWITCH_CASE(CMD_GET_XTAL)					// Return the XTal frequnecy
     336:	2d 33       	cpi	r18, 0x3D	; 61
     338:	19 f4       	brne	.+6      	; 0x340 <__stack+0xe1>
		usbMsgPtr = (uint8_t*)&R.FreqXtal;
     33a:	81 e6       	ldi	r24, 0x61	; 97
     33c:	90 e0       	ldi	r25, 0x00	; 0
     33e:	44 c0       	rjmp	.+136    	; 0x3c8 <__stack+0x169>
//	SWITCH_CASE(CMD_GET_REGS)					// read out calculated frequency control registers
//		usbMsgPtr = (uint8_t*)&Si570_Data;
//		return sizeof(Si570_t);


	SWITCH_CASE(CMD_GET_SI570)					// read out chip frequency control registers
     340:	2f 33       	cpi	r18, 0x3F	; 63
     342:	11 f4       	brne	.+4      	; 0x348 <__stack+0xe9>
		return GetRegFromSi570();				// read all registers in one block to replyBuf[]
     344:	83 d2       	rcall	.+1286   	; 0x84c <GetRegFromSi570>
     346:	62 c0       	rjmp	.+196    	; 0x40c <__stack+0x1ad>


#if  INCLUDE_I2C
	SWITCH_CASE(CMD_GET_I2C_ERR)				// return I2C transmission error status
     348:	20 34       	cpi	r18, 0x40	; 64
     34a:	19 f4       	brne	.+6      	; 0x352 <__stack+0xf3>
		replyBuf[0].b0 = I2CErrors;
     34c:	80 92 b7 00 	sts	0x00B7, r8
     350:	5c c0       	rjmp	.+184    	; 0x40a <__stack+0x1ab>
		return sizeof(uint8_t);
#endif


	SWITCH_CASE(CMD_SET_I2C_ADDR)				// Set the new i2c address or factory default (pe0fko: function changed)
     352:	21 34       	cpi	r18, 0x41	; 65
     354:	71 f4       	brne	.+28     	; 0x372 <__stack+0x113>
		replyBuf[0].b0 = R.ChipCrtlData;		// Return the old I2C address (V15.12)
     356:	80 91 98 00 	lds	r24, 0x0098
     35a:	80 93 b7 00 	sts	0x00B7, r24
		if (rq->wValue.bytes[0] != 0) {			// Only set if Value != 0
     35e:	12 96       	adiw	r26, 0x02	; 2
     360:	6c 91       	ld	r22, X
     362:	66 23       	and	r22, r22
     364:	09 f4       	brne	.+2      	; 0x368 <__stack+0x109>
     366:	51 c0       	rjmp	.+162    	; 0x40a <__stack+0x1ab>
			R.ChipCrtlData = rq->wValue.bytes[0];
     368:	60 93 98 00 	sts	0x0098, r22
			eeprom_write_byte(&E.ChipCrtlData, R.ChipCrtlData);
     36c:	88 e3       	ldi	r24, 0x38	; 56
     36e:	90 e0       	ldi	r25, 0x00	; 0
     370:	12 c0       	rjmp	.+36     	; 0x396 <__stack+0x137>
		}
		return sizeof(R.ChipCrtlData);


#if INCLUDE_TEMP
	SWITCH_CASE(CMD_GET_CPU_TEMP)				// Read the temperature mux 0
     372:	22 34       	cpi	r18, 0x42	; 66
     374:	11 f4       	brne	.+4      	; 0x37a <__stack+0x11b>
		replyBuf[0].w = GetTemperature();
     376:	a6 de       	rcall	.-692    	; 0xc4 <GetTemperature>
     378:	4f cf       	rjmp	.-354    	; 0x218 <usbFunctionSetup+0xa4>
		return sizeof(uint16_t);
#endif


#if INCLUDE_SN
	SWITCH_CASE(CMD_GET_USB_ID)					// Get/Set the USB SeialNumber ID
     37a:	23 34       	cpi	r18, 0x43	; 67
     37c:	71 f4       	brne	.+28     	; 0x39a <__stack+0x13b>
		replyBuf[0].b0 = R.SerialNumber;
     37e:	80 91 97 00 	lds	r24, 0x0097
     382:	80 93 b7 00 	sts	0x00B7, r24
		if (rq->wValue.bytes[0] != 0) {			// Only set if Value != 0
     386:	12 96       	adiw	r26, 0x02	; 2
     388:	6c 91       	ld	r22, X
     38a:	66 23       	and	r22, r22
     38c:	f1 f1       	breq	.+124    	; 0x40a <__stack+0x1ab>
			R.SerialNumber = rq->wValue.bytes[0];
     38e:	60 93 97 00 	sts	0x0097, r22
			eeprom_write_byte(&E.SerialNumber, R.SerialNumber);
     392:	87 e3       	ldi	r24, 0x37	; 55
     394:	90 e0       	ldi	r25, 0x00	; 0
     396:	e4 d6       	rcall	.+3528   	; 0x1160 <__eewr_byte_tn85>
     398:	38 c0       	rjmp	.+112    	; 0x40a <__stack+0x1ab>
		return sizeof(R.SerialNumber);
#endif


#if INCLUDE_IBPF
	SWITCH_CASE(CMD_SET_RX_BAND_FILTER)			// Set the Filters for band 0..3
     39a:	28 31       	cpi	r18, 0x18	; 24
     39c:	89 f4       	brne	.+34     	; 0x3c0 <__stack+0x161>
		uint8_t band = rq->wIndex.bytes[0] & (MAX_BAND-1);	// 0..3 only
     39e:	14 96       	adiw	r26, 0x04	; 4
     3a0:	0c 91       	ld	r16, X
     3a2:	14 97       	sbiw	r26, 0x04	; 4
     3a4:	03 70       	andi	r16, 0x03	; 3
		uint8_t filter = rq->wValue.bytes[0];
     3a6:	12 96       	adiw	r26, 0x02	; 2
     3a8:	fc 90       	ld	r15, X
		eeprom_write_byte(&E.Band2Filter[band], filter);
     3aa:	10 e0       	ldi	r17, 0x00	; 0
     3ac:	c8 01       	movw	r24, r16
     3ae:	8d 5e       	subi	r24, 0xED	; 237
     3b0:	9f 4f       	sbci	r25, 0xFF	; 255
     3b2:	6f 2d       	mov	r22, r15
     3b4:	d5 d6       	rcall	.+3498   	; 0x1160 <__eewr_byte_tn85>
		R.Band2Filter[band] = filter;
     3b6:	00 5a       	subi	r16, 0xA0	; 160
     3b8:	1f 4f       	sbci	r17, 0xFF	; 255
     3ba:	f8 01       	movw	r30, r16
     3bc:	f3 8a       	std	Z+19, r15	; 0x13
     3be:	02 c0       	rjmp	.+4      	; 0x3c4 <__stack+0x165>
		usbMsgPtr = (uint8_t*)R.Band2Filter;	// Length from 
        return sizeof(R.Band2Filter);

	SWITCH_CASE(CMD_GET_RX_BAND_FILTER)			// Read the Filters for band 0..3
     3c0:	29 31       	cpi	r18, 0x19	; 25
     3c2:	41 f4       	brne	.+16     	; 0x3d4 <__stack+0x175>
		usbMsgPtr = (uint8_t*)R.Band2Filter;	// Length from 
     3c4:	83 e7       	ldi	r24, 0x73	; 115
     3c6:	90 e0       	ldi	r25, 0x00	; 0
     3c8:	90 93 d2 00 	sts	0x00D2, r25
     3cc:	80 93 d1 00 	sts	0x00D1, r24
     3d0:	84 e0       	ldi	r24, 0x04	; 4
     3d2:	1c c0       	rjmp	.+56     	; 0x40c <__stack+0x1ad>
        return sizeof(R.Band2Filter);
#endif


	SWITCH_CASE2(CMD_SET_USRP1,CMD_GET_CW_KEY)	// set IO_P1 (cmd=0x50) and read CW key level (cmd=0x50 & 0x51)
     3d4:	82 2f       	mov	r24, r18
     3d6:	80 55       	subi	r24, 0x50	; 80
     3d8:	82 30       	cpi	r24, 0x02	; 2
     3da:	b8 f4       	brcc	.+46     	; 0x40a <__stack+0x1ab>
		replyBuf[0].b0 = (_BV(IO_P2) | _BV(BIT_SDA));	// CW Key 1 (PB4) & 2 (PB1 + i2c SDA)
     3dc:	82 e2       	ldi	r24, 0x22	; 34
     3de:	80 93 b7 00 	sts	0x00B7, r24
#if  INCLUDE_ABPF | INCLUDE_IBPF
		if (!FilterCrossOverOn)
     3e2:	80 91 71 00 	lds	r24, 0x0071
     3e6:	88 23       	and	r24, r24
     3e8:	81 f4       	brne	.+32     	; 0x40a <__stack+0x1ab>
#endif
		{
			if (usbRequest == 0x50)
     3ea:	20 35       	cpi	r18, 0x50	; 80
     3ec:	39 f4       	brne	.+14     	; 0x3fc <__stack+0x19d>
			{
			    if (rq->wValue.bytes[0] == 0)
     3ee:	12 96       	adiw	r26, 0x02	; 2
     3f0:	8c 91       	ld	r24, X
     3f2:	88 23       	and	r24, r24
     3f4:	11 f4       	brne	.+4      	; 0x3fa <__stack+0x19b>
					bit_0(IO_PORT, IO_P1);
     3f6:	c4 98       	cbi	0x18, 4	; 24
     3f8:	01 c0       	rjmp	.+2      	; 0x3fc <__stack+0x19d>
				else
					bit_1(IO_PORT, IO_P1);
     3fa:	c4 9a       	sbi	0x18, 4	; 24
			}

			replyBuf[0].b0 &= IO_PIN;
     3fc:	86 b3       	in	r24, 0x16	; 22
     3fe:	82 72       	andi	r24, 0x22	; 34
     400:	80 93 b7 00 	sts	0x00B7, r24
     404:	02 c0       	rjmp	.+4      	; 0x40a <__stack+0x1ab>
     406:	80 e0       	ldi	r24, 0x00	; 0
     408:	01 c0       	rjmp	.+2      	; 0x40c <__stack+0x1ad>
     40a:	81 e0       	ldi	r24, 0x01	; 1
        return sizeof(uint8_t);

	SWITCH_END

    return 1;
}
     40c:	1f 91       	pop	r17
     40e:	0f 91       	pop	r16
     410:	ff 90       	pop	r15
     412:	08 95       	ret

00000414 <usbFunctionWrite>:
/* ------------------------------------------------------------------------- */
/* ------------------------ interface to USB driver ------------------------ */
/* ------------------------------------------------------------------------- */

uchar usbFunctionWrite(uchar *data, uchar len) //sends len bytes to SI570
{
     414:	cf 92       	push	r12
     416:	df 92       	push	r13
     418:	ef 92       	push	r14
     41a:	ff 92       	push	r15
     41c:	0f 93       	push	r16
     41e:	1f 93       	push	r17
     420:	cf 93       	push	r28
     422:	df 93       	push	r29
     424:	ec 01       	movw	r28, r24
	SWITCH_START(usbRequest)
     426:	86 2d       	mov	r24, r6

	SWITCH_CASE(CMD_SET_FREQ_REG)
     428:	80 33       	cpi	r24, 0x30	; 48
     42a:	09 f0       	breq	.+2      	; 0x42e <usbFunctionWrite+0x1a>
     42c:	5b c0       	rjmp	.+182    	; 0x4e4 <L_X_662+0xa>
		if (len == sizeof(Si570_t)) {
     42e:	66 30       	cpi	r22, 0x06	; 6
     430:	09 f0       	breq	.+2      	; 0x434 <usbFunctionWrite+0x20>
     432:	c7 c0       	rjmp	.+398    	; 0x5c2 <L_X_662+0xe8>
	uint8_t		A0,A1,A2,A3,B0,B1,B2,B3,B4;
	uint8_t		N1,HS_DIV;
	uint16_t	N;
//	sint32_t	Freq;

	HS_DIV = (reg[0] >> 5) & 0x07;
     434:	68 81       	ld	r22, Y
	N1 = ((reg[0] << 2) & 0x7C) | ((reg[1] >> 6) & 0x03);
     436:	39 81       	ldd	r19, Y+1	; 0x01
     438:	86 2f       	mov	r24, r22
     43a:	88 0f       	add	r24, r24
     43c:	88 0f       	add	r24, r24
     43e:	8c 77       	andi	r24, 0x7C	; 124
     440:	93 2f       	mov	r25, r19
     442:	92 95       	swap	r25
     444:	96 95       	lsr	r25
     446:	96 95       	lsr	r25
     448:	93 70       	andi	r25, 0x03	; 3
     44a:	89 2b       	or	r24, r25

	A0 = 0;
	A1 = 0;
	A2 = 0;
	A3 = 0;
	B0 = reg[5];
     44c:	dd 80       	ldd	r13, Y+5	; 0x05
	B1 = reg[4];
     44e:	bc 81       	ldd	r27, Y+4	; 0x04
	B2 = reg[3];
     450:	7b 81       	ldd	r23, Y+3	; 0x03
	B3 = reg[2];
     452:	5a 81       	ldd	r21, Y+2	; 0x02
	B4 = reg[1] & 0x3F;
     454:	3f 73       	andi	r19, 0x3F	; 63

	cnt = 40+1;

	asm volatile (
     456:	f0 e0       	ldi	r31, 0x00	; 0
     458:	a9 e2       	ldi	r26, 0x29	; 41
     45a:	2f 2f       	mov	r18, r31
     45c:	9a 2f       	mov	r25, r26
     45e:	42 ec       	ldi	r20, 0xC2	; 194
     460:	e4 2e       	mov	r14, r20
     462:	45 ef       	ldi	r20, 0xF5	; 245
     464:	f4 2e       	mov	r15, r20
     466:	48 e4       	ldi	r20, 0x48	; 72
     468:	04 2f       	mov	r16, r20
     46a:	42 e7       	ldi	r20, 0x72	; 114
     46c:	14 2f       	mov	r17, r20
     46e:	4f 2f       	mov	r20, r31
     470:	ef 2f       	mov	r30, r31
     472:	cf 2e       	mov	r12, r31
     474:	88 94       	clc

00000476 <L_A_645>:
     476:	20 f4       	brcc	.+8      	; 0x480 <L_B_645>
     478:	2e 0d       	add	r18, r14
     47a:	4f 1d       	adc	r20, r15
     47c:	e0 1f       	adc	r30, r16
     47e:	c1 1e       	adc	r12, r17

00000480 <L_B_645>:
     480:	c7 94       	ror	r12
     482:	e7 95       	ror	r30
     484:	47 95       	ror	r20
     486:	27 95       	ror	r18
     488:	37 95       	ror	r19
     48a:	57 95       	ror	r21
     48c:	77 95       	ror	r23
     48e:	b7 95       	ror	r27
     490:	d7 94       	ror	r13
     492:	9a 95       	dec	r25
     494:	81 f7       	brne	.-32     	; 0x476 <L_A_645>
     496:	55 0f       	add	r21, r21
     498:	33 1f       	adc	r19, r19
     49a:	22 1f       	adc	r18, r18
     49c:	44 1f       	adc	r20, r20
     49e:	ee 1f       	adc	r30, r30
     4a0:	cc 1c       	adc	r12, r12
     4a2:	ec 2c       	mov	r14, r12
	uint8_t		A0,A1,A2,A3,B0,B1,B2,B3,B4;
	uint8_t		N1,HS_DIV;
	uint16_t	N;
//	sint32_t	Freq;

	HS_DIV = (reg[0] >> 5) & 0x07;
     4a4:	62 95       	swap	r22
     4a6:	66 95       	lsr	r22
     4a8:	67 70       	andi	r22, 0x07	; 7
	B0 = 0;			// Reminder = 0
	B1 = 0;

	cnt = 40+1;

	asm volatile (
     4aa:	6c 5f       	subi	r22, 0xFC	; 252
     4ac:	8f 5f       	subi	r24, 0xFF	; 255
     4ae:	90 e0       	ldi	r25, 0x00	; 0
     4b0:	70 e0       	ldi	r23, 0x00	; 0
     4b2:	f6 d5       	rcall	.+3052   	; 0x10a0 <__mulhi3>
     4b4:	5f 2f       	mov	r21, r31
     4b6:	88 94       	clc

000004b8 <L_A_662>:
     4b8:	33 1f       	adc	r19, r19
     4ba:	22 1f       	adc	r18, r18
     4bc:	44 1f       	adc	r20, r20
     4be:	ee 1f       	adc	r30, r30
     4c0:	ee 1c       	adc	r14, r14
     4c2:	ff 1f       	adc	r31, r31
     4c4:	55 1f       	adc	r21, r21
     4c6:	f8 1b       	sub	r31, r24
     4c8:	59 0b       	sbc	r21, r25
     4ca:	20 f4       	brcc	.+8      	; 0x4d4 <L_B_662>
     4cc:	f8 0f       	add	r31, r24
     4ce:	59 1f       	adc	r21, r25
     4d0:	88 94       	clc
     4d2:	01 c0       	rjmp	.+2      	; 0x4d6 <L_C_662>

000004d4 <L_B_662>:
     4d4:	08 94       	sec

000004d6 <L_C_662>:
     4d6:	aa 95       	dec	r26
     4d8:	79 f7       	brne	.-34     	; 0x4b8 <L_A_662>

000004da <L_X_662>:
     4da:	38 83       	st	Y, r19
     4dc:	29 83       	std	Y+1, r18	; 0x01
     4de:	4a 83       	std	Y+2, r20	; 0x02
     4e0:	eb 83       	std	Y+3, r30	; 0x03
     4e2:	3b c0       	rjmp	.+118    	; 0x55a <L_X_662+0x80>
			eeprom_write_block(data, &E.FreqSub, 2*sizeof(uint32_t));
		}
#endif

#if  INCLUDE_IBPF
	SWITCH_CASE(CMD_SET_LO_SM)					// Write the frequency subtract multiply to the eeprom
     4e4:	81 33       	cpi	r24, 0x31	; 49
     4e6:	a9 f5       	brne	.+106    	; 0x552 <L_X_662+0x78>
		if (len == 2*sizeof(uint32_t)) {
     4e8:	68 30       	cpi	r22, 0x08	; 8
     4ea:	09 f0       	breq	.+2      	; 0x4ee <L_X_662+0x14>
     4ec:	6a c0       	rjmp	.+212    	; 0x5c2 <L_X_662+0xe8>
			bIndex &= MAX_BAND-1;
     4ee:	60 91 ae 00 	lds	r22, 0x00AE
     4f2:	63 70       	andi	r22, 0x03	; 3
     4f4:	60 93 ae 00 	sts	0x00AE, r22
			memcpy(&R.BandSub[bIndex], &data[0], sizeof(uint32_t));
     4f8:	70 e0       	ldi	r23, 0x00	; 0
     4fa:	66 0f       	add	r22, r22
     4fc:	77 1f       	adc	r23, r23
     4fe:	66 0f       	add	r22, r22
     500:	77 1f       	adc	r23, r23
     502:	fb 01       	movw	r30, r22
     504:	e9 58       	subi	r30, 0x89	; 137
     506:	ff 4f       	sbci	r31, 0xFF	; 255
     508:	88 81       	ld	r24, Y
     50a:	99 81       	ldd	r25, Y+1	; 0x01
     50c:	aa 81       	ldd	r26, Y+2	; 0x02
     50e:	bb 81       	ldd	r27, Y+3	; 0x03
     510:	80 83       	st	Z, r24
     512:	91 83       	std	Z+1, r25	; 0x01
     514:	a2 83       	std	Z+2, r26	; 0x02
     516:	b3 83       	std	Z+3, r27	; 0x03
			eeprom_write_block(&data[0], &E.BandSub[bIndex], sizeof(uint32_t));
     518:	69 5e       	subi	r22, 0xE9	; 233
     51a:	7f 4f       	sbci	r23, 0xFF	; 255
     51c:	ce 01       	movw	r24, r28
     51e:	44 e0       	ldi	r20, 0x04	; 4
     520:	50 e0       	ldi	r21, 0x00	; 0
     522:	15 d6       	rcall	.+3114   	; 0x114e <__eewr_block_tn85>
			memcpy(&R.BandMul[bIndex], &data[4], sizeof(uint32_t));
     524:	60 91 ae 00 	lds	r22, 0x00AE
     528:	70 e0       	ldi	r23, 0x00	; 0
     52a:	66 0f       	add	r22, r22
     52c:	77 1f       	adc	r23, r23
     52e:	66 0f       	add	r22, r22
     530:	77 1f       	adc	r23, r23
     532:	fb 01       	movw	r30, r22
     534:	e9 57       	subi	r30, 0x79	; 121
     536:	ff 4f       	sbci	r31, 0xFF	; 255
     538:	8c 81       	ldd	r24, Y+4	; 0x04
     53a:	9d 81       	ldd	r25, Y+5	; 0x05
     53c:	ae 81       	ldd	r26, Y+6	; 0x06
     53e:	bf 81       	ldd	r27, Y+7	; 0x07
     540:	80 83       	st	Z, r24
     542:	91 83       	std	Z+1, r25	; 0x01
     544:	a2 83       	std	Z+2, r26	; 0x02
     546:	b3 83       	std	Z+3, r27	; 0x03
			eeprom_write_block(&data[4], &E.BandMul[bIndex], sizeof(uint32_t));
     548:	69 5d       	subi	r22, 0xD9	; 217
     54a:	7f 4f       	sbci	r23, 0xFF	; 255
     54c:	ce 01       	movw	r24, r28
     54e:	04 96       	adiw	r24, 0x04	; 4
     550:	25 c0       	rjmp	.+74     	; 0x59c <L_X_662+0xc2>
		}
#endif

	SWITCH_CASE(CMD_SET_FREQ)					// Set frequency by value and load Si570
     552:	82 33       	cpi	r24, 0x32	; 50
     554:	41 f4       	brne	.+16     	; 0x566 <L_X_662+0x8c>
		if (len == sizeof(uint32_t)) {
     556:	64 30       	cpi	r22, 0x04	; 4
     558:	a1 f5       	brne	.+104    	; 0x5c2 <L_X_662+0xe8>
			SetFreq(*(uint32_t*)data);
     55a:	68 81       	ld	r22, Y
     55c:	79 81       	ldd	r23, Y+1	; 0x01
     55e:	8a 81       	ldd	r24, Y+2	; 0x02
     560:	9b 81       	ldd	r25, Y+3	; 0x03
     562:	b9 d1       	rcall	.+882    	; 0x8d6 <SetFreq>
     564:	2e c0       	rjmp	.+92     	; 0x5c2 <L_X_662+0xe8>
		}

	SWITCH_CASE(CMD_SET_XTAL)					// write new crystal frequency to EEPROM and use it.
     566:	83 33       	cpi	r24, 0x33	; 51
     568:	91 f4       	brne	.+36     	; 0x58e <L_X_662+0xb4>
		if (len == sizeof(R.FreqXtal)) {
     56a:	64 30       	cpi	r22, 0x04	; 4
     56c:	51 f5       	brne	.+84     	; 0x5c2 <L_X_662+0xe8>
			R.FreqXtal = *(uint32_t*)data;
     56e:	88 81       	ld	r24, Y
     570:	99 81       	ldd	r25, Y+1	; 0x01
     572:	aa 81       	ldd	r26, Y+2	; 0x02
     574:	bb 81       	ldd	r27, Y+3	; 0x03
     576:	80 93 61 00 	sts	0x0061, r24
     57a:	90 93 62 00 	sts	0x0062, r25
     57e:	a0 93 63 00 	sts	0x0063, r26
     582:	b0 93 64 00 	sts	0x0064, r27
			eeprom_write_block(data, &E.FreqXtal, sizeof(E.FreqXtal));
     586:	ce 01       	movw	r24, r28
     588:	61 e0       	ldi	r22, 0x01	; 1
     58a:	70 e0       	ldi	r23, 0x00	; 0
     58c:	07 c0       	rjmp	.+14     	; 0x59c <L_X_662+0xc2>
		}

	SWITCH_CASE(CMD_SET_STARTUP)				// Write new startup frequency to eeprom
     58e:	84 33       	cpi	r24, 0x34	; 52
     590:	41 f4       	brne	.+16     	; 0x5a2 <L_X_662+0xc8>
		if (len == sizeof(R.Freq)) {
     592:	64 30       	cpi	r22, 0x04	; 4
     594:	b1 f4       	brne	.+44     	; 0x5c2 <L_X_662+0xe8>
			eeprom_write_block(data, &E.Freq, sizeof(E.Freq));
     596:	ce 01       	movw	r24, r28
     598:	65 e0       	ldi	r22, 0x05	; 5
     59a:	70 e0       	ldi	r23, 0x00	; 0
     59c:	44 e0       	ldi	r20, 0x04	; 4
     59e:	50 e0       	ldi	r21, 0x00	; 0
     5a0:	0f c0       	rjmp	.+30     	; 0x5c0 <L_X_662+0xe6>
		}

#if  INCLUDE_SMOOTH
	SWITCH_CASE(CMD_SET_PPM)					// Write new smooth tune to eeprom and use it.
     5a2:	85 33       	cpi	r24, 0x35	; 53
     5a4:	71 f4       	brne	.+28     	; 0x5c2 <L_X_662+0xe8>
		if (len == sizeof(R.SmoothTunePPM)) {
     5a6:	62 30       	cpi	r22, 0x02	; 2
     5a8:	61 f4       	brne	.+24     	; 0x5c2 <L_X_662+0xe8>
			R.SmoothTunePPM = *(uint16_t*)data;
     5aa:	88 81       	ld	r24, Y
     5ac:	99 81       	ldd	r25, Y+1	; 0x01
     5ae:	90 93 6a 00 	sts	0x006A, r25
     5b2:	80 93 69 00 	sts	0x0069, r24
			eeprom_write_block(data, &E.SmoothTunePPM, sizeof(E.SmoothTunePPM));
     5b6:	ce 01       	movw	r24, r28
     5b8:	69 e0       	ldi	r22, 0x09	; 9
     5ba:	70 e0       	ldi	r23, 0x00	; 0
     5bc:	42 e0       	ldi	r20, 0x02	; 2
     5be:	50 e0       	ldi	r21, 0x00	; 0
     5c0:	c6 d5       	rcall	.+2956   	; 0x114e <__eewr_block_tn85>
#endif

	SWITCH_END

	return 1;
}
     5c2:	81 e0       	ldi	r24, 0x01	; 1
     5c4:	df 91       	pop	r29
     5c6:	cf 91       	pop	r28
     5c8:	1f 91       	pop	r17
     5ca:	0f 91       	pop	r16
     5cc:	ff 90       	pop	r15
     5ce:	ef 90       	pop	r14
     5d0:	df 90       	pop	r13
     5d2:	cf 90       	pop	r12
     5d4:	08 95       	ret

000005d6 <calibrateOscillator>:
 * signal (a single SE0 bit) repeating every millisecond immediately after
 * a USB RESET. We first do a binary search for the OSCCAL value and then
 * optimize this value with a neighboorhod search.
 */
void    calibrateOscillator(void)
{
     5d6:	ef 92       	push	r14
     5d8:	ff 92       	push	r15
     5da:	0f 93       	push	r16
     5dc:	1f 93       	push	r17
     5de:	cf 93       	push	r28
     5e0:	df 93       	push	r29
     5e2:	80 e8       	ldi	r24, 0x80	; 128
     5e4:	f8 2e       	mov	r15, r24
     5e6:	00 e0       	ldi	r16, 0x00	; 0
     5e8:	c0 e0       	ldi	r28, 0x00	; 0
     5ea:	d0 e0       	ldi	r29, 0x00	; 0
uchar       trialValue = 0, optimumValue;
int         x, optimumDev, targetValue = (unsigned)(1499 * (double)F_CPU / 10.5e6 + 0.5);

    /* do a binary search: */
    do{
        OSCCAL = trialValue + step;
     5ec:	10 2f       	mov	r17, r16
     5ee:	1f 0d       	add	r17, r15
     5f0:	11 bf       	out	0x31, r17	; 49
        x = usbMeasureFrameLength();    /* proportional to current real frequency */
     5f2:	c9 d2       	rcall	.+1426   	; 0xb86 <usbMeasureFrameLength>
     5f4:	9c 01       	movw	r18, r24
        if(x < targetValue)             /* frequency still too low */
     5f6:	89 e0       	ldi	r24, 0x09	; 9
     5f8:	24 33       	cpi	r18, 0x34	; 52
     5fa:	38 07       	cpc	r19, r24
     5fc:	0c f0       	brlt	.+2      	; 0x600 <calibrateOscillator+0x2a>
     5fe:	10 2f       	mov	r17, r16
            trialValue += step;
        step >>= 1;
     600:	f6 94       	lsr	r15
     602:	21 96       	adiw	r28, 0x01	; 1
    }while(step > 0);
     604:	c8 30       	cpi	r28, 0x08	; 8
     606:	d1 05       	cpc	r29, r1
     608:	11 f0       	breq	.+4      	; 0x60e <calibrateOscillator+0x38>
     60a:	01 2f       	mov	r16, r17
     60c:	ef cf       	rjmp	.-34     	; 0x5ec <calibrateOscillator+0x16>
    /* We have a precision of +/- 1 for optimum OSCCAL here */
    /* now do a neighborhood search for optimum value */
    optimumValue = trialValue;
    optimumDev = x; /* this is certainly far away from optimum */
    for(OSCCAL = trialValue - 1; OSCCAL <= trialValue + 1; OSCCAL++){
     60e:	11 50       	subi	r17, 0x01	; 1
     610:	11 bf       	out	0x31, r17	; 49
     612:	1f 5f       	subi	r17, 0xFF	; 255
     614:	79 01       	movw	r14, r18
     616:	c1 2f       	mov	r28, r17
     618:	d0 e0       	ldi	r29, 0x00	; 0
     61a:	21 96       	adiw	r28, 0x01	; 1
     61c:	10 c0       	rjmp	.+32     	; 0x63e <calibrateOscillator+0x68>
        x = usbMeasureFrameLength() - targetValue;
     61e:	b3 d2       	rcall	.+1382   	; 0xb86 <usbMeasureFrameLength>
     620:	84 53       	subi	r24, 0x34	; 52
     622:	99 40       	sbci	r25, 0x09	; 9
     624:	97 ff       	sbrs	r25, 7
     626:	03 c0       	rjmp	.+6      	; 0x62e <calibrateOscillator+0x58>
     628:	90 95       	com	r25
     62a:	81 95       	neg	r24
     62c:	9f 4f       	sbci	r25, 0xFF	; 255
        if(x < 0)
            x = -x;
        if(x < optimumDev){
     62e:	8e 15       	cp	r24, r14
     630:	9f 05       	cpc	r25, r15
     632:	14 f4       	brge	.+4      	; 0x638 <calibrateOscillator+0x62>
            optimumDev = x;
            optimumValue = OSCCAL;
     634:	11 b7       	in	r17, 0x31	; 49
     636:	7c 01       	movw	r14, r24
    }while(step > 0);
    /* We have a precision of +/- 1 for optimum OSCCAL here */
    /* now do a neighborhood search for optimum value */
    optimumValue = trialValue;
    optimumDev = x; /* this is certainly far away from optimum */
    for(OSCCAL = trialValue - 1; OSCCAL <= trialValue + 1; OSCCAL++){
     638:	81 b7       	in	r24, 0x31	; 49
     63a:	8f 5f       	subi	r24, 0xFF	; 255
     63c:	81 bf       	out	0x31, r24	; 49
     63e:	81 b7       	in	r24, 0x31	; 49
     640:	90 e0       	ldi	r25, 0x00	; 0
     642:	c8 17       	cp	r28, r24
     644:	d9 07       	cpc	r29, r25
     646:	5c f7       	brge	.-42     	; 0x61e <calibrateOscillator+0x48>
        if(x < optimumDev){
            optimumDev = x;
            optimumValue = OSCCAL;
        }
    }
    OSCCAL = optimumValue;
     648:	11 bf       	out	0x31, r17	; 49
}
     64a:	df 91       	pop	r29
     64c:	cf 91       	pop	r28
     64e:	1f 91       	pop	r17
     650:	0f 91       	pop	r16
     652:	ff 90       	pop	r15
     654:	ef 90       	pop	r14
     656:	08 95       	ret

00000658 <usbEventResetReady>:
both regions.
*/

void    usbEventResetReady(void)
{
    cli();  // usbMeasureFrameLength() counts CPU cycles, so disable interrupts.
     658:	f8 94       	cli
    calibrateOscillator();
     65a:	bd df       	rcall	.-134    	; 0x5d6 <calibrateOscillator>
    sei();
     65c:	78 94       	sei
    eeprom_write_byte(0, OSCCAL);   // store the calibrated value in EEPROM
     65e:	61 b7       	in	r22, 0x31	; 49
     660:	80 e0       	ldi	r24, 0x00	; 0
     662:	90 e0       	ldi	r25, 0x00	; 0
     664:	7d d5       	rcall	.+2810   	; 0x1160 <__eewr_byte_tn85>
}
     666:	08 95       	ret

00000668 <I2CStretch>:
}

//PE0FKO: The original code has no stop condition (hang on SCL low)
static void 
I2CStretch(void)						// Wait until clock hi
{										// Terminate the loop @ max 2.1ms
     668:	82 e3       	ldi	r24, 0x32	; 50
     66a:	90 e0       	ldi	r25, 0x00	; 0
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     66c:	3d e0       	ldi	r19, 0x0D	; 13
     66e:	23 2f       	mov	r18, r19
     670:	2a 95       	dec	r18
     672:	f1 f7       	brne	.-4      	; 0x670 <I2CStretch+0x8>
	uint16_t i = 50;					// 2.1mS
	do {
		I2CDelay();						// Delay some time
		if (i-- == 0)
     674:	01 97       	sbiw	r24, 0x01	; 1
     676:	2f ef       	ldi	r18, 0xFF	; 255
     678:	8f 3f       	cpi	r24, 0xFF	; 255
     67a:	92 07       	cpc	r25, r18
     67c:	19 f4       	brne	.+6      	; 0x684 <I2CStretch+0x1c>
		{
			I2CErrors = true;			// Error timeout
     67e:	88 24       	eor	r8, r8
     680:	83 94       	inc	r8
     682:	08 95       	ret
			break;
		}
	}
	while(!(I2C_PIN & SCL));			// Clock line still low
     684:	b3 9b       	sbis	0x16, 3	; 22
     686:	f3 cf       	rjmp	.-26     	; 0x66e <I2CStretch+0x6>
     688:	08 95       	ret

0000068a <I2CSendStart>:
 *	SCL: ..  \__.. 
 */
void 
I2CSendStart(void)
{
	I2CErrors = false;					// reset error flag
     68a:	88 24       	eor	r8, r8
	I2C_SCL_HI;
     68c:	bb 98       	cbi	0x17, 3	; 23
	I2C_SDA_LO;  	I2CDelay(); 		// Start SDA to low
     68e:	b9 9a       	sbi	0x17, 1	; 23
     690:	8d e0       	ldi	r24, 0x0D	; 13
     692:	98 2f       	mov	r25, r24
     694:	9a 95       	dec	r25
     696:	f1 f7       	brne	.-4      	; 0x694 <I2CSendStart+0xa>
	I2C_SCL_LO;  	I2CDelay();			// and the clock low
     698:	bb 9a       	sbi	0x17, 3	; 23
     69a:	8a 95       	dec	r24
     69c:	f1 f7       	brne	.-4      	; 0x69a <I2CSendStart+0x10>
}
     69e:	08 95       	ret

000006a0 <I2CSendStop>:
 *	SCL: ../     .. 
 */
void 
I2CSendStop(void)
{
	I2C_SDA_LO;
     6a0:	b9 9a       	sbi	0x17, 1	; 23
	I2C_SCL_HI;		I2CDelay();
     6a2:	bb 98       	cbi	0x17, 3	; 23
     6a4:	8d e0       	ldi	r24, 0x0D	; 13
     6a6:	98 2f       	mov	r25, r24
     6a8:	9a 95       	dec	r25
     6aa:	f1 f7       	brne	.-4      	; 0x6a8 <I2CSendStop+0x8>
	I2C_SDA_HI;		I2CDelay();
     6ac:	b9 98       	cbi	0x17, 1	; 23
     6ae:	8a 95       	dec	r24
     6b0:	f1 f7       	brne	.-4      	; 0x6ae <I2CSendStop+0xe>
}
     6b2:	08 95       	ret

000006b4 <I2CSend0>:

void 
I2CSend0(void)
{
	I2C_SDA_LO;							// Data low = 0
     6b4:	b9 9a       	sbi	0x17, 1	; 23
	I2C_SCL_HI;		I2CStretch();
     6b6:	bb 98       	cbi	0x17, 3	; 23
     6b8:	d7 df       	rcall	.-82     	; 0x668 <I2CStretch>
	I2C_SCL_LO;		I2CDelay();
     6ba:	bb 9a       	sbi	0x17, 3	; 23
     6bc:	8d e0       	ldi	r24, 0x0D	; 13
     6be:	8a 95       	dec	r24
     6c0:	f1 f7       	brne	.-4      	; 0x6be <I2CSend0+0xa>
}
     6c2:	08 95       	ret

000006c4 <I2CSend1>:

void 
I2CSend1(void)
{
	I2C_SDA_HI;							// Data high = 1
     6c4:	b9 98       	cbi	0x17, 1	; 23
	I2C_SCL_HI;		I2CStretch();
     6c6:	bb 98       	cbi	0x17, 3	; 23
     6c8:	cf df       	rcall	.-98     	; 0x668 <I2CStretch>
	I2C_SCL_LO;		I2CDelay();
     6ca:	bb 9a       	sbi	0x17, 3	; 23
     6cc:	8d e0       	ldi	r24, 0x0D	; 13
     6ce:	8a 95       	dec	r24
     6d0:	f1 f7       	brne	.-4      	; 0x6ce <I2CSend1+0xa>
}
     6d2:	08 95       	ret

000006d4 <I2CGetBit>:

static uint8_t
I2CGetBit(void)
{
	uint8_t b;
	I2C_SDA_HI;							// Data high = input (opencollector)
     6d4:	b9 98       	cbi	0x17, 1	; 23
	I2C_SCL_HI;		I2CStretch();		// SDA Hi Z and wait
     6d6:	bb 98       	cbi	0x17, 3	; 23
     6d8:	c7 df       	rcall	.-114    	; 0x668 <I2CStretch>
	b = (I2C_PIN & SDA);				// get bit
     6da:	86 b3       	in	r24, 0x16	; 22
	I2C_SCL_LO;							// clock low
     6dc:	bb 9a       	sbi	0x17, 3	; 23
	return b;
}
     6de:	82 70       	andi	r24, 0x02	; 2
     6e0:	08 95       	ret

000006e2 <I2CSendByte>:

void
I2CSendByte(uint8_t b)
{
     6e2:	ff 92       	push	r15
     6e4:	0f 93       	push	r16
     6e6:	1f 93       	push	r17
     6e8:	f8 2e       	mov	r15, r24
     6ea:	00 e0       	ldi	r16, 0x00	; 0
     6ec:	10 e8       	ldi	r17, 0x80	; 128
	uint8_t i,p;
	p = 0x80;
    for (i=0; i<8; i++)
	{
		if ((p & b) == 0) I2CSend0(); else I2CSend1();
     6ee:	81 2f       	mov	r24, r17
     6f0:	8f 21       	and	r24, r15
     6f2:	11 f4       	brne	.+4      	; 0x6f8 <I2CSendByte+0x16>
     6f4:	df df       	rcall	.-66     	; 0x6b4 <I2CSend0>
     6f6:	01 c0       	rjmp	.+2      	; 0x6fa <I2CSendByte+0x18>
     6f8:	e5 df       	rcall	.-54     	; 0x6c4 <I2CSend1>
void
I2CSendByte(uint8_t b)
{
	uint8_t i,p;
	p = 0x80;
    for (i=0; i<8; i++)
     6fa:	0f 5f       	subi	r16, 0xFF	; 255
     6fc:	08 30       	cpi	r16, 0x08	; 8
     6fe:	11 f0       	breq	.+4      	; 0x704 <I2CSendByte+0x22>
	{
		if ((p & b) == 0) I2CSend0(); else I2CSend1();
    	p = p >> 1;
     700:	16 95       	lsr	r17
     702:	f5 cf       	rjmp	.-22     	; 0x6ee <I2CSendByte+0xc>
	};
    I2CErrors |= I2CGetBit();	 		//Acknowledge
     704:	18 2d       	mov	r17, r8
     706:	e6 df       	rcall	.-52     	; 0x6d4 <I2CGetBit>
     708:	88 2e       	mov	r8, r24
     70a:	81 2a       	or	r8, r17
  	return; 
}
     70c:	1f 91       	pop	r17
     70e:	0f 91       	pop	r16
     710:	ff 90       	pop	r15
     712:	08 95       	ret

00000714 <I2CReceiveByte>:

uint8_t
I2CReceiveByte(void)
{
     714:	0f 93       	push	r16
     716:	1f 93       	push	r17
     718:	00 e0       	ldi	r16, 0x00	; 0
     71a:	10 e0       	ldi	r17, 0x00	; 0
	uint8_t i;
	uint8_t b = 0;
    for (i=0; i<8; i++)
	{
		b = b << 1;
     71c:	11 0f       	add	r17, r17
		if (I2CGetBit()) b |= 1;
     71e:	da df       	rcall	.-76     	; 0x6d4 <I2CGetBit>
     720:	81 11       	cpse	r24, r1
     722:	11 60       	ori	r17, 0x01	; 1
uint8_t
I2CReceiveByte(void)
{
	uint8_t i;
	uint8_t b = 0;
    for (i=0; i<8; i++)
     724:	0f 5f       	subi	r16, 0xFF	; 255
     726:	08 30       	cpi	r16, 0x08	; 8
     728:	c9 f7       	brne	.-14     	; 0x71c <I2CReceiveByte+0x8>
	{
		b = b << 1;
		if (I2CGetBit()) b |= 1;
  	};
  	return b;
}
     72a:	81 2f       	mov	r24, r17
     72c:	1f 91       	pop	r17
     72e:	0f 91       	pop	r16
     730:	08 95       	ret

00000732 <Si570CalcRFREQ>:
// Cost: 140us
// frequency [MHz] * 2^21
static 
uint8_t
Si570CalcRFREQ(uint32_t freq)
{
     732:	ff 92       	push	r15
     734:	0f 93       	push	r16
     736:	1f 93       	push	r17
	uint8_t		RFREQ_b4;
	uint32_t	RR;						// Division remainder
	uint8_t		sN1;

	// Convert divider ratio to SI570 register value
	sN1 = Si570_N1 - 1;
     738:	f4 2c       	mov	r15, r4
     73a:	fa 94       	dec	r15
	Si570_Data.N1      = sN1 >> 2;
     73c:	3f 2d       	mov	r19, r15
     73e:	36 95       	lsr	r19
     740:	36 95       	lsr	r19
	Si570_Data.HS_DIV  = Si570_HS_DIV - 4;
     742:	25 2d       	mov	r18, r5
     744:	24 50       	subi	r18, 0x04	; 4
     746:	22 95       	swap	r18
     748:	22 0f       	add	r18, r18
     74a:	20 7e       	andi	r18, 0xE0	; 224
     74c:	3f 71       	andi	r19, 0x1F	; 31
     74e:	32 2b       	or	r19, r18
     750:	30 93 b1 00 	sts	0x00B1, r19
	// Multiplier_32  :                  b3      b2      b1      b0
	// Product_48     :  r0      b4      b3      b2      b1      b0
	//                  <--- high ----><---------- low ------------->

	cnt = 32+1;                      // Init loop counter
	asm (
     754:	21 e2       	ldi	r18, 0x21	; 33
     756:	00 24       	eor	r0, r0
     758:	00 1b       	sub	r16, r16

0000075a <L_A_27>:
     75a:	10 f4       	brcc	.+4      	; 0x760 <L_B_27>
     75c:	02 0d       	add	r16, r2
     75e:	03 1c       	adc	r0, r3

00000760 <L_B_27>:
     760:	07 94       	ror	r0
     762:	07 95       	ror	r16
     764:	97 95       	ror	r25
     766:	87 95       	ror	r24
     768:	77 95       	ror	r23
     76a:	67 95       	ror	r22
     76c:	2a 95       	dec	r18
     76e:	a9 f7       	brne	.-22     	; 0x75a <L_A_27>
     770:	a6 2f       	mov	r26, r22
     772:	e7 2f       	mov	r30, r23
     774:	f8 2f       	mov	r31, r24
     776:	19 2f       	mov	r17, r25
	// Check if DCO is lower than the Si570 max specied.
	// The low 3 bit's are not used, so the error is 8MHz
	// DCO = Freq * sN (calculated above)
	// RFREQ is [19.21]bits
	sint16_t DCO;
	DCO.b0 = RFREQ.w1.b1;
     778:	29 2f       	mov	r18, r25
	DCO.b1 = RFREQ_b4;
     77a:	30 2f       	mov	r19, r16
	if (DCO.w > ((DCO_MAX+4)/8))
     77c:	26 5c       	subi	r18, 0xC6	; 198
     77e:	32 40       	sbci	r19, 0x02	; 2
     780:	10 f0       	brcs	.+4      	; 0x786 <L_B_27+0x26>
     782:	80 e0       	ldi	r24, 0x00	; 0
     784:	3c c0       	rjmp	.+120    	; 0x7fe <L_X_56+0x22>
	//---------------------------------------------------------------------------

	RR = 0;							// Clear Remainder_40
	cnt = 40+1+28+3;				// Init Loop_Counter
									// (28 = 12.28 bits, 3 = * 8)
	asm (
     786:	40 91 61 00 	lds	r20, 0x0061
     78a:	50 91 62 00 	lds	r21, 0x0062
     78e:	60 91 63 00 	lds	r22, 0x0063
     792:	70 91 64 00 	lds	r23, 0x0064
     796:	3a 2f       	mov	r19, r26
     798:	80 e0       	ldi	r24, 0x00	; 0
     79a:	90 e0       	ldi	r25, 0x00	; 0
     79c:	a0 e0       	ldi	r26, 0x00	; 0
     79e:	b0 e0       	ldi	r27, 0x00	; 0
     7a0:	28 e4       	ldi	r18, 0x48	; 72
     7a2:	88 94       	clc

000007a4 <L_A_56>:
     7a4:	33 1f       	adc	r19, r19
     7a6:	ee 1f       	adc	r30, r30
     7a8:	ff 1f       	adc	r31, r31
     7aa:	11 1f       	adc	r17, r17
     7ac:	00 1f       	adc	r16, r16
     7ae:	88 1f       	adc	r24, r24
     7b0:	99 1f       	adc	r25, r25
     7b2:	aa 1f       	adc	r26, r26
     7b4:	bb 1f       	adc	r27, r27
     7b6:	84 1b       	sub	r24, r20
     7b8:	95 0b       	sbc	r25, r21
     7ba:	a6 0b       	sbc	r26, r22
     7bc:	b7 0b       	sbc	r27, r23
     7be:	30 f4       	brcc	.+12     	; 0x7cc <L_B_56>
     7c0:	84 0f       	add	r24, r20
     7c2:	95 1f       	adc	r25, r21
     7c4:	a6 1f       	adc	r26, r22
     7c6:	b7 1f       	adc	r27, r23
     7c8:	88 94       	clc
     7ca:	01 c0       	rjmp	.+2      	; 0x7ce <L_C_56>

000007cc <L_B_56>:
     7cc:	08 94       	sec

000007ce <L_C_56>:
     7ce:	2a 95       	dec	r18
     7d0:	49 f7       	brne	.-46     	; 0x7a4 <L_A_56>
     7d2:	31 1d       	adc	r19, r1
     7d4:	e1 1d       	adc	r30, r1
     7d6:	f1 1d       	adc	r31, r1
     7d8:	11 1d       	adc	r17, r1
     7da:	01 1d       	adc	r16, r1

000007dc <L_X_56>:
     7dc:	30 93 b6 00 	sts	0x00B6, r19
     7e0:	e0 93 b5 00 	sts	0x00B5, r30
     7e4:	f0 93 b4 00 	sts	0x00B4, r31
     7e8:	10 93 b3 00 	sts	0x00B3, r17
	// Si570_Data.RFREQ_b4 will be sent to register_8 in the Si570
	// register_8 :  76543210
	//               ||^^^^^^------< RFREQ[37:32]
	//               ^^------------< N1[1:0]
	Si570_Data.RFREQ_b4  = RFREQ_b4;
	Si570_Data.RFREQ_b4 |= (sN1 & 0x03) << 6;
     7ec:	f2 94       	swap	r15
     7ee:	ff 0c       	add	r15, r15
     7f0:	ff 0c       	add	r15, r15
     7f2:	80 ec       	ldi	r24, 0xC0	; 192
     7f4:	f8 22       	and	r15, r24
     7f6:	f0 2a       	or	r15, r16
     7f8:	f0 92 b2 00 	sts	0x00B2, r15
     7fc:	81 e0       	ldi	r24, 0x01	; 1

	return 1;
}
     7fe:	1f 91       	pop	r17
     800:	0f 91       	pop	r16
     802:	ff 90       	pop	r15
     804:	08 95       	ret

00000806 <SetFilter>:
	return MAX_BAND-1;
}

void
SetFilter(uint8_t filter)
{
     806:	98 2f       	mov	r25, r24
	if (FilterCrossOverOn)
     808:	80 91 71 00 	lds	r24, 0x0071
     80c:	88 23       	and	r24, r24
     80e:	69 f0       	breq	.+26     	; 0x82a <SetFilter+0x24>
	{
		bit_1(IO_DDR, IO_P1);
     810:	bc 9a       	sbi	0x17, 4	; 23
		bit_1(IO_DDR, IO_P2);
     812:	bd 9a       	sbi	0x17, 5	; 23

		if (filter & 0x01)
     814:	89 2f       	mov	r24, r25
     816:	90 ff       	sbrs	r25, 0
     818:	02 c0       	rjmp	.+4      	; 0x81e <SetFilter+0x18>
			bit_1(IO_PORT, IO_P1);
     81a:	c4 9a       	sbi	0x18, 4	; 24
     81c:	01 c0       	rjmp	.+2      	; 0x820 <SetFilter+0x1a>
		else
			bit_0(IO_PORT, IO_P1);
     81e:	c4 98       	cbi	0x18, 4	; 24

		if (filter & 0x02)
     820:	81 ff       	sbrs	r24, 1
     822:	02 c0       	rjmp	.+4      	; 0x828 <SetFilter+0x22>
			bit_1(IO_PORT, IO_P2);
     824:	c5 9a       	sbi	0x18, 5	; 24
     826:	08 95       	ret
		else
			bit_0(IO_PORT, IO_P2);
     828:	c5 98       	cbi	0x18, 5	; 24
     82a:	08 95       	ret

0000082c <Si570CmdStart>:
	}
}

static uint8_t
Si570CmdStart(uint8_t cmd)
{
     82c:	1f 93       	push	r17
     82e:	18 2f       	mov	r17, r24
	I2CSendStart();
     830:	2c df       	rcall	.-424    	; 0x68a <I2CSendStart>
	I2CSendByte((R.ChipCrtlData<<1)|0);	// send device address 
     832:	80 91 98 00 	lds	r24, 0x0098
     836:	88 0f       	add	r24, r24
     838:	54 df       	rcall	.-344    	; 0x6e2 <I2CSendByte>
	if (I2CErrors == 0)
     83a:	88 20       	and	r8, r8
     83c:	11 f0       	breq	.+4      	; 0x842 <Si570CmdStart+0x16>
     83e:	80 e0       	ldi	r24, 0x00	; 0
     840:	03 c0       	rjmp	.+6      	; 0x848 <Si570CmdStart+0x1c>
	{
		I2CSendByte(cmd);				// send Byte Command
     842:	81 2f       	mov	r24, r17
     844:	4e df       	rcall	.-356    	; 0x6e2 <I2CSendByte>
     846:	81 e0       	ldi	r24, 0x01	; 1
		return true;
	}
	return false;
}
     848:	1f 91       	pop	r17
     84a:	08 95       	ret

0000084c <GetRegFromSi570>:
}

// read all registers in one block to replyBuf[]
uint8_t
GetRegFromSi570(void)
{
     84c:	cf 93       	push	r28
     84e:	df 93       	push	r29
	if (Si570CmdStart(7))				// send Byte address 7
     850:	87 e0       	ldi	r24, 0x07	; 7
     852:	ec df       	rcall	.-40     	; 0x82c <Si570CmdStart>
     854:	88 23       	and	r24, r24
     856:	a1 f0       	breq	.+40     	; 0x880 <GetRegFromSi570+0x34>
	{
		uint8_t i;
		I2CSendStart();	
     858:	18 df       	rcall	.-464    	; 0x68a <I2CSendStart>
		I2CSendByte((R.ChipCrtlData<<1)|1);
     85a:	80 91 98 00 	lds	r24, 0x0098
     85e:	88 0f       	add	r24, r24
     860:	81 60       	ori	r24, 0x01	; 1
     862:	3f df       	rcall	.-386    	; 0x6e2 <I2CSendByte>
     864:	c7 eb       	ldi	r28, 0xB7	; 183
     866:	d0 e0       	ldi	r29, 0x00	; 0
		for (i=0; i<5; i++)
		{
			((uint8_t*)replyBuf)[i] = I2CReceiveByte();
     868:	55 df       	rcall	.-342    	; 0x714 <I2CReceiveByte>
     86a:	89 93       	st	Y+, r24
			I2CSend0();					// 0 more bytes to follow
     86c:	23 df       	rcall	.-442    	; 0x6b4 <I2CSend0>
	if (Si570CmdStart(7))				// send Byte address 7
	{
		uint8_t i;
		I2CSendStart();	
		I2CSendByte((R.ChipCrtlData<<1)|1);
		for (i=0; i<5; i++)
     86e:	80 e0       	ldi	r24, 0x00	; 0
     870:	cc 3b       	cpi	r28, 0xBC	; 188
     872:	d8 07       	cpc	r29, r24
     874:	c9 f7       	brne	.-14     	; 0x868 <GetRegFromSi570+0x1c>
		{
			((uint8_t*)replyBuf)[i] = I2CReceiveByte();
			I2CSend0();					// 0 more bytes to follow
		}
		((uint8_t*)replyBuf)[5] = I2CReceiveByte();
     876:	4e df       	rcall	.-356    	; 0x714 <I2CReceiveByte>
     878:	e7 eb       	ldi	r30, 0xB7	; 183
     87a:	f0 e0       	ldi	r31, 0x00	; 0
     87c:	85 83       	std	Z+5, r24	; 0x05
		I2CSend1();						// 1 Last byte
     87e:	22 df       	rcall	.-444    	; 0x6c4 <I2CSend1>
	}
	I2CSendStop(); 
     880:	0f df       	rcall	.-482    	; 0x6a0 <I2CSendStop>

	return I2CErrors ? 0 : sizeof(Si570_t);
     882:	88 20       	and	r8, r8
     884:	11 f4       	brne	.+4      	; 0x88a <GetRegFromSi570+0x3e>
     886:	86 e0       	ldi	r24, 0x06	; 6
     888:	01 c0       	rjmp	.+2      	; 0x88c <GetRegFromSi570+0x40>
     88a:	80 e0       	ldi	r24, 0x00	; 0
}
     88c:	df 91       	pop	r29
     88e:	cf 91       	pop	r28
     890:	08 95       	ret

00000892 <Si570CmdReg>:
	return false;
}

void
Si570CmdReg(uint8_t reg, uint8_t data)
{
     892:	1f 93       	push	r17
     894:	16 2f       	mov	r17, r22
	if (Si570CmdStart(reg))
     896:	ca df       	rcall	.-108    	; 0x82c <Si570CmdStart>
     898:	88 23       	and	r24, r24
     89a:	11 f0       	breq	.+4      	; 0x8a0 <Si570CmdReg+0xe>
	{
		I2CSendByte(data);
     89c:	81 2f       	mov	r24, r17
     89e:	21 df       	rcall	.-446    	; 0x6e2 <I2CSendByte>
	}
	I2CSendStop();
     8a0:	ff de       	rcall	.-514    	; 0x6a0 <I2CSendStop>
}
     8a2:	1f 91       	pop	r17
     8a4:	08 95       	ret

000008a6 <Si570Write>:

// write all registers in one block.
static void
Si570Write(void)
{
	if (Si570CmdStart(7))				// send Byte address 7
     8a6:	87 e0       	ldi	r24, 0x07	; 7
     8a8:	c1 df       	rcall	.-126    	; 0x82c <Si570CmdStart>
     8aa:	88 23       	and	r24, r24
     8ac:	91 f0       	breq	.+36     	; 0x8d2 <Si570Write+0x2c>
	{
		uint8_t i;
		for (i=0;i<6;i++)				// all 6 registers
			I2CSendByte(Si570_Data.bData[i]);// send data 
     8ae:	80 91 b1 00 	lds	r24, 0x00B1
     8b2:	17 df       	rcall	.-466    	; 0x6e2 <I2CSendByte>
     8b4:	80 91 b2 00 	lds	r24, 0x00B2
     8b8:	14 df       	rcall	.-472    	; 0x6e2 <I2CSendByte>
     8ba:	80 91 b3 00 	lds	r24, 0x00B3
     8be:	11 df       	rcall	.-478    	; 0x6e2 <I2CSendByte>
     8c0:	80 91 b4 00 	lds	r24, 0x00B4
     8c4:	0e df       	rcall	.-484    	; 0x6e2 <I2CSendByte>
     8c6:	80 91 b5 00 	lds	r24, 0x00B5
     8ca:	0b df       	rcall	.-490    	; 0x6e2 <I2CSendByte>
     8cc:	80 91 b6 00 	lds	r24, 0x00B6
     8d0:	08 df       	rcall	.-496    	; 0x6e2 <I2CSendByte>
	}
	I2CSendStop();
     8d2:	e6 de       	rcall	.-564    	; 0x6a0 <I2CSendStop>
}
     8d4:	08 95       	ret

000008d6 <SetFreq>:

#endif

void
SetFreq(uint32_t freq)		// frequency [MHz] * 2^21
{
     8d6:	af 92       	push	r10
     8d8:	bf 92       	push	r11
     8da:	cf 92       	push	r12
     8dc:	df 92       	push	r13
     8de:	ef 92       	push	r14
     8e0:	ff 92       	push	r15
     8e2:	0f 93       	push	r16
     8e4:	1f 93       	push	r17
     8e6:	df 93       	push	r29
     8e8:	cf 93       	push	r28
     8ea:	cd b7       	in	r28, 0x3d	; 61
     8ec:	de b7       	in	r29, 0x3e	; 62
     8ee:	28 97       	sbiw	r28, 0x08	; 8
     8f0:	0f b6       	in	r0, 0x3f	; 63
     8f2:	f8 94       	cli
     8f4:	de bf       	out	0x3e, r29	; 62
     8f6:	0f be       	out	0x3f, r0	; 63
     8f8:	cd bf       	out	0x3d, r28	; 61
     8fa:	5b 01       	movw	r10, r22
     8fc:	6c 01       	movw	r12, r24
	R.Freq = freq;			// Save the asked freq
     8fe:	60 93 65 00 	sts	0x0065, r22
     902:	70 93 66 00 	sts	0x0066, r23
     906:	80 93 67 00 	sts	0x0067, r24
     90a:	90 93 68 00 	sts	0x0068, r25
	sint32_t Freq;

	Freq.dw = freq;

	for(n=0; n < MAX_BAND-1; ++n)
		if (Freq.w1.w < R.FilterCrossOver[n].w)
     90e:	80 91 6b 00 	lds	r24, 0x006B
     912:	90 91 6c 00 	lds	r25, 0x006C
     916:	c8 16       	cp	r12, r24
     918:	d9 06       	cpc	r13, r25
     91a:	10 f4       	brcc	.+4      	; 0x920 <SetFreq+0x4a>
     91c:	a0 e0       	ldi	r26, 0x00	; 0
     91e:	13 c0       	rjmp	.+38     	; 0x946 <SetFreq+0x70>
     920:	80 91 6d 00 	lds	r24, 0x006D
     924:	90 91 6e 00 	lds	r25, 0x006E
     928:	c8 16       	cp	r12, r24
     92a:	d9 06       	cpc	r13, r25
     92c:	10 f4       	brcc	.+4      	; 0x932 <SetFreq+0x5c>
     92e:	a1 e0       	ldi	r26, 0x01	; 1
     930:	0a c0       	rjmp	.+20     	; 0x946 <SetFreq+0x70>
     932:	80 91 6f 00 	lds	r24, 0x006F
     936:	90 91 70 00 	lds	r25, 0x0070
     93a:	c8 16       	cp	r12, r24
     93c:	d9 06       	cpc	r13, r25
     93e:	10 f0       	brcs	.+4      	; 0x944 <SetFreq+0x6e>
     940:	a3 e0       	ldi	r26, 0x03	; 3
     942:	01 c0       	rjmp	.+2      	; 0x946 <SetFreq+0x70>
     944:	a2 e0       	ldi	r26, 0x02	; 2

#if INCLUDE_IBPF

	uint8_t band = GetFreqBand(freq);

	freq = CalcFreqMulAdd(freq, R.BandSub[band], R.BandMul[band]);
     946:	b0 e0       	ldi	r27, 0x00	; 0
{
	uint32_t	oFreq = 0;
	uint8_t		cnt = 32+1;

	// Multiply 64bits = 32bits * 32bits
	asm volatile (
     948:	fd 01       	movw	r30, r26
     94a:	ee 0f       	add	r30, r30
     94c:	ff 1f       	adc	r31, r31
     94e:	ee 0f       	add	r30, r30
     950:	ff 1f       	adc	r31, r31
     952:	e0 5a       	subi	r30, 0xA0	; 160
     954:	ff 4f       	sbci	r31, 0xFF	; 255
     956:	e7 88       	ldd	r14, Z+23	; 0x17
     958:	f0 8c       	ldd	r15, Z+24	; 0x18
     95a:	01 8d       	ldd	r16, Z+25	; 0x19
     95c:	12 8d       	ldd	r17, Z+26	; 0x1a
     95e:	27 a1       	ldd	r18, Z+39	; 0x27
     960:	30 a5       	ldd	r19, Z+40	; 0x28
     962:	41 a5       	ldd	r20, Z+41	; 0x29
     964:	52 a5       	ldd	r21, Z+42	; 0x2a
     966:	2d 83       	std	Y+5, r18	; 0x05
     968:	3e 83       	std	Y+6, r19	; 0x06
     96a:	4f 83       	std	Y+7, r20	; 0x07
     96c:	58 87       	std	Y+8, r21	; 0x08
     96e:	e1 e2       	ldi	r30, 0x21	; 33
     970:	60 e0       	ldi	r22, 0x00	; 0
     972:	70 e0       	ldi	r23, 0x00	; 0
     974:	80 e0       	ldi	r24, 0x00	; 0
     976:	90 e0       	ldi	r25, 0x00	; 0
     978:	ae 18       	sub	r10, r14
     97a:	bf 08       	sbc	r11, r15
     97c:	c0 0a       	sbc	r12, r16
     97e:	d1 0a       	sbc	r13, r17

00000980 <L_X_363>:
     980:	88 94       	clc

00000982 <L_A_363>:
     982:	20 f4       	brcc	.+8      	; 0x98c <L_B_363>
     984:	62 0f       	add	r22, r18
     986:	73 1f       	adc	r23, r19
     988:	84 1f       	adc	r24, r20
     98a:	95 1f       	adc	r25, r21

0000098c <L_B_363>:
     98c:	97 95       	ror	r25
     98e:	87 95       	ror	r24
     990:	77 95       	ror	r23
     992:	67 95       	ror	r22
     994:	d7 94       	ror	r13
     996:	c7 94       	ror	r12
     998:	b7 94       	ror	r11
     99a:	a7 94       	ror	r10
     99c:	ea 95       	dec	r30
     99e:	89 f7       	brne	.-30     	; 0x982 <L_A_363>
     9a0:	eb e0       	ldi	r30, 0x0B	; 11

000009a2 <L_C_363>:
     9a2:	cc 0c       	add	r12, r12
     9a4:	dd 1c       	adc	r13, r13
     9a6:	66 1f       	adc	r22, r22
     9a8:	77 1f       	adc	r23, r23
     9aa:	88 1f       	adc	r24, r24
     9ac:	99 1f       	adc	r25, r25
     9ae:	ea 95       	dec	r30
     9b0:	c1 f7       	brne	.-16     	; 0x9a2 <L_C_363>
     9b2:	69 83       	std	Y+1, r22	; 0x01
     9b4:	7a 83       	std	Y+2, r23	; 0x02
     9b6:	8b 83       	std	Y+3, r24	; 0x03
     9b8:	9c 83       	std	Y+4, r25	; 0x04

	SetFilter(R.Band2Filter[band]);
     9ba:	a0 5a       	subi	r26, 0xA0	; 160
     9bc:	bf 4f       	sbci	r27, 0xFF	; 255
     9be:	53 96       	adiw	r26, 0x13	; 19
     9c0:	8c 91       	ld	r24, X
     9c2:	21 df       	rcall	.-446    	; 0x806 <SetFilter>

#endif

#if INCLUDE_SMOOTH

	if ((R.SmoothTunePPM != 0) && Si570_Small_Change(freq))
     9c4:	60 91 69 00 	lds	r22, 0x0069
     9c8:	70 91 6a 00 	lds	r23, 0x006A
     9cc:	61 15       	cp	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	c1 f1       	breq	.+112    	; 0xa42 <L_C_363+0xa0>
{
	uint32_t delta_F, delta_F_MAX;
	sint32_t previous_Frequency;

	// Get previous_Frequency   -> [11.21]
	previous_Frequency.dw = FreqSmoothTune;
     9d2:	a0 90 bf 00 	lds	r10, 0x00BF
     9d6:	b0 90 c0 00 	lds	r11, 0x00C0
     9da:	c0 90 c1 00 	lds	r12, 0x00C1
     9de:	d0 90 c2 00 	lds	r13, 0x00C2

	// Delta_F (MHz) = |current_Frequency - previous_Frequency|  -> [11.21]
	delta_F = current_Frequency - previous_Frequency.dw;
     9e2:	29 81       	ldd	r18, Y+1	; 0x01
     9e4:	3a 81       	ldd	r19, Y+2	; 0x02
     9e6:	4b 81       	ldd	r20, Y+3	; 0x03
     9e8:	5c 81       	ldd	r21, Y+4	; 0x04
     9ea:	2a 19       	sub	r18, r10
     9ec:	3b 09       	sbc	r19, r11
     9ee:	4c 09       	sbc	r20, r12
     9f0:	5d 09       	sbc	r21, r13
	if (delta_F >= _2(31)) delta_F = 0 - delta_F;
     9f2:	57 ff       	sbrs	r21, 7
     9f4:	07 c0       	rjmp	.+14     	; 0xa04 <L_C_363+0x62>
     9f6:	50 95       	com	r21
     9f8:	40 95       	com	r20
     9fa:	30 95       	com	r19
     9fc:	21 95       	neg	r18
     9fe:	3f 4f       	sbci	r19, 0xFF	; 255
     a00:	4f 4f       	sbci	r20, 0xFF	; 255
     a02:	5f 4f       	sbci	r21, 0xFF	; 255

#endif

#if INCLUDE_SMOOTH

	if ((R.SmoothTunePPM != 0) && Si570_Small_Change(freq))
     a04:	79 01       	movw	r14, r18
     a06:	8a 01       	movw	r16, r20
     a08:	e4 e0       	ldi	r30, 0x04	; 4
     a0a:	ee 0c       	add	r14, r14
     a0c:	ff 1c       	adc	r15, r15
     a0e:	00 1f       	adc	r16, r16
     a10:	11 1f       	adc	r17, r17
     a12:	ea 95       	dec	r30
     a14:	d1 f7       	brne	.-12     	; 0xa0a <L_C_363+0x68>
     a16:	e2 1a       	sub	r14, r18
     a18:	f3 0a       	sbc	r15, r19
     a1a:	04 0b       	sbc	r16, r20
     a1c:	15 0b       	sbc	r17, r21
     a1e:	80 e0       	ldi	r24, 0x00	; 0
     a20:	90 e0       	ldi	r25, 0x00	; 0
     a22:	96 01       	movw	r18, r12
     a24:	40 e0       	ldi	r20, 0x00	; 0
     a26:	50 e0       	ldi	r21, 0x00	; 0
     a28:	4d d3       	rcall	.+1690   	; 0x10c4 <__mulsi3>
     a2a:	6e 15       	cp	r22, r14
     a2c:	7f 05       	cpc	r23, r15
     a2e:	80 07       	cpc	r24, r16
     a30:	91 07       	cpc	r25, r17
     a32:	38 f0       	brcs	.+14     	; 0xa42 <L_C_363+0xa0>
	{
		Si570CalcRFREQ(freq);
     a34:	69 81       	ldd	r22, Y+1	; 0x01
     a36:	7a 81       	ldd	r23, Y+2	; 0x02
     a38:	8b 81       	ldd	r24, Y+3	; 0x03
     a3a:	9c 81       	ldd	r25, Y+4	; 0x04
     a3c:	7a de       	rcall	.-780    	; 0x732 <Si570CalcRFREQ>
		Si570Write();
     a3e:	33 df       	rcall	.-410    	; 0x8a6 <Si570Write>
     a40:	5e c0       	rjmp	.+188    	; 0xafe <L_C_363+0x15c>

	// Find the total division needed.
	// It is always one to low (not in the case reminder is zero, reminder not used here).
	// 16.0 bits = 13.3 bits / ( 11.5 bits >> 2)
	N0  = DCO_MIN * _2(3);
	N0 /= Freq.w1.w >> 2;
     a42:	6b 81       	ldd	r22, Y+3	; 0x03
     a44:	7c 81       	ldd	r23, Y+4	; 0x04
     a46:	76 95       	lsr	r23
     a48:	67 95       	ror	r22
     a4a:	76 95       	lsr	r23
     a4c:	67 95       	ror	r22
     a4e:	80 e9       	ldi	r24, 0x90	; 144
     a50:	97 e9       	ldi	r25, 0x97	; 151
     a52:	51 d3       	rcall	.+1698   	; 0x10f6 <__udivmodhi4>
     a54:	d6 2e       	mov	r13, r22
     a56:	e7 2e       	mov	r14, r23
     a58:	90 e8       	ldi	r25, 0x80	; 128
     a5a:	a9 2e       	mov	r10, r25
     a5c:	95 e0       	ldi	r25, 0x05	; 5
     a5e:	b9 2e       	mov	r11, r25
     a60:	10 e0       	ldi	r17, 0x00	; 0
     a62:	00 e0       	ldi	r16, 0x00	; 0
     a64:	eb e0       	ldi	r30, 0x0B	; 11
     a66:	f0 e0       	ldi	r31, 0x00	; 0
     a68:	4e 2f       	mov	r20, r30

	sN = 11*128;
	for(xHS_DIV = 11; xHS_DIV > 3; --xHS_DIV)
	{
		// Skip the unavailable divider's
		if (xHS_DIV == 8 || xHS_DIV == 10)
     a6a:	e8 30       	cpi	r30, 0x08	; 8
     a6c:	d9 f0       	breq	.+54     	; 0xaa4 <L_C_363+0x102>
     a6e:	ea 30       	cpi	r30, 0x0A	; 10
     a70:	c9 f0       	breq	.+50     	; 0xaa4 <L_C_363+0x102>
			continue;

		// Calculate the needed low speed divider
		xN1 = N0 / xHS_DIV + 1;
     a72:	8d 2d       	mov	r24, r13
     a74:	9e 2d       	mov	r25, r14
     a76:	bf 01       	movw	r22, r30
     a78:	3e d3       	rcall	.+1660   	; 0x10f6 <__udivmodhi4>
     a7a:	9b 01       	movw	r18, r22
     a7c:	2f 5f       	subi	r18, 0xFF	; 255
     a7e:	3f 4f       	sbci	r19, 0xFF	; 255
//		xN1 = (N0 + xHS_DIV/2) / xHS_DIV;

		if (xN1 > 128)
     a80:	21 38       	cpi	r18, 0x81	; 129
     a82:	31 05       	cpc	r19, r1
     a84:	78 f4       	brcc	.+30     	; 0xaa4 <L_C_363+0x102>
			continue;

		// Skip the unavailable divider's
		if (xN1 != 1 && (xN1 & 1) == 1)
     a86:	21 30       	cpi	r18, 0x01	; 1
     a88:	31 05       	cpc	r19, r1
     a8a:	21 f0       	breq	.+8      	; 0xa94 <L_C_363+0xf2>
     a8c:	20 ff       	sbrs	r18, 0
     a8e:	02 c0       	rjmp	.+4      	; 0xa94 <L_C_363+0xf2>
			xN1 += 1;
     a90:	2f 5f       	subi	r18, 0xFF	; 255
     a92:	3f 4f       	sbci	r19, 0xFF	; 255
		if ((xN1 == 1 && xHS_DIV == 4)
		||	(xN1 == 1 && xHS_DIV == 5))
			continue;
#endif

		xN = xHS_DIV * xN1;
     a94:	c9 01       	movw	r24, r18
     a96:	bf 01       	movw	r22, r30
     a98:	03 d3       	rcall	.+1542   	; 0x10a0 <__mulhi3>
		if (sN > xN)
     a9a:	8a 15       	cp	r24, r10
     a9c:	9b 05       	cpc	r25, r11
     a9e:	10 f4       	brcc	.+4      	; 0xaa4 <L_C_363+0x102>
		{
			sN		= xN;
			sN1		= xN1;
     aa0:	02 2f       	mov	r16, r18
     aa2:	02 c0       	rjmp	.+4      	; 0xaa8 <L_C_363+0x106>
     aa4:	c5 01       	movw	r24, r10
     aa6:	41 2f       	mov	r20, r17
     aa8:	31 97       	sbiw	r30, 0x01	; 1
	// 16.0 bits = 13.3 bits / ( 11.5 bits >> 2)
	N0  = DCO_MIN * _2(3);
	N0 /= Freq.w1.w >> 2;

	sN = 11*128;
	for(xHS_DIV = 11; xHS_DIV > 3; --xHS_DIV)
     aaa:	e3 30       	cpi	r30, 0x03	; 3
     aac:	f1 05       	cpc	r31, r1
     aae:	19 f0       	breq	.+6      	; 0xab6 <L_C_363+0x114>
     ab0:	5c 01       	movw	r10, r24
     ab2:	14 2f       	mov	r17, r20
     ab4:	d9 cf       	rjmp	.-78     	; 0xa68 <L_C_363+0xc6>
			sN1		= xN1;
			sHS_DIV	= xHS_DIV;
		}
	}

	if (sHS_DIV == 0)
     ab6:	44 23       	and	r20, r20
     ab8:	11 f1       	breq	.+68     	; 0xafe <L_C_363+0x15c>
		return false;

	Si570_N      = sN;
     aba:	1c 01       	movw	r2, r24
	Si570_N1     = sN1;
     abc:	40 2e       	mov	r4, r16
	Si570_HS_DIV = sHS_DIV;
     abe:	54 2e       	mov	r5, r20
		Si570CalcRFREQ(freq);
		Si570Write();
	}
	else
	{
		if (!Si570CalcDivider(freq) || !Si570CalcRFREQ(freq))
     ac0:	69 81       	ldd	r22, Y+1	; 0x01
     ac2:	7a 81       	ldd	r23, Y+2	; 0x02
     ac4:	8b 81       	ldd	r24, Y+3	; 0x03
     ac6:	9c 81       	ldd	r25, Y+4	; 0x04
     ac8:	34 de       	rcall	.-920    	; 0x732 <Si570CalcRFREQ>
     aca:	88 23       	and	r24, r24
     acc:	c1 f0       	breq	.+48     	; 0xafe <L_C_363+0x15c>
			return;

		FreqSmoothTune = freq;
     ace:	89 81       	ldd	r24, Y+1	; 0x01
     ad0:	9a 81       	ldd	r25, Y+2	; 0x02
     ad2:	ab 81       	ldd	r26, Y+3	; 0x03
     ad4:	bc 81       	ldd	r27, Y+4	; 0x04
     ad6:	80 93 bf 00 	sts	0x00BF, r24
     ada:	90 93 c0 00 	sts	0x00C0, r25
     ade:	a0 93 c1 00 	sts	0x00C1, r26
     ae2:	b0 93 c2 00 	sts	0x00C2, r27
}

static void
Si570FreezeNCO(void)
{
	Si570CmdReg(137, 0x10);
     ae6:	89 e8       	ldi	r24, 0x89	; 137
     ae8:	60 e1       	ldi	r22, 0x10	; 16
     aea:	d3 de       	rcall	.-602    	; 0x892 <Si570CmdReg>

static void
Si570Load(void)
{
	Si570FreezeNCO();
	if (I2CErrors == 0)
     aec:	88 20       	and	r8, r8
     aee:	39 f4       	brne	.+14     	; 0xafe <L_C_363+0x15c>
	{
		Si570Write();
     af0:	da de       	rcall	.-588    	; 0x8a6 <Si570Write>
}

static void
Si570UnFreezeNCO(void)
{
	Si570CmdReg(137, 0x00);
     af2:	89 e8       	ldi	r24, 0x89	; 137
     af4:	60 e0       	ldi	r22, 0x00	; 0
     af6:	cd de       	rcall	.-614    	; 0x892 <Si570CmdReg>
}

static void
Si570NewFreq(void)
{
	Si570CmdReg(135, 0x40);
     af8:	87 e8       	ldi	r24, 0x87	; 135
     afa:	60 e4       	ldi	r22, 0x40	; 64
     afc:	ca de       	rcall	.-620    	; 0x892 <Si570CmdReg>
		return;

	Si570Load();

#endif
}
     afe:	28 96       	adiw	r28, 0x08	; 8
     b00:	0f b6       	in	r0, 0x3f	; 63
     b02:	f8 94       	cli
     b04:	de bf       	out	0x3e, r29	; 62
     b06:	0f be       	out	0x3f, r0	; 63
     b08:	cd bf       	out	0x3d, r28	; 61
     b0a:	cf 91       	pop	r28
     b0c:	df 91       	pop	r29
     b0e:	1f 91       	pop	r17
     b10:	0f 91       	pop	r16
     b12:	ff 90       	pop	r15
     b14:	ef 90       	pop	r14
     b16:	df 90       	pop	r13
     b18:	cf 90       	pop	r12
     b1a:	bf 90       	pop	r11
     b1c:	af 90       	pop	r10
     b1e:	08 95       	ret

00000b20 <DeviceInit>:
void
DeviceInit(void)
{
	// Check if Si570 is online and intialize if nessesary
	// SCL Low is now power on the SI570 chip in the Softrock V9
	if ((I2C_PIN & _BV(BIT_SCL)) != 0)
     b20:	b3 9b       	sbis	0x16, 3	; 22
     b22:	15 c0       	rjmp	.+42     	; 0xb4e <DeviceInit+0x2e>
	{
		if (SI570_OffLine)
     b24:	77 20       	and	r7, r7
     b26:	a9 f0       	breq	.+42     	; 0xb52 <DeviceInit+0x32>
		{
#if INCLUDE_SMOOTH
			FreqSmoothTune = 0;				// Next SetFreq call no smoodtune
     b28:	10 92 bf 00 	sts	0x00BF, r1
     b2c:	10 92 c0 00 	sts	0x00C0, r1
     b30:	10 92 c1 00 	sts	0x00C1, r1
     b34:	10 92 c2 00 	sts	0x00C2, r1
#endif
			SetFreq(R.Freq);
     b38:	60 91 65 00 	lds	r22, 0x0065
     b3c:	70 91 66 00 	lds	r23, 0x0066
     b40:	80 91 67 00 	lds	r24, 0x0067
     b44:	90 91 68 00 	lds	r25, 0x0068
     b48:	c6 de       	rcall	.-628    	; 0x8d6 <SetFreq>

			SI570_OffLine = I2CErrors;
     b4a:	78 2c       	mov	r7, r8
     b4c:	08 95       	ret
		}
	}
	else 
	{
		SI570_OffLine = true;
     b4e:	77 24       	eor	r7, r7
     b50:	73 94       	inc	r7
     b52:	08 95       	ret

00000b54 <usbCrc16>:
;   poly    r20+r21
;   scratch r23
;   resCrc  r24+r25 / r16+r17
;   ptr     X / Z
usbCrc16:
    mov     ptrL, argPtrL
     b54:	a8 2f       	mov	r26, r24
    mov     ptrH, argPtrH
     b56:	b9 2f       	mov	r27, r25
    ldi     resCrcL, 0
     b58:	80 e0       	ldi	r24, 0x00	; 0
    ldi     resCrcH, 0
     b5a:	90 e0       	ldi	r25, 0x00	; 0
    ldi     polyL, lo8(0xa001)
     b5c:	41 e0       	ldi	r20, 0x01	; 1
    ldi     polyH, hi8(0xa001)
     b5e:	50 ea       	ldi	r21, 0xA0	; 160
    com     argLen      ; argLen = -argLen - 1: modified loop to ensure that carry is set
     b60:	60 95       	com	r22
    ldi     bitCnt, 0   ; loop counter with starnd condition = end condition
     b62:	30 e0       	ldi	r19, 0x00	; 0
    rjmp    usbCrcLoopEntry
     b64:	09 c0       	rjmp	.+18     	; 0xb78 <usbCrcLoopEntry>

00000b66 <usbCrcByteLoop>:
usbCrcByteLoop:
    ld      byte, ptr+
     b66:	2d 91       	ld	r18, X+
    eor     resCrcL, byte
     b68:	82 27       	eor	r24, r18

00000b6a <usbCrcBitLoop>:
usbCrcBitLoop:
    ror     resCrcH     ; carry is always set here (see brcs jumps to here)
     b6a:	97 95       	ror	r25
    ror     resCrcL
     b6c:	87 95       	ror	r24
    brcs    usbCrcNoXor
     b6e:	10 f0       	brcs	.+4      	; 0xb74 <usbCrcNoXor>
    eor     resCrcL, polyL
     b70:	84 27       	eor	r24, r20
    eor     resCrcH, polyH
     b72:	95 27       	eor	r25, r21

00000b74 <usbCrcNoXor>:
usbCrcNoXor:
    subi    bitCnt, 224 ; (8 * 224) % 256 = 0; this loop iterates 8 times
     b74:	30 5e       	subi	r19, 0xE0	; 224
    brcs    usbCrcBitLoop
     b76:	c8 f3       	brcs	.-14     	; 0xb6a <usbCrcBitLoop>

00000b78 <usbCrcLoopEntry>:
usbCrcLoopEntry:
    subi    argLen, -1
     b78:	6f 5f       	subi	r22, 0xFF	; 255
    brcs    usbCrcByteLoop
     b7a:	a8 f3       	brcs	.-22     	; 0xb66 <usbCrcByteLoop>

00000b7c <usbCrcReady>:
usbCrcReady:
    ret
     b7c:	08 95       	ret

00000b7e <usbCrc16Append>:

#endif /* USB_USE_FAST_CRC */

; extern unsigned usbCrc16Append(unsigned char *data, unsigned char len);
usbCrc16Append:
    rcall   usbCrc16
     b7e:	ea df       	rcall	.-44     	; 0xb54 <usbCrc16>
    st      ptr+, resCrcL
     b80:	8d 93       	st	X+, r24
    st      ptr+, resCrcH
     b82:	9d 93       	st	X+, r25
    ret
     b84:	08 95       	ret

00000b86 <usbMeasureFrameLength>:

; extern unsigned usbMeasurePacketLength(void);
; returns time between two idle strobes in multiples of 7 CPU clocks
.global usbMeasureFrameLength
usbMeasureFrameLength:
    ldi     cntH, 6         ; wait ~ 10 ms for D- == 0
     b86:	a6 e0       	ldi	r26, 0x06	; 6
    clr     cnt16L
     b88:	88 27       	eor	r24, r24
    clr     cnt16H
     b8a:	99 27       	eor	r25, r25

00000b8c <usbMFTime16>:
usbMFTime16:
    dec     cntH
     b8c:	aa 95       	dec	r26
    breq    usbMFTimeout
     b8e:	69 f0       	breq	.+26     	; 0xbaa <usbMFTimeout>

00000b90 <usbMFWaitStrobe>:
usbMFWaitStrobe:            ; first wait for D- == 0 (idle strobe)
    sbiw    cnt16, 1        ;[0] [6]
     b90:	01 97       	sbiw	r24, 0x01	; 1
    breq    usbMFTime16     ;[2]
     b92:	e1 f3       	breq	.-8      	; 0xb8c <usbMFTime16>
    sbic    USBIN, USBMINUS ;[3]
     b94:	b2 99       	sbic	0x16, 2	; 22
    rjmp    usbMFWaitStrobe ;[4]
     b96:	fc cf       	rjmp	.-8      	; 0xb90 <usbMFWaitStrobe>

00000b98 <usbMFWaitIdle>:
usbMFWaitIdle:              ; then wait until idle again
    sbis    USBIN, USBMINUS ;1 wait for D- == 1
     b98:	b2 9b       	sbis	0x16, 2	; 22
    rjmp    usbMFWaitIdle   ;2
     b9a:	fe cf       	rjmp	.-4      	; 0xb98 <usbMFWaitIdle>
    ldi     cnt16L, 1       ;1 represents cycles so far
     b9c:	81 e0       	ldi	r24, 0x01	; 1
    clr     cnt16H          ;1
     b9e:	99 27       	eor	r25, r25

00000ba0 <usbMFWaitLoop>:
usbMFWaitLoop:
    in      cntH, USBIN     ;[0] [7]
     ba0:	a6 b3       	in	r26, 0x16	; 22
    adiw    cnt16, 1        ;[1]
     ba2:	01 96       	adiw	r24, 0x01	; 1
    breq    usbMFTimeout    ;[3]
     ba4:	11 f0       	breq	.+4      	; 0xbaa <usbMFTimeout>
    andi    cntH, USBMASK   ;[4]
     ba6:	a5 70       	andi	r26, 0x05	; 5
    brne    usbMFWaitLoop   ;[5]
     ba8:	d9 f7       	brne	.-10     	; 0xba0 <usbMFWaitLoop>

00000baa <usbMFTimeout>:
usbMFTimeout:
#if resL != cnt16L
    mov     resL, cnt16L
    mov     resH, cnt16H
#endif
    ret
     baa:	08 95       	ret

00000bac <__vector_1>:
; when instruction starts


USB_INTR_VECTOR:
;order of registers pushed: YL, SREG [sofError], r0, YH, shift, x1, x2, x3, x4, cnt
    push    YL                  ;[-23] push only what is necessary to sync with edge ASAP
     bac:	cf 93       	push	r28
    in      YL, SREG            ;[-21]
     bae:	cf b7       	in	r28, 0x3f	; 63
    push    YL                  ;[-20]
     bb0:	cf 93       	push	r28

00000bb2 <waitForJ>:
;sync up with J to K edge during sync pattern -- use fastest possible loops
;The first part waits at most 1 bit long since we must be in sync pattern.
;YL is guarenteed to be < 0x80 because I flag is clear. When we jump to
;waitForJ, ensure that this prerequisite is met.
waitForJ:
    inc     YL
     bb2:	c3 95       	inc	r28
    sbis    USBIN, USBMINUS
     bb4:	b2 9b       	sbis	0x16, 2	; 22
    brne    waitForJ        ; just make sure we have ANY timeout
     bb6:	e9 f7       	brne	.-6      	; 0xbb2 <waitForJ>

00000bb8 <waitForK>:
waitForK:
;The following code results in a sampling window of < 1/4 bit which meets the spec.
    sbis    USBIN, USBMINUS     ;[-15]
     bb8:	b2 9b       	sbis	0x16, 2	; 22
    rjmp    foundK              ;[-14]
     bba:	0b c0       	rjmp	.+22     	; 0xbd2 <foundK>
    sbis    USBIN, USBMINUS
     bbc:	b2 9b       	sbis	0x16, 2	; 22
    rjmp    foundK
     bbe:	09 c0       	rjmp	.+18     	; 0xbd2 <foundK>
    sbis    USBIN, USBMINUS
     bc0:	b2 9b       	sbis	0x16, 2	; 22
    rjmp    foundK
     bc2:	07 c0       	rjmp	.+14     	; 0xbd2 <foundK>
    sbis    USBIN, USBMINUS
     bc4:	b2 9b       	sbis	0x16, 2	; 22
    rjmp    foundK
     bc6:	05 c0       	rjmp	.+10     	; 0xbd2 <foundK>
    sbis    USBIN, USBMINUS
     bc8:	b2 9b       	sbis	0x16, 2	; 22
    rjmp    foundK
     bca:	03 c0       	rjmp	.+6      	; 0xbd2 <foundK>
    sbis    USBIN, USBMINUS
     bcc:	b2 9b       	sbis	0x16, 2	; 22
    rjmp    foundK
     bce:	01 c0       	rjmp	.+2      	; 0xbd2 <foundK>
    sts     usbSofCount, YL
#endif  /* USB_COUNT_SOF */
#ifdef USB_SOF_HOOK
    USB_SOF_HOOK
#endif
    rjmp    sofError
     bd0:	d3 c0       	rjmp	.+422    	; 0xd78 <sofError>

00000bd2 <foundK>:
foundK:                         ;[-12]
;{3, 5} after falling D- edge, average delay: 4 cycles [we want 5 for center sampling]
;we have 1 bit time for setup purposes, then sample again. Numbers in brackets
;are cycles from center of first sync (double K) bit after the instruction
    push    r0                  ;[-12]
     bd2:	0f 92       	push	r0
;   [---]                       ;[-11]
    push    YH                  ;[-10]
     bd4:	df 93       	push	r29
;   [---]                       ;[-9]
    lds     YL, usbInputBufOffset;[-8]
     bd6:	c0 91 d0 00 	lds	r28, 0x00D0
;   [---]                       ;[-7]
    clr     YH                  ;[-6]
     bda:	dd 27       	eor	r29, r29
    subi    YL, lo8(-(usbRxBuf));[-5] [rx loop init]
     bdc:	c9 52       	subi	r28, 0x29	; 41
    sbci    YH, hi8(-(usbRxBuf));[-4] [rx loop init]
     bde:	df 4f       	sbci	r29, 0xFF	; 255
    mov     r0, x2              ;[-3] [rx loop init]
     be0:	01 2e       	mov	r0, r17
    sbis    USBIN, USBMINUS     ;[-2] we want two bits K (sample 2 cycles too early)
     be2:	b2 9b       	sbis	0x16, 2	; 22
    rjmp    haveTwoBitsK        ;[-1]
     be4:	03 c0       	rjmp	.+6      	; 0xbec <haveTwoBitsK>
    pop     YH                  ;[0] undo the pushes from before
     be6:	df 91       	pop	r29
    pop     r0                  ;[2]
     be8:	0f 90       	pop	r0
    rjmp    waitForK            ;[4] this was not the end of sync, retry
     bea:	e6 cf       	rjmp	.-52     	; 0xbb8 <waitForK>

00000bec <haveTwoBitsK>:

;----------------------------------------------------------------------------
; push more registers and initialize values while we sample the first bits:
;----------------------------------------------------------------------------
haveTwoBitsK:               ;[1]
    push    shift           ;[1]
     bec:	2f 93       	push	r18
    push    x1              ;[3]
     bee:	0f 93       	push	r16
    push    x2              ;[5]
     bf0:	1f 93       	push	r17
    push    x3              ;[7]
     bf2:	4f 93       	push	r20
    ldi     shift, 0xff     ;[9] [rx loop init]
     bf4:	2f ef       	ldi	r18, 0xFF	; 255
    ori     x3, 0xff        ;[10] [rx loop init] == ser x3, clear zero flag
     bf6:	4f 6f       	ori	r20, 0xFF	; 255

    in      x1, USBIN       ;[11] <-- sample bit 0
     bf8:	06 b3       	in	r16, 0x16	; 22
    bst     x1, USBMINUS    ;[12]
     bfa:	02 fb       	bst	r16, 2
    bld     shift, 0        ;[13]
     bfc:	20 f9       	bld	r18, 0
    push    x4              ;[14] == phase
     bfe:	5f 93       	push	r21
;   [---]                   ;[15]
    push    cnt             ;[16]
     c00:	3f 93       	push	r19
;   [---]                   ;[17]
    ldi     phase, 0        ;[18] [rx loop init]
     c02:	50 e0       	ldi	r21, 0x00	; 0
    ldi     cnt, USB_BUFSIZE;[19] [rx loop init]
     c04:	3b e0       	ldi	r19, 0x0B	; 11
    rjmp    rxbit1          ;[20]
     c06:	65 c0       	rjmp	.+202    	; 0xcd2 <rxbit1>

00000c08 <continueWithBit5>:
bit 7: jump, fixup bitstuff
; 87 [+ 2] cycles
------------------------------------------------------------------
*/
continueWithBit5:
    in      x2, USBIN       ;[055] <-- bit 5
     c08:	16 b3       	in	r17, 0x16	; 22
    eor     r0, x2          ;[056]
     c0a:	01 26       	eor	r0, r17
    or      phase, r0       ;[057]
     c0c:	50 29       	or	r21, r0
    sbrc    phase, USBMINUS ;[058]
     c0e:	52 fd       	sbrc	r21, 2
    lpm                     ;[059] optional nop3; modifies r0
     c10:	c8 95       	lpm
    in      phase, USBIN    ;[060] <-- phase
     c12:	56 b3       	in	r21, 0x16	; 22
    eor     x1, x2          ;[061]
     c14:	01 27       	eor	r16, r17
    bst     x1, USBMINUS    ;[062]
     c16:	02 fb       	bst	r16, 2
    bld     shift, 5        ;[063]
     c18:	25 f9       	bld	r18, 5
    andi    shift, 0x3f     ;[064]
     c1a:	2f 73       	andi	r18, 0x3F	; 63
    in      x1, USBIN       ;[065] <-- bit 6
     c1c:	06 b3       	in	r16, 0x16	; 22
    breq    unstuff5        ;[066] *** unstuff escape
     c1e:	b1 f0       	breq	.+44     	; 0xc4c <unstuff5>
    eor     phase, x1       ;[067]
     c20:	50 27       	eor	r21, r16
    eor     x2, x1          ;[068]
     c22:	10 27       	eor	r17, r16
    bst     x2, USBMINUS    ;[069]
     c24:	12 fb       	bst	r17, 2
    bld     shift, 6        ;[070]
     c26:	26 f9       	bld	r18, 6

00000c28 <didUnstuff6>:
didUnstuff6:                ;[   ]
    in      r0, USBIN       ;[071] <-- phase
     c28:	06 b2       	in	r0, 0x16	; 22
    cpi     shift, 0x02     ;[072]
     c2a:	22 30       	cpi	r18, 0x02	; 2
    brlo    unstuff6        ;[073] *** unstuff escape
     c2c:	f0 f0       	brcs	.+60     	; 0xc6a <unstuff6>

00000c2e <didUnstuff5>:
didUnstuff5:                ;[   ]
    nop2                    ;[074]
     c2e:	00 c0       	rjmp	.+0      	; 0xc30 <didUnstuff5+0x2>
;   [---]                   ;[075]
    in      x2, USBIN       ;[076] <-- bit 7
     c30:	16 b3       	in	r17, 0x16	; 22
    eor     x1, x2          ;[077]
     c32:	01 27       	eor	r16, r17
    bst     x1, USBMINUS    ;[078]
     c34:	02 fb       	bst	r16, 2
    bld     shift, 7        ;[079]
     c36:	27 f9       	bld	r18, 7

00000c38 <didUnstuff7>:
didUnstuff7:                ;[   ]
    eor     r0, x2          ;[080]
     c38:	01 26       	eor	r0, r17
    or      phase, r0       ;[081]
     c3a:	50 29       	or	r21, r0
    in      r0, USBIN       ;[082] <-- phase
     c3c:	06 b2       	in	r0, 0x16	; 22
    cpi     shift, 0x04     ;[083]
     c3e:	24 30       	cpi	r18, 0x04	; 4
    brsh    rxLoop          ;[084]
     c40:	e8 f5       	brcc	.+122    	; 0xcbc <rxLoop>

00000c42 <unstuff7>:
;   [---]                   ;[085]
unstuff7:                   ;[   ]
    andi    x3, ~0x80       ;[085]
     c42:	4f 77       	andi	r20, 0x7F	; 127
    ori     shift, 0x80     ;[086]
     c44:	20 68       	ori	r18, 0x80	; 128
    in      x2, USBIN       ;[087] <-- sample stuffed bit 7
     c46:	16 b3       	in	r17, 0x16	; 22
    nop                     ;[088]
     c48:	00 00       	nop
    rjmp    didUnstuff7     ;[089]
     c4a:	f6 cf       	rjmp	.-20     	; 0xc38 <didUnstuff7>

00000c4c <unstuff5>:
;   [---]                   ;[090]
                            ;[080]

unstuff5:                   ;[067]
    eor     phase, x1       ;[068]
     c4c:	50 27       	eor	r21, r16
    andi    x3, ~0x20       ;[069]
     c4e:	4f 7d       	andi	r20, 0xDF	; 223
    ori     shift, 0x20     ;[070]
     c50:	20 62       	ori	r18, 0x20	; 32
    in      r0, USBIN       ;[071] <-- phase
     c52:	06 b2       	in	r0, 0x16	; 22
    mov     x2, x1          ;[072]
     c54:	10 2f       	mov	r17, r16
    nop                     ;[073]
     c56:	00 00       	nop
    nop2                    ;[074]
     c58:	00 c0       	rjmp	.+0      	; 0xc5a <unstuff5+0xe>
;   [---]                   ;[075]
    in      x1, USBIN       ;[076] <-- bit 6
     c5a:	06 b3       	in	r16, 0x16	; 22
    eor     r0, x1          ;[077]
     c5c:	00 26       	eor	r0, r16
    or      phase, r0       ;[078]
     c5e:	50 29       	or	r21, r0
    eor     x2, x1          ;[079]
     c60:	10 27       	eor	r17, r16
    bst     x2, USBMINUS    ;[080]
     c62:	12 fb       	bst	r17, 2
    bld     shift, 6        ;[081] no need to check bitstuffing, we just had one
     c64:	26 f9       	bld	r18, 6
    in      r0, USBIN       ;[082] <-- phase
     c66:	06 b2       	in	r0, 0x16	; 22
    rjmp    didUnstuff5     ;[083]
     c68:	e2 cf       	rjmp	.-60     	; 0xc2e <didUnstuff5>

00000c6a <unstuff6>:
;   [---]                   ;[084]
                            ;[074]

unstuff6:                   ;[074]
    andi    x3, ~0x40       ;[075]
     c6a:	4f 7b       	andi	r20, 0xBF	; 191
    in      x1, USBIN       ;[076] <-- bit 6 again
     c6c:	06 b3       	in	r16, 0x16	; 22
    ori     shift, 0x40     ;[077]
     c6e:	20 64       	ori	r18, 0x40	; 64
    nop2                    ;[078]
     c70:	00 c0       	rjmp	.+0      	; 0xc72 <unstuff6+0x8>
;   [---]                   ;[079]
    rjmp    didUnstuff6     ;[080]
     c72:	da cf       	rjmp	.-76     	; 0xc28 <didUnstuff6>

00000c74 <unstuff0>:
;   [---]                   ;[081]
                            ;[071]

unstuff0:                   ;[013]
    eor     r0, x2          ;[014]
     c74:	01 26       	eor	r0, r17
    or      phase, r0       ;[015]
     c76:	50 29       	or	r21, r0
    andi    x2, USBMASK     ;[016] check for SE0
     c78:	15 70       	andi	r17, 0x05	; 5
    in      r0, USBIN       ;[017] <-- phase
     c7a:	06 b2       	in	r0, 0x16	; 22
    breq    didUnstuff0     ;[018] direct jump to se0 would be too long
     c7c:	69 f1       	breq	.+90     	; 0xcd8 <didUnstuff0>
    andi    x3, ~0x01       ;[019]
     c7e:	4e 7f       	andi	r20, 0xFE	; 254
    ori     shift, 0x01     ;[020]
     c80:	21 60       	ori	r18, 0x01	; 1
    mov     x1, x2          ;[021] mov existing sample
     c82:	01 2f       	mov	r16, r17
    in      x2, USBIN       ;[022] <-- bit 1 again
     c84:	16 b3       	in	r17, 0x16	; 22
    rjmp    didUnstuff0     ;[023]
     c86:	28 c0       	rjmp	.+80     	; 0xcd8 <didUnstuff0>

00000c88 <unstuff1>:
;   [---]                   ;[024]
                            ;[014]

unstuff1:                   ;[024]
    eor     r0, x1          ;[025]
     c88:	00 26       	eor	r0, r16
    or      phase, r0       ;[026]
     c8a:	50 29       	or	r21, r0
    andi    x3, ~0x02       ;[027]
     c8c:	4d 7f       	andi	r20, 0xFD	; 253
    in      r0, USBIN       ;[028] <-- phase
     c8e:	06 b2       	in	r0, 0x16	; 22
    ori     shift, 0x02     ;[029]
     c90:	22 60       	ori	r18, 0x02	; 2
    mov     x2, x1          ;[030]
     c92:	10 2f       	mov	r17, r16
    rjmp    didUnstuff1     ;[031]
     c94:	29 c0       	rjmp	.+82     	; 0xce8 <didUnstuff1>

00000c96 <unstuff2>:
;   [---]                   ;[032]
                            ;[022]

unstuff2:                   ;[035]
    eor     r0, x2          ;[036]
     c96:	01 26       	eor	r0, r17
    or      phase, r0       ;[037]
     c98:	50 29       	or	r21, r0
    andi    x3, ~0x04       ;[038]
     c9a:	4b 7f       	andi	r20, 0xFB	; 251
    in      r0, USBIN       ;[039] <-- phase
     c9c:	06 b2       	in	r0, 0x16	; 22
    ori     shift, 0x04     ;[040]
     c9e:	24 60       	ori	r18, 0x04	; 4
    mov     x1, x2          ;[041]
     ca0:	01 2f       	mov	r16, r17
    rjmp    didUnstuff2     ;[042]
     ca2:	2d c0       	rjmp	.+90     	; 0xcfe <didUnstuff2>

00000ca4 <unstuff3>:
;   [---]                   ;[043]
                            ;[033]

unstuff3:                   ;[043]
    in      x2, USBIN       ;[044] <-- bit 3 again
     ca4:	16 b3       	in	r17, 0x16	; 22
    eor     r0, x2          ;[045]
     ca6:	01 26       	eor	r0, r17
    or      phase, r0       ;[046]
     ca8:	50 29       	or	r21, r0
    andi    x3, ~0x08       ;[047]
     caa:	47 7f       	andi	r20, 0xF7	; 247
    ori     shift, 0x08     ;[048]
     cac:	28 60       	ori	r18, 0x08	; 8
    nop                     ;[049]
     cae:	00 00       	nop
    in      r0, USBIN       ;[050] <-- phase
     cb0:	06 b2       	in	r0, 0x16	; 22
    rjmp    didUnstuff3     ;[051]
     cb2:	2e c0       	rjmp	.+92     	; 0xd10 <didUnstuff3>

00000cb4 <unstuff4>:
;   [---]                   ;[052]
                            ;[042]

unstuff4:                   ;[053]
    andi    x3, ~0x10       ;[054]
     cb4:	4f 7e       	andi	r20, 0xEF	; 239
    in      x1, USBIN       ;[055] <-- bit 4 again
     cb6:	06 b3       	in	r16, 0x16	; 22
    ori     shift, 0x10     ;[056]
     cb8:	20 61       	ori	r18, 0x10	; 16
    rjmp    didUnstuff4     ;[057]
     cba:	30 c0       	rjmp	.+96     	; 0xd1c <didUnstuff4>

00000cbc <rxLoop>:
;   [---]                   ;[058]
                            ;[048]

rxLoop:                     ;[085]
    eor     x3, shift       ;[086] reconstruct: x3 is 0 at bit locations we changed, 1 at others
     cbc:	42 27       	eor	r20, r18
    in      x1, USBIN       ;[000] <-- bit 0
     cbe:	06 b3       	in	r16, 0x16	; 22
    st      y+, x3          ;[001]
     cc0:	49 93       	st	Y+, r20
;   [---]                   ;[002]
    eor     r0, x1          ;[003]
     cc2:	00 26       	eor	r0, r16
    or      phase, r0       ;[004]
     cc4:	50 29       	or	r21, r0
    eor     x2, x1          ;[005]
     cc6:	10 27       	eor	r17, r16
    in      r0, USBIN       ;[006] <-- phase
     cc8:	06 b2       	in	r0, 0x16	; 22
    ser     x3              ;[007]
     cca:	4f ef       	ldi	r20, 0xFF	; 255
    bst     x2, USBMINUS    ;[008]
     ccc:	12 fb       	bst	r17, 2
    bld     shift, 0        ;[009]
     cce:	20 f9       	bld	r18, 0
    andi    shift, 0xf9     ;[010]
     cd0:	29 7f       	andi	r18, 0xF9	; 249

00000cd2 <rxbit1>:
rxbit1:                     ;[   ]
    in      x2, USBIN       ;[011] <-- bit 1
     cd2:	16 b3       	in	r17, 0x16	; 22
    breq    unstuff0        ;[012] *** unstuff escape
     cd4:	79 f2       	breq	.-98     	; 0xc74 <unstuff0>
    andi    x2, USBMASK     ;[013] SE0 check for bit 1
     cd6:	15 70       	andi	r17, 0x05	; 5

00000cd8 <didUnstuff0>:
didUnstuff0:                ;[   ] Z only set if we detected SE0 in bitstuff
    breq    se0             ;[014]
     cd8:	59 f1       	breq	.+86     	; 0xd30 <se0>
    eor     r0, x2          ;[015]
     cda:	01 26       	eor	r0, r17
    or      phase, r0       ;[016]
     cdc:	50 29       	or	r21, r0
    in      r0, USBIN       ;[017] <-- phase
     cde:	06 b2       	in	r0, 0x16	; 22
    eor     x1, x2          ;[018]
     ce0:	01 27       	eor	r16, r17
    bst     x1, USBMINUS    ;[019]
     ce2:	02 fb       	bst	r16, 2
    bld     shift, 1        ;[020]
     ce4:	21 f9       	bld	r18, 1
    andi    shift, 0xf3     ;[021]
     ce6:	23 7f       	andi	r18, 0xF3	; 243

00000ce8 <didUnstuff1>:
didUnstuff1:                ;[   ]
    in      x1, USBIN       ;[022] <-- bit 2
     ce8:	06 b3       	in	r16, 0x16	; 22
    breq    unstuff1        ;[023] *** unstuff escape
     cea:	71 f2       	breq	.-100    	; 0xc88 <unstuff1>
    eor     r0, x1          ;[024]
     cec:	00 26       	eor	r0, r16
    or      phase, r0       ;[025]
     cee:	50 29       	or	r21, r0
    subi    cnt, 1          ;[026] overflow check
     cf0:	31 50       	subi	r19, 0x01	; 1
    brcs    overflow        ;[027]
     cf2:	d0 f0       	brcs	.+52     	; 0xd28 <overflow>
    in      r0, USBIN       ;[028] <-- phase
     cf4:	06 b2       	in	r0, 0x16	; 22
    eor     x2, x1          ;[029]
     cf6:	10 27       	eor	r17, r16
    bst     x2, USBMINUS    ;[030]
     cf8:	12 fb       	bst	r17, 2
    bld     shift, 2        ;[031]
     cfa:	22 f9       	bld	r18, 2
    andi    shift, 0xe7     ;[032]
     cfc:	27 7e       	andi	r18, 0xE7	; 231

00000cfe <didUnstuff2>:
didUnstuff2:                ;[   ]
    in      x2, USBIN       ;[033] <-- bit 3
     cfe:	16 b3       	in	r17, 0x16	; 22
    breq    unstuff2        ;[034] *** unstuff escape
     d00:	51 f2       	breq	.-108    	; 0xc96 <unstuff2>
    eor     r0, x2          ;[035]
     d02:	01 26       	eor	r0, r17
    or      phase, r0       ;[036]
     d04:	50 29       	or	r21, r0
    eor     x1, x2          ;[037]
     d06:	01 27       	eor	r16, r17
    bst     x1, USBMINUS    ;[038]
     d08:	02 fb       	bst	r16, 2
    in      r0, USBIN       ;[039] <-- phase
     d0a:	06 b2       	in	r0, 0x16	; 22
    bld     shift, 3        ;[040]
     d0c:	23 f9       	bld	r18, 3
    andi    shift, 0xcf     ;[041]
     d0e:	2f 7c       	andi	r18, 0xCF	; 207

00000d10 <didUnstuff3>:
didUnstuff3:                ;[   ]
    breq    unstuff3        ;[042] *** unstuff escape
     d10:	49 f2       	breq	.-110    	; 0xca4 <unstuff3>
    nop                     ;[043]
     d12:	00 00       	nop
    in      x1, USBIN       ;[044] <-- bit 4
     d14:	06 b3       	in	r16, 0x16	; 22
    eor     x2, x1          ;[045]
     d16:	10 27       	eor	r17, r16
    bst     x2, USBMINUS    ;[046]
     d18:	12 fb       	bst	r17, 2
    bld     shift, 4        ;[047]
     d1a:	24 f9       	bld	r18, 4

00000d1c <didUnstuff4>:
didUnstuff4:                ;[   ]
    eor     r0, x1          ;[048]
     d1c:	00 26       	eor	r0, r16
    or      phase, r0       ;[049]
     d1e:	50 29       	or	r21, r0
    in      r0, USBIN       ;[050] <-- phase
     d20:	06 b2       	in	r0, 0x16	; 22
    andi    shift, 0x9f     ;[051]
     d22:	2f 79       	andi	r18, 0x9F	; 159
    breq    unstuff4        ;[052] *** unstuff escape
     d24:	39 f2       	breq	.-114    	; 0xcb4 <unstuff4>
    rjmp    continueWithBit5;[053]
     d26:	70 cf       	rjmp	.-288    	; 0xc08 <continueWithBit5>

00000d28 <overflow>:
*/

#define token   x1

overflow:
    ldi     x2, 1<<USB_INTR_PENDING_BIT
     d28:	10 e4       	ldi	r17, 0x40	; 64
    USB_STORE_PENDING(x2)       ; clear any pending interrupts
     d2a:	1a bf       	out	0x3a, r17	; 58

00000d2c <ignorePacket>:
ignorePacket:
    clr     token
     d2c:	00 27       	eor	r16, r16
    rjmp    storeTokenAndReturn
     d2e:	17 c0       	rjmp	.+46     	; 0xd5e <handleSetupOrOut>

00000d30 <se0>:
; Processing of received packet (numbers in brackets are cycles after center of SE0)
;----------------------------------------------------------------------------
;This is the only non-error exit point for the software receiver loop
;we don't check any CRCs here because there is no time left.
se0:
    subi    cnt, USB_BUFSIZE    ;[5]
     d30:	3b 50       	subi	r19, 0x0B	; 11
    neg     cnt                 ;[6]
     d32:	31 95       	neg	r19
    sub     YL, cnt             ;[7]
     d34:	c3 1b       	sub	r28, r19
    sbci    YH, 0               ;[8]
     d36:	d0 40       	sbci	r29, 0x00	; 0
    ldi     x2, 1<<USB_INTR_PENDING_BIT ;[9]
     d38:	10 e4       	ldi	r17, 0x40	; 64
    USB_STORE_PENDING(x2)       ;[10] clear pending intr and check flag later. SE0 should be over.
     d3a:	1a bf       	out	0x3a, r17	; 58
    ld      token, y            ;[11]
     d3c:	08 81       	ld	r16, Y
    cpi     token, USBPID_DATA0 ;[13]
     d3e:	03 3c       	cpi	r16, 0xC3	; 195
    breq    handleData          ;[14]
     d40:	f9 f0       	breq	.+62     	; 0xd80 <handleData>
    cpi     token, USBPID_DATA1 ;[15]
     d42:	0b 34       	cpi	r16, 0x4B	; 75
    breq    handleData          ;[16]
     d44:	e9 f0       	breq	.+58     	; 0xd80 <handleData>
    lds     shift, usbDeviceAddr;[17]
     d46:	20 91 ce 00 	lds	r18, 0x00CE
    ldd     x2, y+1             ;[19] ADDR and 1 bit endpoint number
     d4a:	19 81       	ldd	r17, Y+1	; 0x01
    lsl     x2                  ;[21] shift out 1 bit endpoint number
     d4c:	11 0f       	add	r17, r17
    cpse    x2, shift           ;[22]
     d4e:	12 13       	cpse	r17, r18
    rjmp    ignorePacket        ;[23]
     d50:	ed cf       	rjmp	.-38     	; 0xd2c <ignorePacket>
/* only compute endpoint number in x3 if required later */
#if USB_CFG_HAVE_INTRIN_ENDPOINT || USB_CFG_IMPLEMENT_FN_WRITEOUT
    ldd     x3, y+2             ;[24] endpoint number + crc
    rol     x3                  ;[26] shift in LSB of endpoint
#endif
    cpi     token, USBPID_IN    ;[27]
     d52:	09 36       	cpi	r16, 0x69	; 105
    breq    handleIn            ;[28]
     d54:	51 f1       	breq	.+84     	; 0xdaa <handleIn>
    cpi     token, USBPID_SETUP ;[29]
     d56:	0d 32       	cpi	r16, 0x2D	; 45
    breq    handleSetupOrOut    ;[30]
     d58:	11 f0       	breq	.+4      	; 0xd5e <handleSetupOrOut>
    cpi     token, USBPID_OUT   ;[31]
     d5a:	01 3e       	cpi	r16, 0xE1	; 225
    brne    ignorePacket        ;[32] must be ack, nak or whatever
     d5c:	39 f7       	brne	.-50     	; 0xd2c <ignorePacket>

00000d5e <handleSetupOrOut>:
    andi    x3, 0xf             ;[32]
    breq    storeTokenAndReturn ;[33]
    mov     token, x3           ;[34] indicate that this is endpoint x OUT
#endif
storeTokenAndReturn:
    sts     usbCurrentTok, token;[35]
     d5e:	00 93 d5 00 	sts	0x00D5, r16

00000d62 <doReturn>:
doReturn:
    POP_STANDARD                ;[37] 12...16 cycles
     d62:	3f 91       	pop	r19
     d64:	5f 91       	pop	r21
     d66:	4f 91       	pop	r20
     d68:	1f 91       	pop	r17
     d6a:	0f 91       	pop	r16
     d6c:	2f 91       	pop	r18
     d6e:	df 91       	pop	r29
     d70:	0f 90       	pop	r0
    USB_LOAD_PENDING(YL)        ;[49]
     d72:	ca b7       	in	r28, 0x3a	; 58
    sbrc    YL, USB_INTR_PENDING_BIT;[50] check whether data is already arriving
     d74:	c6 fd       	sbrc	r28, 6
    rjmp    waitForJ            ;[51] save the pops and pushes -- a new interrupt is already pending
     d76:	1d cf       	rjmp	.-454    	; 0xbb2 <waitForJ>

00000d78 <sofError>:
sofError:
    POP_RETI                    ;macro call
     d78:	cf 91       	pop	r28
     d7a:	cf bf       	out	0x3f, r28	; 63
     d7c:	cf 91       	pop	r28
    reti
     d7e:	18 95       	reti

00000d80 <handleData>:

handleData:
#if USB_CFG_CHECK_CRC
    CRC_CLEANUP_AND_CHECK       ; jumps to ignorePacket if CRC error
#endif
    lds     shift, usbCurrentTok;[18]
     d80:	20 91 d5 00 	lds	r18, 0x00D5
    tst     shift               ;[20]
     d84:	22 23       	and	r18, r18
    breq    doReturn            ;[21]
     d86:	69 f3       	breq	.-38     	; 0xd62 <doReturn>
    lds     x2, usbRxLen        ;[22]
     d88:	10 91 d3 00 	lds	r17, 0x00D3
    tst     x2                  ;[24]
     d8c:	11 23       	and	r17, r17
    brne    sendNakAndReti      ;[25]
     d8e:	21 f5       	brne	.+72     	; 0xdd8 <sendNakAndReti>
; 2006-03-11: The following two lines fix a problem where the device was not
; recognized if usbPoll() was called less frequently than once every 4 ms.
    cpi     cnt, 4              ;[26] zero sized data packets are status phase only -- ignore and ack
     d90:	34 30       	cpi	r19, 0x04	; 4
    brmi    sendAckAndReti      ;[27] keep rx buffer clean -- we must not NAK next SETUP
     d92:	22 f1       	brmi	.+72     	; 0xddc <sendAckAndReti>
#if USB_CFG_CHECK_DATA_TOGGLING
    sts     usbCurrentDataToken, token  ; store for checking by C code
#endif
    sts     usbRxLen, cnt       ;[28] store received data, swap buffers
     d94:	30 93 d3 00 	sts	0x00D3, r19
    sts     usbRxToken, shift   ;[30]
     d98:	20 93 cf 00 	sts	0x00CF, r18
    lds     x2, usbInputBufOffset;[32] swap buffers
     d9c:	10 91 d0 00 	lds	r17, 0x00D0
    ldi     cnt, USB_BUFSIZE    ;[34]
     da0:	3b e0       	ldi	r19, 0x0B	; 11
    sub     cnt, x2             ;[35]
     da2:	31 1b       	sub	r19, r17
    sts     usbInputBufOffset, cnt;[36] buffers now swapped
     da4:	30 93 d0 00 	sts	0x00D0, r19
    rjmp    sendAckAndReti      ;[38] 40 + 17 = 57 until SOP
     da8:	19 c0       	rjmp	.+50     	; 0xddc <sendAckAndReti>

00000daa <handleIn>:

handleIn:
;We don't send any data as long as the C code has not processed the current
;input data and potentially updated the output data. That's more efficient
;in terms of code size than clearing the tx buffers when a packet is received.
    lds     x1, usbRxLen        ;[30]
     daa:	00 91 d3 00 	lds	r16, 0x00D3
    cpi     x1, 1               ;[32] negative values are flow control, 0 means "buffer free"
     dae:	01 30       	cpi	r16, 0x01	; 1
    brge    sendNakAndReti      ;[33] unprocessed input packet?
     db0:	9c f4       	brge	.+38     	; 0xdd8 <sendNakAndReti>
    ldi     x1, USBPID_NAK      ;[34] prepare value for usbTxLen
     db2:	0a e5       	ldi	r16, 0x5A	; 90
    brne    sendNakAndReti      ;[36]
#else
    brne    handleIn1           ;[36]
#endif
#endif
    lds     cnt, usbTxLen       ;[37]
     db4:	30 91 ab 00 	lds	r19, 0x00AB
    sbrc    cnt, 4              ;[39] all handshake tokens have bit 4 set
     db8:	34 fd       	sbrc	r19, 4
    rjmp    sendCntAndReti      ;[40] 42 + 16 = 58 until SOP
     dba:	11 c0       	rjmp	.+34     	; 0xdde <sendCntAndReti>
    sts     usbTxLen, x1        ;[41] x1 == USBPID_NAK from above
     dbc:	00 93 ab 00 	sts	0x00AB, r16
    ldi     YL, lo8(usbTxBuf)   ;[43]
     dc0:	c3 ec       	ldi	r28, 0xC3	; 195
    ldi     YH, hi8(usbTxBuf)   ;[44]
     dc2:	d0 e0       	ldi	r29, 0x00	; 0
    rjmp    usbSendAndReti      ;[45] 57 + 12 = 59 until SOP
     dc4:	10 c0       	rjmp	.+32     	; 0xde6 <usbSendAndReti>

00000dc6 <bitstuff7>:
; J = (D+ = 0), (D- = 1)
; K = (D+ = 1), (D- = 0)
; Spec allows 7.5 bit times from EOP to SOP for replies

bitstuff7:
    eor     x1, x4          ;[4]
     dc6:	05 27       	eor	r16, r21
    ldi     x2, 0           ;[5]
     dc8:	10 e0       	ldi	r17, 0x00	; 0
    nop2                    ;[6] C is zero (brcc)
     dca:	00 c0       	rjmp	.+0      	; 0xdcc <bitstuff7+0x6>
    rjmp    didStuff7       ;[8]
     dcc:	21 c0       	rjmp	.+66     	; 0xe10 <didStuff7>

00000dce <bitstuffN>:

bitstuffN:
    eor     x1, x4          ;[5]
     dce:	05 27       	eor	r16, r21
    ldi     x2, 0           ;[6]
     dd0:	10 e0       	ldi	r17, 0x00	; 0
    lpm                     ;[7] 3 cycle NOP, modifies r0
     dd2:	c8 95       	lpm
    out     USBOUT, x1      ;[10] <-- out
     dd4:	08 bb       	out	0x18, r16	; 24
    rjmp    didStuffN       ;[0]
     dd6:	14 c0       	rjmp	.+40     	; 0xe00 <didStuffN>

00000dd8 <sendNakAndReti>:

#define bitStatus   x3

sendNakAndReti:
    ldi     cnt, USBPID_NAK ;[-19]
     dd8:	3a e5       	ldi	r19, 0x5A	; 90
    rjmp    sendCntAndReti  ;[-18]
     dda:	01 c0       	rjmp	.+2      	; 0xdde <sendCntAndReti>

00000ddc <sendAckAndReti>:
sendAckAndReti:
    ldi     cnt, USBPID_ACK ;[-17]
     ddc:	32 ed       	ldi	r19, 0xD2	; 210

00000dde <sendCntAndReti>:
sendCntAndReti:
    mov     r0, cnt         ;[-16]
     dde:	03 2e       	mov	r0, r19
    ldi     YL, 0           ;[-15] R0 address is 0
     de0:	c0 e0       	ldi	r28, 0x00	; 0
    ldi     YH, 0           ;[-14]
     de2:	d0 e0       	ldi	r29, 0x00	; 0
    ldi     cnt, 2          ;[-13]
     de4:	32 e0       	ldi	r19, 0x02	; 2

00000de6 <usbSendAndReti>:
;pointer to data in 'Y'
;number of bytes in 'cnt' -- including sync byte [range 2 ... 12]
;uses: x1...x4, shift, cnt, Y
;Numbers in brackets are time since first bit of sync pattern is sent
usbSendAndReti:             ; 12 cycles until SOP
    in      x2, USBDDR      ;[-12]
     de6:	17 b3       	in	r17, 0x17	; 23
    ori     x2, USBMASK     ;[-11]
     de8:	15 60       	ori	r17, 0x05	; 5
    sbi     USBOUT, USBMINUS;[-10] prepare idle state; D+ and D- must have been 0 (no pullups)
     dea:	c2 9a       	sbi	0x18, 2	; 24
    in      x1, USBOUT      ;[-8] port mirror for tx loop
     dec:	08 b3       	in	r16, 0x18	; 24
    out     USBDDR, x2      ;[-7] <- acquire bus
     dee:	17 bb       	out	0x17, r17	; 23
; need not init x2 (bitstuff history) because sync starts with 0
    ldi     x4, USBMASK     ;[-6] exor mask
     df0:	55 e0       	ldi	r21, 0x05	; 5
    ldi     shift, 0x80     ;[-5] sync byte is first byte sent
     df2:	20 e8       	ldi	r18, 0x80	; 128
    ldi     bitStatus, 0xff ;[-4] init bit loop counter, works for up to 12 bytes
     df4:	4f ef       	ldi	r20, 0xFF	; 255

00000df6 <bitloop>:
byteloop:
bitloop:
    sbrs    shift, 0        ;[8] [-3]
     df6:	20 ff       	sbrs	r18, 0
    eor     x1, x4          ;[9] [-2]
     df8:	05 27       	eor	r16, r21
    out     USBOUT, x1      ;[10] [-1] <-- out
     dfa:	08 bb       	out	0x18, r16	; 24
    ror     shift           ;[0]
     dfc:	27 95       	ror	r18
    ror     x2              ;[1]
     dfe:	17 95       	ror	r17

00000e00 <didStuffN>:
didStuffN:
    cpi     x2, 0xfc        ;[2]
     e00:	1c 3f       	cpi	r17, 0xFC	; 252
    brcc    bitstuffN       ;[3]
     e02:	28 f7       	brcc	.-54     	; 0xdce <bitstuffN>
    nop                     ;[4]
     e04:	00 00       	nop
    subi    bitStatus, 37   ;[5] 256 / 7 ~=~ 37
     e06:	45 52       	subi	r20, 0x25	; 37
    brcc    bitloop         ;[6] when we leave the loop, bitStatus has almost the initial value
     e08:	b0 f7       	brcc	.-20     	; 0xdf6 <bitloop>
    sbrs    shift, 0        ;[7]
     e0a:	20 ff       	sbrs	r18, 0
    eor     x1, x4          ;[8]
     e0c:	05 27       	eor	r16, r21
    ror     shift           ;[9]
     e0e:	27 95       	ror	r18

00000e10 <didStuff7>:
didStuff7:
    out     USBOUT, x1      ;[10] <-- out
     e10:	08 bb       	out	0x18, r16	; 24
    ror     x2              ;[0]
     e12:	17 95       	ror	r17
    cpi     x2, 0xfc        ;[1]
     e14:	1c 3f       	cpi	r17, 0xFC	; 252
    brcc    bitstuff7       ;[2]
     e16:	b8 f6       	brcc	.-82     	; 0xdc6 <bitstuff7>
    ld      shift, y+       ;[3]
     e18:	29 91       	ld	r18, Y+
    dec     cnt             ;[5]
     e1a:	3a 95       	dec	r19
    brne    byteloop        ;[6]
     e1c:	61 f7       	brne	.-40     	; 0xdf6 <bitloop>
;make SE0:
    cbr     x1, USBMASK     ;[7] prepare SE0 [spec says EOP may be 21 to 25 cycles]
     e1e:	0a 7f       	andi	r16, 0xFA	; 250
    lds     x2, usbNewDeviceAddr;[8]
     e20:	10 91 d4 00 	lds	r17, 0x00D4
    lsl     x2              ;[10] we compare with left shifted address
     e24:	11 0f       	add	r17, r17
    out     USBOUT, x1      ;[11] <-- out SE0 -- from now 2 bits = 22 cycles until bus idle
     e26:	08 bb       	out	0x18, r16	; 24
;2006-03-06: moved transfer of new address to usbDeviceAddr from C-Code to asm:
;set address only after data packet was sent, not after handshake
    subi    YL, 2           ;[0] Only assign address on data packets, not ACK/NAK in r0
     e28:	c2 50       	subi	r28, 0x02	; 2
    sbci    YH, 0           ;[1]
     e2a:	d0 40       	sbci	r29, 0x00	; 0
    breq    skipAddrAssign  ;[2]
     e2c:	11 f0       	breq	.+4      	; 0xe32 <skipAddrAssign>
    sts     usbDeviceAddr, x2; if not skipped: SE0 is one cycle longer
     e2e:	10 93 ce 00 	sts	0x00CE, r17

00000e32 <skipAddrAssign>:
skipAddrAssign:
;end of usbDeviceAddress transfer
    ldi     x2, 1<<USB_INTR_PENDING_BIT;[4] int0 occurred during TX -- clear pending flag
     e32:	10 e4       	ldi	r17, 0x40	; 64
    USB_STORE_PENDING(x2)   ;[5]
     e34:	1a bf       	out	0x3a, r17	; 58
    ori     x1, USBIDLE     ;[6]
     e36:	04 60       	ori	r16, 0x04	; 4
    in      x2, USBDDR      ;[7]
     e38:	17 b3       	in	r17, 0x17	; 23
    cbr     x2, USBMASK     ;[8] set both pins to input
     e3a:	1a 7f       	andi	r17, 0xFA	; 250
    mov     x3, x1          ;[9]
     e3c:	40 2f       	mov	r20, r16
    cbr     x3, USBMASK     ;[10] configure no pullup on both pins
     e3e:	4a 7f       	andi	r20, 0xFA	; 250
    ldi     x4, 4           ;[11]
     e40:	54 e0       	ldi	r21, 0x04	; 4

00000e42 <se0Delay>:
se0Delay:
    dec     x4              ;[12] [15] [18] [21]
     e42:	5a 95       	dec	r21
    brne    se0Delay        ;[13] [16] [19] [22]
     e44:	f1 f7       	brne	.-4      	; 0xe42 <se0Delay>
    out     USBOUT, x1      ;[23] <-- out J (idle) -- end of SE0 (EOP signal)
     e46:	08 bb       	out	0x18, r16	; 24
    out     USBDDR, x2      ;[24] <-- release bus now
     e48:	17 bb       	out	0x17, r17	; 23
    out     USBOUT, x3      ;[25] <-- ensure no pull-up resistors are active
     e4a:	48 bb       	out	0x18, r20	; 24
    rjmp    doReturn
     e4c:	8a cf       	rjmp	.-236    	; 0xd62 <doReturn>

00000e4e <usbInit>:
/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbInit(void)
{
#if USB_INTR_CFG_SET != 0
    USB_INTR_CFG |= USB_INTR_CFG_SET;
     e4e:	85 b7       	in	r24, 0x35	; 53
     e50:	82 60       	ori	r24, 0x02	; 2
     e52:	85 bf       	out	0x35, r24	; 53
#endif
#if USB_INTR_CFG_CLR != 0
    USB_INTR_CFG &= ~(USB_INTR_CFG_CLR);
#endif
    USB_INTR_ENABLE |= (1 << USB_INTR_ENABLE_BIT);
     e54:	8b b7       	in	r24, 0x3b	; 59
     e56:	80 64       	ori	r24, 0x40	; 64
     e58:	8b bf       	out	0x3b, r24	; 59
    usbTxLen1 = USBPID_NAK;
#if USB_CFG_HAVE_INTRIN_ENDPOINT3
    usbTxLen3 = USBPID_NAK;
#endif
#endif
}
     e5a:	08 95       	ret

00000e5c <usbPoll>:
}

/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbPoll(void)
{
     e5c:	1f 93       	push	r17
     e5e:	cf 93       	push	r28
     e60:	df 93       	push	r29
schar   len;
uchar   i;

    len = usbRxLen - 3;
     e62:	60 91 d3 00 	lds	r22, 0x00D3
     e66:	63 50       	subi	r22, 0x03	; 3
    if(len >= 0){
     e68:	67 fd       	sbrc	r22, 7
     e6a:	b2 c0       	rjmp	.+356    	; 0xfd0 <usbPoll+0x174>
 * need data integrity checks with this driver, check the CRC in your app
 * code and report errors back to the host. Since the ACK was already sent,
 * retries must be handled on application level.
 * unsigned crc = usbCrc16(buffer + 1, usbRxLen - 3);
 */
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
     e6c:	80 91 d0 00 	lds	r24, 0x00D0
     e70:	cc e0       	ldi	r28, 0x0C	; 12
     e72:	d0 e0       	ldi	r29, 0x00	; 0
     e74:	c8 1b       	sub	r28, r24
     e76:	d1 09       	sbc	r29, r1
     e78:	c9 52       	subi	r28, 0x29	; 41
     e7a:	df 4f       	sbci	r29, 0xFF	; 255
    if(usbRxToken < 0x10){  /* OUT to endpoint != 0: endpoint number in usbRxToken */
        usbFunctionWriteOut(data, len);
        return;
    }
#endif
    if(usbRxToken == (uchar)USBPID_SETUP){
     e7c:	80 91 cf 00 	lds	r24, 0x00CF
     e80:	8d 32       	cpi	r24, 0x2D	; 45
     e82:	09 f0       	breq	.+2      	; 0xe86 <usbPoll+0x2a>
     e84:	93 c0       	rjmp	.+294    	; 0xfac <usbPoll+0x150>
        if(len != 8)    /* Setup size must be always 8 bytes. Ignore otherwise. */
     e86:	68 30       	cpi	r22, 0x08	; 8
     e88:	09 f0       	breq	.+2      	; 0xe8c <usbPoll+0x30>
     e8a:	a0 c0       	rjmp	.+320    	; 0xfcc <usbPoll+0x170>
            return;
        usbMsgLen_t replyLen;
        usbTxBuf[0] = USBPID_DATA0;         /* initialize data toggling */
     e8c:	83 ec       	ldi	r24, 0xC3	; 195
     e8e:	80 93 c3 00 	sts	0x00C3, r24
        usbTxLen = USBPID_NAK;              /* abort pending transmit */
     e92:	8a e5       	ldi	r24, 0x5A	; 90
     e94:	80 93 ab 00 	sts	0x00AB, r24
        usbMsgFlags = 0;
     e98:	10 92 b0 00 	sts	0x00B0, r1
        uchar type = rq->bmRequestType & USBRQ_TYPE_MASK;
        if(type != USBRQ_TYPE_STANDARD){    /* standard requests are handled by driver */
     e9c:	88 81       	ld	r24, Y
     e9e:	80 76       	andi	r24, 0x60	; 96
     ea0:	39 f0       	breq	.+14     	; 0xeb0 <usbPoll+0x54>
            replyLen = usbFunctionSetup(data);
     ea2:	ce 01       	movw	r24, r28
     ea4:	67 d9       	rcall	.-3378   	; 0x174 <usbFunctionSetup>
     ea6:	28 2f       	mov	r18, r24
        }else{
            replyLen = usbDriverSetup(rq);
        }
#if USB_CFG_IMPLEMENT_FN_READ || USB_CFG_IMPLEMENT_FN_WRITE
        if(replyLen == USB_NO_MSG){         /* use user-supplied read/write function */
     ea8:	8f 3f       	cpi	r24, 0xFF	; 255
     eaa:	09 f4       	brne	.+2      	; 0xeae <usbPoll+0x52>
     eac:	6e c0       	rjmp	.+220    	; 0xf8a <usbPoll+0x12e>
     eae:	74 c0       	rjmp	.+232    	; 0xf98 <usbPoll+0x13c>
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
uchar   len  = 0, *dataPtr = usbTxBuf + 9;  /* there are 2 bytes free space at the end of the buffer */
uchar   value = rq->wValue.bytes[0];
     eb0:	9a 81       	ldd	r25, Y+2	; 0x02
#if USB_CFG_IMPLEMENT_HALT
uchar   index = rq->wIndex.bytes[0];
#endif

    dataPtr[0] = 0; /* default reply common to USBRQ_GET_STATUS and USBRQ_GET_INTERFACE */
     eb2:	10 92 cc 00 	sts	0x00CC, r1
    SWITCH_START(rq->bRequest)
     eb6:	89 81       	ldd	r24, Y+1	; 0x01
    SWITCH_CASE(USBRQ_GET_STATUS)           /* 0 */
     eb8:	88 23       	and	r24, r24
     eba:	21 f4       	brne	.+8      	; 0xec4 <usbPoll+0x68>
            dataPtr[0] =  USB_CFG_IS_SELF_POWERED;
#if USB_CFG_IMPLEMENT_HALT
        if(recipient == USBRQ_RCPT_ENDPOINT && index == 0x81)   /* request status for endpoint 1 */
            dataPtr[0] = usbTxLen1 == USBPID_STALL;
#endif
        dataPtr[1] = 0;
     ebc:	10 92 cd 00 	sts	0x00CD, r1
     ec0:	22 e0       	ldi	r18, 0x02	; 2
     ec2:	5c c0       	rjmp	.+184    	; 0xf7c <usbPoll+0x120>
        if(value == 0 && index == 0x81){    /* feature 0 == HALT for endpoint == 1 */
            usbTxLen1 = rq->bRequest == USBRQ_CLEAR_FEATURE ? USBPID_NAK : USBPID_STALL;
            usbResetDataToggling();
        }
#endif
    SWITCH_CASE(USBRQ_SET_ADDRESS)          /* 5 */
     ec4:	85 30       	cpi	r24, 0x05	; 5
     ec6:	19 f4       	brne	.+6      	; 0xece <usbPoll+0x72>
        usbNewDeviceAddr = value;
     ec8:	90 93 d4 00 	sts	0x00D4, r25
     ecc:	56 c0       	rjmp	.+172    	; 0xf7a <usbPoll+0x11e>
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
     ece:	86 30       	cpi	r24, 0x06	; 6
     ed0:	09 f0       	breq	.+2      	; 0xed4 <usbPoll+0x78>
     ed2:	44 c0       	rjmp	.+136    	; 0xf5c <usbPoll+0x100>
static inline usbMsgLen_t usbDriverDescriptor(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar       flags = USB_FLG_MSGPTR_IS_ROM;

    SWITCH_START(rq->wValue.bytes[1])
     ed4:	8b 81       	ldd	r24, Y+3	; 0x03
    SWITCH_CASE(USBDESCR_DEVICE)    /* 1 */
     ed6:	81 30       	cpi	r24, 0x01	; 1
     ed8:	19 f4       	brne	.+6      	; 0xee0 <usbPoll+0x84>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_DEVICE, usbDescriptorDevice)
     eda:	82 e5       	ldi	r24, 0x52	; 82
     edc:	90 e0       	ldi	r25, 0x00	; 0
     ede:	04 c0       	rjmp	.+8      	; 0xee8 <usbPoll+0x8c>
    SWITCH_CASE(USBDESCR_CONFIG)    /* 2 */
     ee0:	82 30       	cpi	r24, 0x02	; 2
     ee2:	41 f4       	brne	.+16     	; 0xef4 <usbPoll+0x98>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_CONFIGURATION, usbDescriptorConfiguration)
     ee4:	84 e6       	ldi	r24, 0x64	; 100
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	90 93 d2 00 	sts	0x00D2, r25
     eec:	80 93 d1 00 	sts	0x00D1, r24
     ef0:	80 e4       	ldi	r24, 0x40	; 64
     ef2:	2d c0       	rjmp	.+90     	; 0xf4e <usbPoll+0xf2>
    SWITCH_CASE(USBDESCR_STRING)    /* 3 */
     ef4:	83 30       	cpi	r24, 0x03	; 3
     ef6:	69 f5       	brne	.+90     	; 0xf52 <usbPoll+0xf6>
#if USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC
        if(USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_RAM)
            flags = 0;
        len = usbFunctionDescriptor(rq);
#else   /* USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC */
        SWITCH_START(rq->wValue.bytes[0])
     ef8:	8a 81       	ldd	r24, Y+2	; 0x02
        SWITCH_CASE(0)
     efa:	88 23       	and	r24, r24
     efc:	49 f4       	brne	.+18     	; 0xf10 <usbPoll+0xb4>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_0, usbDescriptorString0)
     efe:	8e e1       	ldi	r24, 0x1E	; 30
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	90 93 d2 00 	sts	0x00D2, r25
     f06:	80 93 d1 00 	sts	0x00D1, r24
     f0a:	80 e4       	ldi	r24, 0x40	; 64
     f0c:	24 e0       	ldi	r18, 0x04	; 4
     f0e:	23 c0       	rjmp	.+70     	; 0xf56 <usbPoll+0xfa>
        SWITCH_CASE(1)
     f10:	81 30       	cpi	r24, 0x01	; 1
     f12:	49 f4       	brne	.+18     	; 0xf26 <usbPoll+0xca>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_VENDOR, usbDescriptorStringVendor)
     f14:	82 e2       	ldi	r24, 0x22	; 34
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	90 93 d2 00 	sts	0x00D2, r25
     f1c:	80 93 d1 00 	sts	0x00D1, r24
     f20:	80 e4       	ldi	r24, 0x40	; 64
     f22:	2a e1       	ldi	r18, 0x1A	; 26
     f24:	18 c0       	rjmp	.+48     	; 0xf56 <usbPoll+0xfa>
        SWITCH_CASE(2)
     f26:	82 30       	cpi	r24, 0x02	; 2
     f28:	49 f4       	brne	.+18     	; 0xf3c <usbPoll+0xe0>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_PRODUCT, usbDescriptorStringDevice)
     f2a:	8c e3       	ldi	r24, 0x3C	; 60
     f2c:	90 e0       	ldi	r25, 0x00	; 0
     f2e:	90 93 d2 00 	sts	0x00D2, r25
     f32:	80 93 d1 00 	sts	0x00D1, r24
     f36:	80 e4       	ldi	r24, 0x40	; 64
     f38:	26 e1       	ldi	r18, 0x16	; 22
     f3a:	0d c0       	rjmp	.+26     	; 0xf56 <usbPoll+0xfa>
        SWITCH_CASE(3)
     f3c:	83 30       	cpi	r24, 0x03	; 3
     f3e:	49 f4       	brne	.+18     	; 0xf52 <usbPoll+0xf6>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_SERIAL_NUMBER, usbDescriptorStringSerialNumber)
     f40:	89 e9       	ldi	r24, 0x99	; 153
     f42:	90 e0       	ldi	r25, 0x00	; 0
     f44:	90 93 d2 00 	sts	0x00D2, r25
     f48:	80 93 d1 00 	sts	0x00D1, r24
     f4c:	80 e0       	ldi	r24, 0x00	; 0
     f4e:	22 e1       	ldi	r18, 0x12	; 18
     f50:	02 c0       	rjmp	.+4      	; 0xf56 <usbPoll+0xfa>
     f52:	80 e4       	ldi	r24, 0x40	; 64
     f54:	20 e0       	ldi	r18, 0x00	; 0
    SWITCH_DEFAULT
        if(USB_CFG_DESCR_PROPS_UNKNOWN & USB_PROP_IS_DYNAMIC){
            len = usbFunctionDescriptor(rq);
        }
    SWITCH_END
    usbMsgFlags = flags;
     f56:	80 93 b0 00 	sts	0x00B0, r24
     f5a:	1e c0       	rjmp	.+60     	; 0xf98 <usbPoll+0x13c>
        usbNewDeviceAddr = value;
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
        len = usbDriverDescriptor(rq);
        goto skipMsgPtrAssignment;
    SWITCH_CASE(USBRQ_GET_CONFIGURATION)    /* 8 */
     f5c:	88 30       	cpi	r24, 0x08	; 8
     f5e:	21 f4       	brne	.+8      	; 0xf68 <usbPoll+0x10c>
     f60:	21 e0       	ldi	r18, 0x01	; 1
     f62:	86 ed       	ldi	r24, 0xD6	; 214
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	0c c0       	rjmp	.+24     	; 0xf80 <usbPoll+0x124>
        dataPtr = &usbConfiguration;  /* send current configuration value */
        len = 1;
    SWITCH_CASE(USBRQ_SET_CONFIGURATION)    /* 9 */
     f68:	89 30       	cpi	r24, 0x09	; 9
     f6a:	19 f4       	brne	.+6      	; 0xf72 <usbPoll+0x116>
        usbConfiguration = value;
     f6c:	90 93 d6 00 	sts	0x00D6, r25
     f70:	04 c0       	rjmp	.+8      	; 0xf7a <usbPoll+0x11e>
        usbResetStall();
    SWITCH_CASE(USBRQ_GET_INTERFACE)        /* 10 */
     f72:	8a 30       	cpi	r24, 0x0A	; 10
     f74:	11 f4       	brne	.+4      	; 0xf7a <usbPoll+0x11e>
     f76:	21 e0       	ldi	r18, 0x01	; 1
     f78:	01 c0       	rjmp	.+2      	; 0xf7c <usbPoll+0x120>
     f7a:	20 e0       	ldi	r18, 0x00	; 0
     f7c:	8c ec       	ldi	r24, 0xCC	; 204
     f7e:	90 e0       	ldi	r25, 0x00	; 0
        usbResetStall();
#endif
    SWITCH_DEFAULT                          /* 7=SET_DESCRIPTOR, 12=SYNC_FRAME */
        /* Should we add an optional hook here? */
    SWITCH_END
    usbMsgPtr = dataPtr;
     f80:	90 93 d2 00 	sts	0x00D2, r25
     f84:	80 93 d1 00 	sts	0x00D1, r24
     f88:	07 c0       	rjmp	.+14     	; 0xf98 <usbPoll+0x13c>
            replyLen = usbDriverSetup(rq);
        }
#if USB_CFG_IMPLEMENT_FN_READ || USB_CFG_IMPLEMENT_FN_WRITE
        if(replyLen == USB_NO_MSG){         /* use user-supplied read/write function */
            /* do some conditioning on replyLen, but on IN transfers only */
            if((rq->bmRequestType & USBRQ_DIR_MASK) != USBRQ_DIR_HOST_TO_DEVICE){
     f8a:	88 81       	ld	r24, Y
     f8c:	87 fd       	sbrc	r24, 7
                if(sizeof(replyLen) < sizeof(rq->wLength.word)){ /* help compiler with optimizing */
                    replyLen = rq->wLength.bytes[0];
     f8e:	2e 81       	ldd	r18, Y+6	; 0x06
                }else{
                    replyLen = rq->wLength.word;
                }
            }
            usbMsgFlags = USB_FLG_USE_USER_RW;
     f90:	80 e8       	ldi	r24, 0x80	; 128
     f92:	80 93 b0 00 	sts	0x00B0, r24
     f96:	06 c0       	rjmp	.+12     	; 0xfa4 <usbPoll+0x148>
        }else   /* The 'else' prevents that we limit a replyLen of USB_NO_MSG to the maximum transfer len. */
#endif
        if(sizeof(replyLen) < sizeof(rq->wLength.word)){ /* help compiler with optimizing */
            if(!rq->wLength.bytes[1] && replyLen > rq->wLength.bytes[0])    /* limit length to max */
     f98:	8f 81       	ldd	r24, Y+7	; 0x07
     f9a:	88 23       	and	r24, r24
     f9c:	19 f4       	brne	.+6      	; 0xfa4 <usbPoll+0x148>
     f9e:	8e 81       	ldd	r24, Y+6	; 0x06
     fa0:	82 17       	cp	r24, r18
     fa2:	08 f0       	brcs	.+2      	; 0xfa6 <usbPoll+0x14a>
     fa4:	82 2f       	mov	r24, r18
                replyLen = rq->wLength.bytes[0];
        }else{
            if(replyLen > rq->wLength.word)     /* limit length to max */
                replyLen = rq->wLength.word;
        }
        usbMsgLen = replyLen;
     fa6:	80 93 ac 00 	sts	0x00AC, r24
     faa:	10 c0       	rjmp	.+32     	; 0xfcc <usbPoll+0x170>
    }else{  /* usbRxToken must be USBPID_OUT, which means data phase of setup (control-out) */
#if USB_CFG_IMPLEMENT_FN_WRITE
        if(usbMsgFlags & USB_FLG_USE_USER_RW){
     fac:	80 91 b0 00 	lds	r24, 0x00B0
     fb0:	87 ff       	sbrs	r24, 7
     fb2:	0c c0       	rjmp	.+24     	; 0xfcc <usbPoll+0x170>
            uchar rval = usbFunctionWrite(data, len);
     fb4:	ce 01       	movw	r24, r28
     fb6:	2e da       	rcall	.-2980   	; 0x414 <usbFunctionWrite>
            if(rval == 0xff){   /* an error occurred */
     fb8:	8f 3f       	cpi	r24, 0xFF	; 255
     fba:	21 f4       	brne	.+8      	; 0xfc4 <usbPoll+0x168>
                usbTxLen = USBPID_STALL;
     fbc:	8e e1       	ldi	r24, 0x1E	; 30
     fbe:	80 93 ab 00 	sts	0x00AB, r24
     fc2:	04 c0       	rjmp	.+8      	; 0xfcc <usbPoll+0x170>
            }else if(rval != 0){    /* This was the final package */
     fc4:	88 23       	and	r24, r24
     fc6:	11 f0       	breq	.+4      	; 0xfcc <usbPoll+0x170>
                usbMsgLen = 0;  /* answer with a zero-sized data packet */
     fc8:	10 92 ac 00 	sts	0x00AC, r1
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
#if USB_CFG_HAVE_FLOWCONTROL
        if(usbRxLen > 0)    /* only mark as available if not inactivated */
            usbRxLen = 0;
#else
        usbRxLen = 0;       /* mark rx buffer as available */
     fcc:	10 92 d3 00 	sts	0x00D3, r1
#endif
    }
    if(usbTxLen & 0x10){    /* transmit system idle */
     fd0:	80 91 ab 00 	lds	r24, 0x00AB
     fd4:	84 ff       	sbrs	r24, 4
     fd6:	49 c0       	rjmp	.+146    	; 0x106a <usbPoll+0x20e>
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
     fd8:	80 91 ac 00 	lds	r24, 0x00AC
     fdc:	8f 3f       	cpi	r24, 0xFF	; 255
     fde:	09 f4       	brne	.+2      	; 0xfe2 <usbPoll+0x186>
     fe0:	44 c0       	rjmp	.+136    	; 0x106a <usbPoll+0x20e>
     fe2:	18 2f       	mov	r17, r24
     fe4:	89 30       	cpi	r24, 0x09	; 9
     fe6:	08 f0       	brcs	.+2      	; 0xfea <usbPoll+0x18e>
     fe8:	18 e0       	ldi	r17, 0x08	; 8
uchar       len;

    wantLen = usbMsgLen;
    if(wantLen > 8)
        wantLen = 8;
    usbMsgLen -= wantLen;
     fea:	81 1b       	sub	r24, r17
     fec:	80 93 ac 00 	sts	0x00AC, r24
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
     ff0:	80 91 c3 00 	lds	r24, 0x00C3
     ff4:	98 e8       	ldi	r25, 0x88	; 136
     ff6:	89 27       	eor	r24, r25
     ff8:	80 93 c3 00 	sts	0x00C3, r24
/* This function is similar to usbFunctionRead(), but it's also called for
 * data handled automatically by the driver (e.g. descriptor reads).
 */
static uchar usbDeviceRead(uchar *data, uchar len)
{
    if(len > 0){    /* don't bother app with 0 sized reads */
     ffc:	11 23       	and	r17, r17
     ffe:	41 f1       	breq	.+80     	; 0x1050 <usbPoll+0x1f4>
        if(usbMsgFlags & USB_FLG_USE_USER_RW){
            len = usbFunctionRead(data, len);
        }else
#endif
        {
            uchar i = len, *r = usbMsgPtr;
    1000:	20 91 d1 00 	lds	r18, 0x00D1
    1004:	30 91 d2 00 	lds	r19, 0x00D2
            if(usbMsgFlags & USB_FLG_MSGPTR_IS_ROM){    /* ROM data */
    1008:	80 91 b0 00 	lds	r24, 0x00B0
    100c:	86 ff       	sbrs	r24, 6
    100e:	0d c0       	rjmp	.+26     	; 0x102a <usbPoll+0x1ce>
    1010:	a4 ec       	ldi	r26, 0xC4	; 196
    1012:	b0 e0       	ldi	r27, 0x00	; 0
    1014:	80 e0       	ldi	r24, 0x00	; 0
    1016:	90 e0       	ldi	r25, 0x00	; 0
                do{
                    uchar c = USB_READ_FLASH(r);    /* assign to char size variable to enforce byte ops */
    1018:	f9 01       	movw	r30, r18
    101a:	e8 0f       	add	r30, r24
    101c:	f9 1f       	adc	r31, r25
    101e:	e4 91       	lpm	r30, Z+
                    *data++ = c;
    1020:	ed 93       	st	X+, r30
    1022:	01 96       	adiw	r24, 0x01	; 1
                    r++;
                }while(--i);
    1024:	18 17       	cp	r17, r24
    1026:	c1 f7       	brne	.-16     	; 0x1018 <usbPoll+0x1bc>
    1028:	08 c0       	rjmp	.+16     	; 0x103a <usbPoll+0x1de>
    102a:	91 2f       	mov	r25, r17
    102c:	d9 01       	movw	r26, r18
    102e:	e4 ec       	ldi	r30, 0xC4	; 196
    1030:	f0 e0       	ldi	r31, 0x00	; 0
            }else{  /* RAM data */
                do{
                    *data++ = *r++;
    1032:	8d 91       	ld	r24, X+
    1034:	81 93       	st	Z+, r24
                }while(--i);
    1036:	91 50       	subi	r25, 0x01	; 1
    1038:	e1 f7       	brne	.-8      	; 0x1032 <usbPoll+0x1d6>
    103a:	11 50       	subi	r17, 0x01	; 1
    103c:	81 2f       	mov	r24, r17
    103e:	90 e0       	ldi	r25, 0x00	; 0
    1040:	1f 5f       	subi	r17, 0xFF	; 255
    1042:	01 96       	adiw	r24, 0x01	; 1
    1044:	82 0f       	add	r24, r18
    1046:	93 1f       	adc	r25, r19
            }
            usbMsgPtr = r;
    1048:	90 93 d2 00 	sts	0x00D2, r25
    104c:	80 93 d1 00 	sts	0x00D1, r24
        wantLen = 8;
    usbMsgLen -= wantLen;
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
    len = usbDeviceRead(usbTxBuf + 1, wantLen);
    if(len <= 8){           /* valid data packet */
        usbCrc16Append(&usbTxBuf[1], len);
    1050:	84 ec       	ldi	r24, 0xC4	; 196
    1052:	90 e0       	ldi	r25, 0x00	; 0
    1054:	61 2f       	mov	r22, r17
    1056:	93 dd       	rcall	.-1242   	; 0xb7e <usbCrc16Append>
        len += 4;           /* length including sync byte */
    1058:	61 2f       	mov	r22, r17
    105a:	6c 5f       	subi	r22, 0xFC	; 252
        if(len < 12)        /* a partial package identifies end of message */
    105c:	6c 30       	cpi	r22, 0x0C	; 12
    105e:	19 f0       	breq	.+6      	; 0x1066 <usbPoll+0x20a>
            usbMsgLen = USB_NO_MSG;
    1060:	8f ef       	ldi	r24, 0xFF	; 255
    1062:	80 93 ac 00 	sts	0x00AC, r24
    }else{
        len = USBPID_STALL;   /* stall the endpoint */
        usbMsgLen = USB_NO_MSG;
    }
    usbTxLen = len;
    1066:	60 93 ab 00 	sts	0x00AB, r22
    106a:	94 e1       	ldi	r25, 0x14	; 20
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
            usbBuildTxBlock();
        }
    }
    for(i = 20; i > 0; i--){
        uchar usbLineStatus = USBIN & USBMASK;
    106c:	86 b3       	in	r24, 0x16	; 22
        if(usbLineStatus != 0)  /* SE0 has ended */
    106e:	85 70       	andi	r24, 0x05	; 5
    1070:	31 f4       	brne	.+12     	; 0x107e <usbPoll+0x222>
    if(usbTxLen & 0x10){    /* transmit system idle */
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
            usbBuildTxBlock();
        }
    }
    for(i = 20; i > 0; i--){
    1072:	91 50       	subi	r25, 0x01	; 1
    1074:	d9 f7       	brne	.-10     	; 0x106c <usbPoll+0x210>
        uchar usbLineStatus = USBIN & USBMASK;
        if(usbLineStatus != 0)  /* SE0 has ended */
            goto isNotReset;
    }
    /* RESET condition, called multiple times during reset */
    usbNewDeviceAddr = 0;
    1076:	10 92 d4 00 	sts	0x00D4, r1
    usbDeviceAddr = 0;
    107a:	10 92 ce 00 	sts	0x00CE, r1

static inline void usbHandleResetHook(uchar notResetState)
{
#ifdef USB_RESET_HOOK
static uchar    wasReset;
uchar           isReset = !notResetState;
    107e:	10 e0       	ldi	r17, 0x00	; 0
    1080:	99 23       	and	r25, r25
    1082:	09 f4       	brne	.+2      	; 0x1086 <usbPoll+0x22a>
    1084:	11 e0       	ldi	r17, 0x01	; 1

    if(wasReset != isReset){
    1086:	80 91 af 00 	lds	r24, 0x00AF
    108a:	81 17       	cp	r24, r17
    108c:	29 f0       	breq	.+10     	; 0x1098 <usbPoll+0x23c>
        USB_RESET_HOOK(isReset);
    108e:	11 23       	and	r17, r17
    1090:	09 f4       	brne	.+2      	; 0x1094 <usbPoll+0x238>
    1092:	e2 da       	rcall	.-2620   	; 0x658 <usbEventResetReady>
        wasReset = isReset;
    1094:	10 93 af 00 	sts	0x00AF, r17
    usbDeviceAddr = 0;
    usbResetStall();
    DBG1(0xff, 0, 0);
isNotReset:
    usbHandleResetHook(i);
}
    1098:	df 91       	pop	r29
    109a:	cf 91       	pop	r28
    109c:	1f 91       	pop	r17
    109e:	08 95       	ret

000010a0 <__mulhi3>:
    10a0:	55 27       	eor	r21, r21
    10a2:	00 24       	eor	r0, r0

000010a4 <__mulhi3_loop>:
    10a4:	80 ff       	sbrs	r24, 0
    10a6:	02 c0       	rjmp	.+4      	; 0x10ac <__mulhi3_skip1>
    10a8:	06 0e       	add	r0, r22
    10aa:	57 1f       	adc	r21, r23

000010ac <__mulhi3_skip1>:
    10ac:	66 0f       	add	r22, r22
    10ae:	77 1f       	adc	r23, r23
    10b0:	61 15       	cp	r22, r1
    10b2:	71 05       	cpc	r23, r1
    10b4:	21 f0       	breq	.+8      	; 0x10be <__mulhi3_exit>
    10b6:	96 95       	lsr	r25
    10b8:	87 95       	ror	r24
    10ba:	00 97       	sbiw	r24, 0x00	; 0
    10bc:	99 f7       	brne	.-26     	; 0x10a4 <__mulhi3_loop>

000010be <__mulhi3_exit>:
    10be:	95 2f       	mov	r25, r21
    10c0:	80 2d       	mov	r24, r0
    10c2:	08 95       	ret

000010c4 <__mulsi3>:
    10c4:	ff 27       	eor	r31, r31
    10c6:	ee 27       	eor	r30, r30
    10c8:	bb 27       	eor	r27, r27
    10ca:	aa 27       	eor	r26, r26

000010cc <__mulsi3_loop>:
    10cc:	60 ff       	sbrs	r22, 0
    10ce:	04 c0       	rjmp	.+8      	; 0x10d8 <__mulsi3_skip1>
    10d0:	a2 0f       	add	r26, r18
    10d2:	b3 1f       	adc	r27, r19
    10d4:	e4 1f       	adc	r30, r20
    10d6:	f5 1f       	adc	r31, r21

000010d8 <__mulsi3_skip1>:
    10d8:	22 0f       	add	r18, r18
    10da:	33 1f       	adc	r19, r19
    10dc:	44 1f       	adc	r20, r20
    10de:	55 1f       	adc	r21, r21
    10e0:	96 95       	lsr	r25
    10e2:	87 95       	ror	r24
    10e4:	77 95       	ror	r23
    10e6:	67 95       	ror	r22
    10e8:	89 f7       	brne	.-30     	; 0x10cc <__mulsi3_loop>
    10ea:	00 97       	sbiw	r24, 0x00	; 0
    10ec:	76 07       	cpc	r23, r22
    10ee:	71 f7       	brne	.-36     	; 0x10cc <__mulsi3_loop>

000010f0 <__mulsi3_exit>:
    10f0:	cf 01       	movw	r24, r30
    10f2:	bd 01       	movw	r22, r26
    10f4:	08 95       	ret

000010f6 <__udivmodhi4>:
    10f6:	aa 1b       	sub	r26, r26
    10f8:	bb 1b       	sub	r27, r27
    10fa:	51 e1       	ldi	r21, 0x11	; 17
    10fc:	07 c0       	rjmp	.+14     	; 0x110c <__udivmodhi4_ep>

000010fe <__udivmodhi4_loop>:
    10fe:	aa 1f       	adc	r26, r26
    1100:	bb 1f       	adc	r27, r27
    1102:	a6 17       	cp	r26, r22
    1104:	b7 07       	cpc	r27, r23
    1106:	10 f0       	brcs	.+4      	; 0x110c <__udivmodhi4_ep>
    1108:	a6 1b       	sub	r26, r22
    110a:	b7 0b       	sbc	r27, r23

0000110c <__udivmodhi4_ep>:
    110c:	88 1f       	adc	r24, r24
    110e:	99 1f       	adc	r25, r25
    1110:	5a 95       	dec	r21
    1112:	a9 f7       	brne	.-22     	; 0x10fe <__udivmodhi4_loop>
    1114:	80 95       	com	r24
    1116:	90 95       	com	r25
    1118:	bc 01       	movw	r22, r24
    111a:	cd 01       	movw	r24, r26
    111c:	08 95       	ret

0000111e <__eerd_block_tn85>:
    111e:	dc 01       	movw	r26, r24
    1120:	cb 01       	movw	r24, r22

00001122 <__eerd_blraw_tn85>:
    1122:	fc 01       	movw	r30, r24
    1124:	e1 99       	sbic	0x1c, 1	; 28
    1126:	fe cf       	rjmp	.-4      	; 0x1124 <__eerd_blraw_tn85+0x2>
    1128:	06 c0       	rjmp	.+12     	; 0x1136 <__eerd_blraw_tn85+0x14>
    112a:	ff bb       	out	0x1f, r31	; 31
    112c:	ee bb       	out	0x1e, r30	; 30
    112e:	e0 9a       	sbi	0x1c, 0	; 28
    1130:	31 96       	adiw	r30, 0x01	; 1
    1132:	0d b2       	in	r0, 0x1d	; 29
    1134:	0d 92       	st	X+, r0
    1136:	41 50       	subi	r20, 0x01	; 1
    1138:	50 40       	sbci	r21, 0x00	; 0
    113a:	b8 f7       	brcc	.-18     	; 0x112a <__eerd_blraw_tn85+0x8>
    113c:	08 95       	ret

0000113e <__eerd_byte_tn85>:
    113e:	e1 99       	sbic	0x1c, 1	; 28
    1140:	fe cf       	rjmp	.-4      	; 0x113e <__eerd_byte_tn85>
    1142:	9f bb       	out	0x1f, r25	; 31
    1144:	8e bb       	out	0x1e, r24	; 30
    1146:	e0 9a       	sbi	0x1c, 0	; 28
    1148:	99 27       	eor	r25, r25
    114a:	8d b3       	in	r24, 0x1d	; 29
    114c:	08 95       	ret

0000114e <__eewr_block_tn85>:
    114e:	dc 01       	movw	r26, r24
    1150:	cb 01       	movw	r24, r22
    1152:	02 c0       	rjmp	.+4      	; 0x1158 <__eewr_block_tn85+0xa>
    1154:	2d 91       	ld	r18, X+
    1156:	05 d0       	rcall	.+10     	; 0x1162 <__eewr_r18_tn85>
    1158:	41 50       	subi	r20, 0x01	; 1
    115a:	50 40       	sbci	r21, 0x00	; 0
    115c:	d8 f7       	brcc	.-10     	; 0x1154 <__eewr_block_tn85+0x6>
    115e:	08 95       	ret

00001160 <__eewr_byte_tn85>:
    1160:	26 2f       	mov	r18, r22

00001162 <__eewr_r18_tn85>:
    1162:	e1 99       	sbic	0x1c, 1	; 28
    1164:	fe cf       	rjmp	.-4      	; 0x1162 <__eewr_r18_tn85>
    1166:	1c ba       	out	0x1c, r1	; 28
    1168:	9f bb       	out	0x1f, r25	; 31
    116a:	8e bb       	out	0x1e, r24	; 30
    116c:	2d bb       	out	0x1d, r18	; 29
    116e:	0f b6       	in	r0, 0x3f	; 63
    1170:	f8 94       	cli
    1172:	e2 9a       	sbi	0x1c, 2	; 28
    1174:	e1 9a       	sbi	0x1c, 1	; 28
    1176:	0f be       	out	0x3f, r0	; 63
    1178:	01 96       	adiw	r24, 0x01	; 1
    117a:	08 95       	ret

0000117c <_exit>:
    117c:	f8 94       	cli

0000117e <__stop_program>:
    117e:	ff cf       	rjmp	.-2      	; 0x117e <__stop_program>
